{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":0,"renderable":1},{"_id":"themes/melody/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":0,"renderable":1},{"_id":"themes/melody/source/css/404.styl","path":"css/404.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/katex.js","path":"js/katex.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":0,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/melody/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","path":"js/third-party/reveal/markdown.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","path":"js/third-party/reveal/marked.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","path":"js/third-party/reveal/math.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","path":"js/third-party/reveal/notes.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","path":"js/third-party/reveal/zoom.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","path":"js/third-party/reveal/reveal.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","path":"js/third-party/reveal/highlight.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/melody/.eslintignore","hash":"719a633358c168ec04b544a5a306fc454471f72f","modified":1601037382778},{"_id":"themes/melody/.eslintrc","hash":"2c75ddb670b21591023b2c4f52ecfb02578b5eae","modified":1601037382779},{"_id":"themes/melody/.travis.demo.yml","hash":"977db46c56f95e0b475326ee7499890aa16bd971","modified":1601037382779},{"_id":"themes/melody/.gitignore","hash":"371c0a57184696c2069b146fc8ccaa285ca7626c","modified":1601037382779},{"_id":"themes/melody/CHANGELOG.md","hash":"1bd1bad3e3450b69f4b303459ddd18c9ec545e9a","modified":1601037382779},{"_id":"themes/melody/FAQ.md","hash":"2e4871193be2bbade191c1064216072cbe61ab72","modified":1601037382780},{"_id":"themes/melody/LICENSE","hash":"f6ad35196b942786fa91aedc1c0f45bf89de3fd3","modified":1601037382780},{"_id":"themes/melody/README.md","hash":"afbc589a9023a2b827f611e880e2b63d573e9d6c","modified":1601037382781},{"_id":"themes/melody/_config.yml","hash":"06d5f00811b8fc68d2a391180af7cbe8a3b848c9","modified":1601037382781},{"_id":"themes/melody/package.json","hash":"ec19e33a67d5ff52d4fb941477fb4c3494f44a07","modified":1601037382796},{"_id":"themes/melody/stylus_format.json","hash":"53008fbf66531953489ab0f2ce166576b7ba1ab7","modified":1601037382823},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1601037382797},{"_id":"source/_data/melody.yml","hash":"63befb0371f120a0813ca16bf7f99336587b8d63","modified":1601037382742},{"_id":"source/404/index.md","hash":"f175723264bec7e53716d540c3d623988d46b84a","modified":1588174053470},{"_id":"source/_posts/Redis数据结构-1.md","hash":"89fdd6da26503267e90f27cfcc426c5ed9de6563","modified":1601037382742},{"_id":"source/categories/index.md","hash":"df36239f3e6260a7571d45566a094e093ab0dd2c","modified":1588174057737},{"_id":"source/gallery/index.md","hash":"ee79543d445772931a1198ba3ede4083d3b6d183","modified":1588174049905},{"_id":"source/slides/index.md","hash":"fc1da47d7195ce85703f0d7600d4fa4b4e7034d7","modified":1588174055669},{"_id":"source/tags/index.md","hash":"70d483629567d1bf57c43b17cdc5addf68062a05","modified":1588173467698},{"_id":"themes/melody/languages/default.yml","hash":"4f87bdc1526111b59785f1dce1025435f7ed8e97","modified":1601037382781},{"_id":"themes/melody/languages/en.yml","hash":"4f87bdc1526111b59785f1dce1025435f7ed8e97","modified":1601037382782},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"1868dda88a019692d1993d5ee6b1b854f1da9d88","modified":1601037382782},{"_id":"themes/melody/layout/404.pug","hash":"0ad5d251ba70edad5c04a45d13ca6a8db3bf7b42","modified":1601037382782},{"_id":"themes/melody/layout/archive.pug","hash":"f3198ed4d59ca9d0423060a428106a857247a8f8","modified":1601037382783},{"_id":"themes/melody/layout/category.pug","hash":"27fe85787ee1e4bba75a6eadbf86f7ffc58cb66a","modified":1601037382783},{"_id":"themes/melody/layout/gallery.pug","hash":"1470a86b329eb5c60d6fa6a7bafa25ddf1255f97","modified":1601037382783},{"_id":"themes/melody/layout/index.pug","hash":"d15a36b5c8f1bec367888edb358e70b47eb15ea9","modified":1601037382795},{"_id":"themes/melody/layout/post.pug","hash":"40cb5814e69027ac030792a3b8d72bb43811f8e6","modified":1601037382795},{"_id":"themes/melody/layout/page.pug","hash":"bbcd45cc14b69e260cf7bf851d1926dedc5cd3be","modified":1601037382795},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1601037382796},{"_id":"themes/melody/layout/tag.pug","hash":"6b5c5c08e9a6773a4fce8583fdf614a784beb045","modified":1601037382796},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"b18e4a809de37da54ea914452ce4a24785fa7621","modified":1601037382797},{"_id":"themes/melody/scripts/replace-config.js","hash":"9d5378898a068e77b5e601c950b631144bd743cf","modified":1601037382797},{"_id":"themes/melody/source/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1601037382822},{"_id":"themes/melody/source/favicon.ico","hash":"af1eb9adcd8e0a46786da960f6a22f3dcab8c819","modified":1601037382806},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1601037382809},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"92c27adaf87d1108da8ba31c31ceae0e2083484c","modified":1601037382784},{"_id":"themes/melody/layout/includes/config.pug","hash":"42e523fef2e9f285d989d494f0a6fce485921719","modified":1601037382786},{"_id":"themes/melody/layout/includes/footer.pug","hash":"c5968d30a668c3d1b8e658d784b661799d3ba48a","modified":1601037382787},{"_id":"themes/melody/layout/includes/head.pug","hash":"5c5ad5baa1d44bd4264cc1af0042123ace8aa853","modified":1601037382788},{"_id":"themes/melody/layout/includes/header.pug","hash":"2d6ab2df1c048654c5b32eeed789e19949853d93","modified":1601037382788},{"_id":"themes/melody/layout/includes/layout.pug","hash":"80e59c4023baa2504bff0e9a69efab3314f8ffdb","modified":1601037382789},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"11a7d975f7e44932ea509a1a9d29f3e1ddece73e","modified":1601037382790},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"f37dc3576cc45ad3da097b58f420b5b523d8a9a5","modified":1601037382790},{"_id":"themes/melody/layout/includes/nav.pug","hash":"e1f5053a66a48b6fb6c4390ae55f5bd8e397ff8e","modified":1601037382790},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"5fd5e002d0ab203489c840451e4fa9d3535610e2","modified":1601037382793},{"_id":"themes/melody/source/css/404.styl","hash":"e16201381c7f064f1923a12a23136cec6db0a8a0","modified":1601037382798},{"_id":"themes/melody/source/css/index.styl","hash":"c2823ad6013df237993eea5cf190c313270da4db","modified":1601037382805},{"_id":"themes/melody/source/css/var.styl","hash":"bfce8a6dd838762e3db0b0052887220eb260dc7b","modified":1601037382805},{"_id":"themes/melody/source/js/copy.js","hash":"a3a7c3158ea23a3bf63f7900750cc0928b73e25f","modified":1601037382808},{"_id":"themes/melody/source/js/fancybox.js","hash":"91d2acc362c03d905b2d40bda42e08c0ae81c4f7","modified":1601037382809},{"_id":"themes/melody/source/js/fireworks.js","hash":"f4f902392525133028f501bef2afa6b1045b5b9c","modified":1601037382809},{"_id":"themes/melody/source/js/head.js","hash":"24bc79d4382730d79174cdc2cd3de6368dee8034","modified":1601037382809},{"_id":"themes/melody/source/js/scroll.js","hash":"ec2d51d4c98af4e1162a79e430340a7aeb3a7165","modified":1601037382810},{"_id":"themes/melody/source/js/katex.js","hash":"8cc3bcbfd489f86714e815dc6ab8bad466c49664","modified":1601037382810},{"_id":"themes/melody/source/js/sidebar.js","hash":"6906dcca3a6b9bd46489ca378bc1e74e454168ac","modified":1601037382811},{"_id":"themes/melody/source/js/utils.js","hash":"5ff6609b1d674f7879f30e491bdd3c69139704da","modified":1601037382822},{"_id":"themes/melody/source/js/transition.js","hash":"24db2b0ae93ea925fb18be6d466365a4cd9f6576","modified":1601037382822},{"_id":"themes/melody/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1601037382807},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1601037382788},{"_id":"themes/melody/source/img/avatar.png","hash":"af1eb9adcd8e0a46786da960f6a22f3dcab8c819","modified":1601037382808},{"_id":"themes/melody/layout/includes/404/404-nav.pug","hash":"f085a65214c2656ef6a104a2ae9fa1f8fbc196c1","modified":1601037382784},{"_id":"themes/melody/layout/includes/404/layout.pug","hash":"24e9cee9d7c96712fffc404671d88f1d9c0a5a9b","modified":1601037382784},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"0d753ace1190deebd9173279ab5369e4a30c53a8","modified":1601037382785},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"590bc5af43bc55182157dbac65e7cd8bf39f410d","modified":1601037382785},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"b8c1344a2760a46774f1894967c879d72802556d","modified":1601037382786},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"97f524092775c9b7e618c691df40b4bce9e121ac","modified":1601037382785},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"81e10998d5a2d28857f1c32e2d8b1ba1d84ce0f8","modified":1601037382786},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"1ffb80147fd443144ca6cf0230515f229eba6745","modified":1601037382786},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"760be9ea92e5eb6959f37b76b9c13fb627893b0a","modified":1601037382787},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1601037382788},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"05c080cbd236b7d94765350cc699b92736ca4609","modified":1601037382789},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"cde884e97dd980bf05910934ce1d52ef3bd5df9c","modified":1601037382789},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"3d2b2de0e199ab1fb151f41f2bbaac909f3d3d12","modified":1601037382791},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"66b4f4e8119e987cd3f9907298689a1408a05859","modified":1601037382791},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"205aff585f7763b61b8597c6121e6d8c5f9329a4","modified":1601037382791},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"171ce0b25aad4f5f4095f5da0caa7e9d26664a03","modified":1601037382793},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"cacee97b98943fecc3ad50c1b45f71a4cf2e8c4b","modified":1601037382794},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"055d41a0cc135b8fb02da8faa1df5faacb8fc13d","modified":1601037382792},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"c1ab921b1874d0026a7e1c23833600e3ea158881","modified":1601037382792},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"42794c93723016ce1f23b81325e723a6f23f72d0","modified":1601037382792},{"_id":"themes/melody/layout/includes/third-party/canvas-ribbon.pug","hash":"a72c4b5943e9e88588983ab1c1cfeaf210142c56","modified":1601037382794},{"_id":"themes/melody/layout/includes/third-party/katex.pug","hash":"19ffed43fa22c3bf1c8d974a8d33f73a9a67d098","modified":1601037382794},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"0afc0e488ef64f5cb27b9fc90b13f0f9e9f958a5","modified":1601037382794},{"_id":"themes/melody/source/css/_global/index.styl","hash":"a6ad6d2675e975883855a1fa3a634c7ba06d4685","modified":1601037382799},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"4e761f65c28f9df474fa2bd4d891c22db1aafa27","modified":1601037382799},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"ca5913698ddd97a55adcc98097038e4190cd7b58","modified":1601037382800},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"89af8e4eb6adacee6693b3df46d87a0b1b2b0d2d","modified":1601037382800},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"0168c78d28fbc8996ad9e1764457a6526404515b","modified":1601037382803},{"_id":"themes/melody/source/css/_search/index.styl","hash":"b16e4c15ad5844096f427eb3bdb49c5bb0bbcaf7","modified":1601037382803},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"adb2663fcfee1c84461231472f228aa82c6478bd","modified":1601037382804},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"3b32040e894978ec9be6569f44fd5557734f2340","modified":1601037382800},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"cb6db6151a49db6af0f7f6c8ee4c84872a75e437","modified":1601037382801},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"41fe374cfa854be779b07d91f918836e8c03d54a","modified":1601037382801},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"65420e8415cc117916c8b13f214d3a76815692dd","modified":1601037382801},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"ad5dc99b438588f92115592ed2d65a47c980720d","modified":1601037382802},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"01e135d129bb66f278039f6d2780e4462319395a","modified":1601037382802},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"29b02d3c319d84ab98dddec449f4bc83fbfdad36","modified":1601037382802},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1601037382804},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1601037382805},{"_id":"themes/melody/source/js/search/algolia.js","hash":"8a6673cb1616b50a5ac8b2dc20fb3475bc32039f","modified":1601037382811},{"_id":"themes/melody/source/js/search/local-search.js","hash":"a642a93fb52ebc87f05e5d3cee38618013fda539","modified":1601037382811},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"7c9416c1b444773b2d82e797131d6047364645a3","modified":1601037382812},{"_id":"themes/melody/source/js/third-party/canvas-ribbon.js","hash":"48abc9e33d90de08a49d63e1bcd21defe0461309","modified":1601037382812},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"0acabccbb20d722141fa15b37d535807092b2c88","modified":1601037382813},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"15a9dc404e02f2cd9b46cc71293b65671976567b","modified":1601037382821},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1601037382821},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1601037382814},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1601037382818},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","hash":"abd5391551b7b4e0cc0511c4b5c5ccfe66100f1b","modified":1601037382819},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1601037382819},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1601037382819},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1601037382820},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"e34a3faf6e51034de612d15700e059fe82dba310","modified":1601037382814},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1601037382820},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1601037382818},{"_id":"public/search.xml","hash":"a6ddf6b3017b47d3be220871fd955a9f22dc4a1c","modified":1607246092707},{"_id":"public/404.html","hash":"32c04b1bc5307fe8e53fe6407fb088c49b1b3e76","modified":1601037486855},{"_id":"public/categories/index.html","hash":"30a0ec9a36a1f9a4301d2758acf2955aafee7969","modified":1607246092707},{"_id":"public/gallery/index.html","hash":"6dd54fbc977c05a231ae0656cd44131acc51c6c2","modified":1607246092707},{"_id":"public/slides/index.html","hash":"ba9a53f0ba48a029d3ec51ba8531da62ed5f2b6c","modified":1607246092707},{"_id":"public/tags/index.html","hash":"f95b1bc98595966186d3d262c1e9aee4f66c3646","modified":1607246092707},{"_id":"public/index.html","hash":"2905613b69a4f264b177652dc8447c43c8308b76","modified":1607246092707},{"_id":"public/archives/index.html","hash":"42048e9d3199718464822f62920d08488dfd06c1","modified":1607246092707},{"_id":"public/archives/2020/index.html","hash":"8dcc41ae85ebfb08acdb334e9e46eef85eea51f4","modified":1607246092707},{"_id":"public/archives/2020/04/index.html","hash":"55d60e39fb7d9992f2e39208d9e69850be396261","modified":1607246092707},{"_id":"public/categories/redis源码/index.html","hash":"f0f5ae76806580b128c3821ebcb8d5df70f85ac2","modified":1607246092707},{"_id":"public/2020/04/30/Redis数据结构-1/index.html","hash":"0a4bf1f0e718659f2ceeef53a75604978ca66d8d","modified":1601916920416},{"_id":"public/tags/redis/index.html","hash":"d81e7279a5b47aa44a92a328033b23d2e45f9ad4","modified":1607246092707},{"_id":"public/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1601037486855},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1601037486855},{"_id":"public/favicon.ico","hash":"af1eb9adcd8e0a46786da960f6a22f3dcab8c819","modified":1601037486855},{"_id":"public/img/avatar.png","hash":"af1eb9adcd8e0a46786da960f6a22f3dcab8c819","modified":1601037486855},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1601037486855},{"_id":"public/css/404.css","hash":"712ecbf4ac203ab5f1ea92989c0f0062a3d0aca9","modified":1601037486855},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1601037486855},{"_id":"public/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1601037486855},{"_id":"public/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1601037486855},{"_id":"public/js/fireworks.js","hash":"17d5770d46d9b531b675b129835561146290af83","modified":1601037486855},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1601037486855},{"_id":"public/js/head.js","hash":"555e9caa046d5a174af8d20c75e9e89c25aabb6c","modified":1601037486855},{"_id":"public/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1601037486855},{"_id":"public/js/scroll.js","hash":"467f883ca2ace0c0fb46ae24919223560a6fb72c","modified":1601037486855},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1601037486855},{"_id":"public/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1601037486855},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1601037486855},{"_id":"public/js/search/local-search.js","hash":"b7e77c27097d9d3ced13618912069d1ddf1cd64a","modified":1601037486855},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1601037486855},{"_id":"public/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1601037486855},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1601037486855},{"_id":"public/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1601037486855},{"_id":"public/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1601037486855},{"_id":"public/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1601037486855},{"_id":"public/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1601037486855},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1601037486855},{"_id":"public/css/index.css","hash":"76df2b0a1b49c203be5f25ad0d54e4361610496a","modified":1601037486855},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1601037486855},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1601037486855},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1601037486855},{"_id":"public/js/third-party/reveal/marked.min.js","hash":"37f3186f93ec854f56bf745a5988a89225e8da6c","modified":1601037486855},{"_id":"public/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1601037486855},{"_id":"public/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1601037486855},{"_id":"source/_posts/cs143-1.md","hash":"364804dc518112769906be0a7ea501d2f006b1b4","modified":1601916639058},{"_id":"public/categories/编译-编译原理/index.html","hash":"8c56ee38d7c633b09ca4014084640ff3c3ae6fd6","modified":1601916233857},{"_id":"public/archives/2020/09/index.html","hash":"e445cce5dddd140528b3d533441af9f62cf69d60","modified":1607246092707},{"_id":"public/tags/CS143/index.html","hash":"cd7ad882cb4c0871afd1232ba7d944a9f644ae15","modified":1607246092707},{"_id":"public/tags/词法分析/index.html","hash":"6c9ea6b4849206b747feb8e4731c32a9bc9860b0","modified":1607246092707},{"_id":"public/tags/Lex/index.html","hash":"75a322886aa9c2c28486cf9f888b013a3bf8c3ad","modified":1607246092707},{"_id":"public/2020/09/28/cs143-1/index.html","hash":"13e185d73a751ce848a97309a261eecea16ce28f","modified":1602038863003},{"_id":"source/_posts/cs143-2.md","hash":"c933a12e1ff57f00853c390923140a66d4293ffd","modified":1601916646549},{"_id":"public/2020/09/28/cs143-2/index.html","hash":"0033eb58c52d65840a367acea9e51a3e9d5f5b84","modified":1601689273080},{"_id":"source/_posts/cs143-3.md","hash":"92e7e71196f4ca1aacdf1953299fe31bfdf3377f","modified":1602086557097},{"_id":"public/archives/2020/10/index.html","hash":"45ea7533be30cca11d9fb97f9ad51c02f4a05705","modified":1607246092707},{"_id":"public/2020/10/03/cs143-2/index.html","hash":"e5a9dfcff1d5c809b99d434b3bac973ddc4a6a64","modified":1602038863003},{"_id":"public/2020/09/28/cs143-3/index.html","hash":"a2c53a38d8873cc4d4ff434326686943707458cd","modified":1601717351471},{"_id":"source/_posts/GDB-summary.md","hash":"aa030adf1ebac5c5813b7822a03405b914993077","modified":1602124705910},{"_id":"source/_posts/csapp-bomblab.md","hash":"74bfdb00a883229e5337e6bbdd3cb196c12db9a4","modified":1602125573295},{"_id":"source/_posts/csapp-datalab.md","hash":"ba9324e9b6317a5bb0dfb2953c92095764271ce4","modified":1601916914113},{"_id":"public/categories/编译/index.html","hash":"94e4a7cd75cc1ad5c0fc6fcdc4e22ee0bc68bcfe","modified":1607246092707},{"_id":"public/categories/编译/调试工具/index.html","hash":"df32f2d4eb2171b08724d63daaf25d3d4903d659","modified":1607246092707},{"_id":"public/tags/Labs/index.html","hash":"95f7579cf3f39b06b31e9a303e3f006048e8ec95","modified":1607246092707},{"_id":"public/2020/10/06/cs143-3/index.html","hash":"d26cebf9c153dd2797067c6d3151de58a2fca4b7","modified":1602575852390},{"_id":"public/2020/10/06/GDB-summary/index.html","hash":"b5ddd86896dbc27f6cd361f265702831dd72b031","modified":1602575852390},{"_id":"public/categories/编译/编译原理/index.html","hash":"00a392097a32f99c6fcbc0eef5ecfb4970bfefee","modified":1607246092707},{"_id":"public/tags/CSAPP/index.html","hash":"6b41a0220b110592ff2078a69e95bff0548a0c88","modified":1607246092707},{"_id":"public/2020/10/05/csapp-datalab/index.html","hash":"532e45bca55f59f31828f3d0c5da84c0fba696bb","modified":1602038863003},{"_id":"public/categories/编译/汇编/index.html","hash":"ee9531ee540429b6f81eb252410b7ba09525119b","modified":1607246092707},{"_id":"public/2020/10/06/csapp-bomblab/index.html","hash":"6ab4a82faa515ec897bf53dc44d1c69979327a5e","modified":1602575852390},{"_id":"source/_posts/csapp-pre-datalab.md","hash":"56023cee5f3b908f7c7e837d95d295f841506fe7","modified":1602038727499},{"_id":"source/_posts/redis-data-structure-1.md","hash":"89fdd6da26503267e90f27cfcc426c5ed9de6563","modified":1601037382742},{"_id":"public/2020/10/06/csapp-pre-datalab/index.html","hash":"017a8f8647096c44fe4857b918fda15e8ead2e6a","modified":1602038863003},{"_id":"public/2020/04/30/redis-data-structure-1/index.html","hash":"5eece748b20cb146ab0aedc03c40b413beab8100","modified":1602038863003},{"_id":"source/_posts/csapp-pre-bomblab.md","hash":"56023cee5f3b908f7c7e837d95d295f841506fe7","modified":1602038727499},{"_id":"public/2020/10/06/csapp-pre-bomblab/index.html","hash":"5a97d6116f5b8d898cf24ec1c18b9cd3d2afe813","modified":1602042258586},{"_id":"source/_posts/leetcode.md","hash":"c1146e204e5c691b989b8ded409cedc340dad170","modified":1602945669810},{"_id":"source/_posts/lc-slide-window.md","hash":"2943a122c4d37ccdf328117cf745f3ef7fd4bda5","modified":1602946034274},{"_id":"source/_posts/6.824/distributed-system-notes-1.md","hash":"6d75a8eecee0d064032be0ce6cb9d61757c5bb80","modified":1607244620811},{"_id":"source/_posts/6.824/mapreduce-lab.md","hash":"a9b248e593f77382c83793efbaed6a2ec9cc6c8b","modified":1607244816185},{"_id":"source/_posts/C++/condition_variable.md","hash":"6027ecb39625e40f1790c5a3cc103af07e68a9b8","modified":1607245306749},{"_id":"source/_posts/C++/eventfd.md","hash":"13ec76ed2d53088e2d922780cddd6266093897c2","modified":1607245364342},{"_id":"source/_posts/C++/timefd.md","hash":"975a8fb6247651afdaf05f55ba2a1c27cc629116","modified":1607245408307},{"_id":"source/_posts/C++/traversal-tuple.md","hash":"cfce7ec769089556757676d25de2fa19d17d5d40","modified":1607245115981},{"_id":"source/_posts/cs143/cs143-3.md","hash":"92e7e71196f4ca1aacdf1953299fe31bfdf3377f","modified":1603112671582},{"_id":"source/_posts/cs143/cs143-1.md","hash":"364804dc518112769906be0a7ea501d2f006b1b4","modified":1601984364309},{"_id":"source/_posts/cs143/cs143-2.md","hash":"c933a12e1ff57f00853c390923140a66d4293ffd","modified":1601984364311},{"_id":"source/_posts/csapp-labs/csapp-datalab.md","hash":"ba9324e9b6317a5bb0dfb2953c92095764271ce4","modified":1601984364314},{"_id":"source/_posts/leetcode/lc-backtracking.md","hash":"e396eb954f18b2750fccb561646ef816c51bd592","modified":1607245862660},{"_id":"source/_posts/leetcode/lc-dfs.md","hash":"755dd61c9aced00517ddf4be9a670c5f3c749c8e","modified":1607245849818},{"_id":"source/_posts/csapp-labs/csapp-bomblab.md","hash":"74bfdb00a883229e5337e6bbdd3cb196c12db9a4","modified":1603112671584},{"_id":"source/_posts/csapp-labs/csapp-pre-bomblab.md","hash":"56023cee5f3b908f7c7e837d95d295f841506fe7","modified":1603112671584},{"_id":"source/_posts/leetcode/lc-double-pointer.md","hash":"a455aee02cc0ed186bea615a979b2d11bb193677","modified":1607245835394},{"_id":"source/_posts/leetcode/lc-dp.md","hash":"dc9b363efa05089be189ccaf531d674b2e99c8d9","modified":1607245822628},{"_id":"source/_posts/leetcode/lc-linklist.md","hash":"e63ad0e1985b4d2de46bca35ebf637167e024d34","modified":1607245811339},{"_id":"source/_posts/leetcode/lc-slide-window.md","hash":"da9262889119e920ac3df415c97d3145652e2856","modified":1607245782040},{"_id":"source/_posts/leetcode/lc-tree.md","hash":"d2b7750f5a69c76f6dab9d6492c12054dc0f9afe","modified":1607245793921},{"_id":"source/_posts/leetcode/leetcode.md","hash":"7408c05185682e5a33a88804665c1999bc041f01","modified":1607245953046},{"_id":"source/_posts/net-programing/Linux-API.md","hash":"8040e8ddee0f04e0e654132cf64e3fc38e5cdedf","modified":1604677757307},{"_id":"source/_posts/redis/redis-data-structure-1.md","hash":"89fdd6da26503267e90f27cfcc426c5ed9de6563","modified":1602037921250},{"_id":"source/_posts/tools/GDB-summary.md","hash":"aa030adf1ebac5c5813b7822a03405b914993077","modified":1603112671581},{"_id":"public/archives/page/2/index.html","hash":"e5743438054bbd16816b23f67855e99ac1548c93","modified":1607246092707},{"_id":"public/archives/2020/page/2/index.html","hash":"6330c38b6fde4e148c06d623564284c543cb5848","modified":1607246092707},{"_id":"public/page/2/index.html","hash":"d3d5f2334b97cef06a98051ef76e0d92ae544525","modified":1607246092707},{"_id":"public/2020/12/06/leetcode/lc-slide-window/index.html","hash":"ed1e214f08fc68ab19509b23795d27463c947f85","modified":1607246092707},{"_id":"public/2020/12/06/leetcode/leetcode/index.html","hash":"acd9cde1fb5b1a40088287146998d93f5dcbe174","modified":1607246092707},{"_id":"public/2020/12/06/leetcode/lc-backtracking/index.html","hash":"4c6b28cb03230e4bf58a8201cdef169e5bead7a6","modified":1607246092707},{"_id":"public/2020/12/06/leetcode/lc-dfs/index.html","hash":"1eb3173fd497cca3e9685004557f78b5147f3838","modified":1607246092707},{"_id":"public/2020/12/06/leetcode/lc-double-pointer/index.html","hash":"ebff000a02c14e0eb418045aad5d4a8ad5a39e75","modified":1607246092707},{"_id":"public/2020/11/07/C++/condition_variable/index.html","hash":"7050538ff1c9f13ceefca476bb5f189647f3188c","modified":1607246092707},{"_id":"public/2020/11/06/C++/eventfd/index.html","hash":"398614a08b22cbe6913dcbc9fc342329c3eee70d","modified":1607246092707},{"_id":"public/2020/10/06/csapp-labs/csapp-pre-bomblab/index.html","hash":"29468393393c879021a593805d07bb79e5597a3d","modified":1607246092707},{"_id":"public/2020/10/05/csapp-labs/csapp-datalab/index.html","hash":"b224c34069fa42c50c2eb89b2e6765cd6969d4ae","modified":1607246092707},{"_id":"public/archives/page/3/index.html","hash":"369b12aaf13b275a88114df02d877a0d3d802fac","modified":1607246092707},{"_id":"public/archives/2020/page/3/index.html","hash":"0ff27bf8bfe19645d8af3b04ce193baafc7a6e6f","modified":1607246092707},{"_id":"public/archives/2020/12/index.html","hash":"e0ecefeac75bbd7804a34e0b592ccd2e169ce960","modified":1607246092707},{"_id":"public/archives/2020/11/index.html","hash":"9c48d85ded6cb2136ccb60dc0ecded51954af3ff","modified":1607246092707},{"_id":"public/archives/2020/12/page/2/index.html","hash":"64afb099fcb1c9c384d3e28b107cc5c75277356c","modified":1607246092707},{"_id":"public/page/3/index.html","hash":"e0a268509b4fc52031c500303a3634d402a9c517","modified":1607246092707},{"_id":"public/categories/分布式/index.html","hash":"faed8c5f9943f8162890d2a41a748f7bbce4cd59","modified":1607246092707},{"_id":"public/categories/C/index.html","hash":"d68ca8f136845d86385faa6dae412f56b0562f13","modified":1607246092707},{"_id":"public/categories/算法/index.html","hash":"dc33bd6b8056a2bf9925ed42ca50698b2d9ed79a","modified":1607246092707},{"_id":"public/2020/12/06/leetcode/lc-dp/index.html","hash":"e606e782253d668d095b6c46f250da145ebc4d5a","modified":1607246092707},{"_id":"public/2020/12/06/leetcode/lc-linklist/index.html","hash":"0fea4e789e877f0dc2c346c3c2891726035a586d","modified":1607246092707},{"_id":"public/2020/12/06/leetcode/lc-tree/index.html","hash":"81eddb1fcc47eb7944c41f4d10f3e882e8a24711","modified":1607246092707},{"_id":"public/2020/12/06/C++/traversal-tuple/index.html","hash":"da8db299c4c52175b769a6401139b48c2d203e29","modified":1607246092707},{"_id":"public/2020/12/06/6.824/mapreduce-lab/index.html","hash":"788d28dc53c2ef799fbdf181d1893e36ff4dcbf5","modified":1607246092707},{"_id":"public/2020/12/06/6.824/distributed-system-notes-1/index.html","hash":"262368fdc0653b8fa83935c4cace3bb9da952e38","modified":1607246092707},{"_id":"public/2020/11/09/C++/timefd/index.html","hash":"4f4b51e1cbda77c9391b3d72fc9fccbd6c669b42","modified":1607246092707},{"_id":"public/2020/11/06/net-programing/Linux-API/index.html","hash":"02f8ac46ab6c7f1ef35ee99dbc1e74eb73d7841c","modified":1607246092707},{"_id":"public/2020/10/06/tools/GDB-summary/index.html","hash":"34bec5896340cc76ce07367f0c1d7967b42d1626","modified":1607246092707},{"_id":"public/2020/10/06/cs143/cs143-3/index.html","hash":"f25335cfaf43eeb1c27bfdff32e78cf3d6affd7d","modified":1607246092707},{"_id":"public/2020/10/06/csapp-labs/csapp-bomblab/index.html","hash":"be16076e356a3de8bf085f1963feb8065c079d79","modified":1607246092707},{"_id":"public/2020/10/03/cs143/cs143-2/index.html","hash":"7cb666d89941c0f36bb9cd042f74121c92072b0e","modified":1607246092707},{"_id":"public/2020/09/28/cs143/cs143-1/index.html","hash":"53a5aa377c5d877039e231a9a903dc95c899d1bd","modified":1607246092707},{"_id":"public/2020/04/30/redis/redis-data-structure-1/index.html","hash":"0e12bdc979709730095b6bcb84c450e7a73e0db3","modified":1607246092707},{"_id":"public/tags/6-824/index.html","hash":"59834781608bcfb33dfb09a87214138fdfcc9ee7","modified":1607246092707},{"_id":"public/tags/tuple/index.html","hash":"6ad134a1b70d260ddca78d875d33c8a2d7a4b1e6","modified":1607246092707},{"_id":"public/tags/STL/index.html","hash":"1ca8aa154304b93768c4c8fcc31aa78d17e92561","modified":1607246092707},{"_id":"public/tags/LeetCode/index.html","hash":"ca6ec90c86ab3b1dc48115f945e77a14162a62ce","modified":1607246092707},{"_id":"public/tags/回溯/index.html","hash":"ed2e717390d279acdda72a55fa04cd655601581c","modified":1607246092707},{"_id":"public/tags/DFS/index.html","hash":"1b892367596b0f101224cd1e6c9268c66db85ffe","modified":1607246092707},{"_id":"public/tags/双指针/index.html","hash":"24fb30ab2a10834b2b3e7dd7dbfdb144f3dd176a","modified":1607246092707},{"_id":"public/tags/动态规划/index.html","hash":"3894061c12566150d4b61847462784a0ede194e1","modified":1607246092707},{"_id":"public/tags/链表/index.html","hash":"bccfffdb95d68578dc2a5ee0b8e68b11b8eafa47","modified":1607246092707},{"_id":"public/tags/滑动窗口/index.html","hash":"b5247c320487e9401a7764b7dafeead2506af37f","modified":1607246092707},{"_id":"public/tags/二叉树/index.html","hash":"37d5d5233f61ca9a590beb0cacf131466b3a3b8b","modified":1607246092707}],"Category":[{"name":"redis源码","_id":"ckfi8ds1z0003bkv70jfb51ue"},{"name":"编译 编译原理","_id":"ckfmadwsa000164v7d4wd0nlk"},{"name":"编译","_id":"ckfwrkg640001jwv7fl4j6nki"},{"name":"调试工具","parent":"ckfwrkg640001jwv7fl4j6nki","_id":"ckfwrkg680004jwv72vfybgcm"},{"name":"编译原理","parent":"ckfwrkg640001jwv7fl4j6nki","_id":"ckfwrv6rl0000i8v7c1l0gw7p"},{"name":"汇编","parent":"ckfwrkg640001jwv7fl4j6nki","_id":"ckfwrz4la0003qwv77lnx21qn"},{"name":"分布式","_id":"ckicwtu8s00022kwjhgd1a7wt"},{"name":"C++","_id":"ckicwtu9v000e2kwjhguo60wj"},{"name":"算法","_id":"ckicwtua6000v2kwjbl39bpoo"}],"Data":[{"_id":"melody","data":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null}}],"Page":[{"title":"404","date":"2019-10-13T07:49:05.000Z","layout":"404","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2019-10-13 15:49:05\nlayout: 404\npermalink: /404\n---","updated":"2020-04-29T15:27:33.470Z","path":"/404.html","_id":"ckfi8ds1p0000bkv7cuf16rov","comments":1,"content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":""},{"title":"分类","date":"2018-01-04T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\n---","updated":"2020-04-29T15:27:37.737Z","path":"categories/index.html","_id":"ckfi8ds1w0002bkv7bm0k8w92","comments":1,"layout":"page","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":""},{"title":"Gallery","date":"2018-01-04T16:00:00.000Z","type":"gallery","_content":"","source":"gallery/index.md","raw":"---\ntitle: Gallery\ndate: 2018-01-05 00:00:00\ntype: \"gallery\"\n---","updated":"2020-04-29T15:27:29.905Z","path":"gallery/index.html","_id":"ckfi8ds200005bkv7arw6c0wz","comments":1,"layout":"page","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":""},{"title":"Slides","date":"2018-01-04T16:00:00.000Z","type":"slides","_content":"","source":"slides/index.md","raw":"---\ntitle: Slides\ndate: 2018-01-05 00:00:00\ntype: \"slides\"\n---","updated":"2020-04-29T15:27:35.669Z","path":"slides/index.html","_id":"ckfi8dt2d0008bkv72kwl7erl","comments":1,"layout":"page","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":""},{"title":"标签","date":"2018-01-04T16:00:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\n---","updated":"2020-04-29T15:17:47.698Z","path":"tags/index.html","_id":"ckfi8dt2e0009bkv7epu0e80w","comments":1,"layout":"page","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":""}],"Post":[{"title":"[6.824] MapReduce Lab","date":"2020-12-06T08:53:00.000Z","_content":"\n## MapRudece Lab\n\n### Master 节点\n\nMapReduce是一个分布式计算模型，这是MapReduce的go语言版本的一个简单实现。\n\n- mrmaster.go\n\n```go\nfunc main() {\n\tif len(os.Args) < 2 {\n\t\tfmt.Fprintf(os.Stderr, \"Usage: mrmaster inputfiles...\\n\")\n\t\tos.Exit(1)\n\t}\n\n\tm := mr.MakeMaster(os.Args[1:], 10) //创建一个master\n\tfor m.Done() == false { //主线程等待结束\n\t\ttime.Sleep(time.Second)\n\t}\n\n\ttime.Sleep(time.Second)\n}\n```\n\n- master.go\n\n```go\n//\n// create a Master.\n//\nfunc MakeMaster(files []string, nReduce int) *Master {\n\tm := &Master{}\n\tm.mu = sync.Mutex{}\n\tm.nReduce = nReduce //输入的参数nReduce（输入的文件会被划分成几个task来处理）\n\tm.files = files //文件名数组\n\tif nReduce > len(files) { //确定分发task的channel的缓冲区大小\n\t\tm.taskCh = make(chan Task, nReduce)\n\t} else {\n\t\tm.taskCh = make(chan Task, len(m.files)) //文件数量多于分成的task数量\n\t}\n\n\tm.initMapTask()\n\tgo m.tickSchedule()\n\tm.server()\n\tDPrintf(\"Master init\")\n\treturn m\n}\n```\n\nMaster结构的定义：\n\n```go\ntype Master struct {\n\tfiles      []string   //需要处理的files\n\tnReduce    int        //输入的参数nReduce（输入的文件会被划分成几个task来处理）\n\ttaskPhase  TaskPhase  //taskPhase（map阶段还是reduce阶段）\n\ttaskStats  []TaskStat //taskStats（各个task的状态）\n\ttaskNum    int        //task数量\n\tmu         sync.Mutex //mu（全局锁）\n\tdone       bool       //done（任务是否已完成）\n\tworkerSeq  int        //workerSeq（有几个worker）\n\ttaskCh     chan Task  //taskCh（用来分发task的channel）\n\tfinishTask int32      //statCh（用来接受完成task数量）\n}\n```\n\nMaster包含的本地method有：initMapTask()  taskSchedule()  getTask()  tickSchedule()  initReduceTask()\n\n```go\nfunc (m *Master) initMapTask() {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\n\tDPrintf(\"Init Map Task\")\n\tm.taskPhase = MapPhase //设置阶段\n\tm.taskStats = make([]TaskStat, len(m.files)) //创建task状态数组\n\tm.taskNum = len(m.files) //task数量\n\tm.finishTask = 0\n\tfor index := range m.taskStats {\n\t\tgo m.taskSchedule(index) //对每一个task，创建一个状态机循环\n\t}\n}\n```\n\n单个task的调度，用一个Loop来实现一个状态机。\n\n1. 如果处在TaskStatusReady状态，则getTask()并放进channel\n2. 如果处在TaskStatusQueue，什么都不做\n3. 如果处在TaskStatusRunning，如果任务超时，则重新getTask()并放进channel\n4. 如果处在TaskStatusFinish，则finishTask自加1\n5. 如果处在TaskStatusErr，则getTask()并放进channel\n\n```go\nfunc (m *Master) taskSchedule(taskSeq int) {\n\tfor {\n\t\tif m.Done() { //如果Done则结束\n\t\t\treturn\n\t\t}\n\t\tm.mu.Lock()\n\t\tDPrintf(\"Schedule begin, task:%v, Status: %v\", taskSeq, m.taskStats[taskSeq].Status)\n\t\tswitch m.taskStats[taskSeq].Status { //根据处在的不同状态，完成不同的操作\n\t\tcase TaskStatusReady:\n\t\t\tm.taskCh <- m.getTask(taskSeq)\n\t\t\tm.taskStats[taskSeq].Status = TaskStatusQueue\n\t\tcase TaskStatusQueue:\n\t\tcase TaskStatusRunning:\n\t\t\tif time.Since(m.taskStats[taskSeq].StartTime) > MaxTaskRunTime {\n\t\t\t\tm.taskStats[taskSeq].Status = TaskStatusQueue\n\t\t\t\tm.taskCh <- m.getTask(taskSeq)\n\t\t\t}\n\t\tcase TaskStatusFinish:\n\t\t\tm.finishTask += 1\n\t\t\tm.mu.Unlock()\n\t\t\treturn //单个task完成了就结束\n\t\tcase TaskStatusErr:\n\t\t\tm.taskStats[taskSeq].Status = TaskStatusQueue\n\t\t\tm.taskCh <- m.getTask(taskSeq)\n\t\tdefault:\n\t\t\tm.mu.Unlock()\n\t\t\tpanic(\"Task status err\")\n\t\t}\n\t\tDPrintf(\"Schedule end, task:%v, Status: %v\", taskSeq, m.taskStats[taskSeq].Status)\n\t\tm.mu.Unlock()\n\t\ttime.Sleep(ScheduleInterval) //睡眠一个间隙\n\t}\n}\n```\n\n接下来是getTask()的实现\n\n```go\nfunc (m *Master) getTask(taskSeq int) Task {\n\ttask := Task{\n\t\tFileName: \"\",\n\t\tNReduce:  m.nReduce,\n\t\tNMaps:    len(m.files),\n\t\tSeq:      taskSeq, //序号\n\t\tPhase:    m.taskPhase,\n\t\tAlive:    true,\n\t}\n\tDPrintf(\"Get task, taskseq:%d, len files:%d, len tasks:%d\", m, taskSeq, len(m.files), len(m.taskStats))\n\tif task.Phase == MapPhase {\n\t\ttask.FileName = m.files[taskSeq]\n\t}\n\treturn task\n}\n```\n\ntask的结构体\n\n```go\ntype Task struct {\n\tFileName string\n\tNReduce  int\n\tNMaps    int\n\tSeq      int\n\tPhase    TaskPhase\n\tAlive    bool // worker should exit when alive is false\n}\n```\n\n当map阶段完成，则开始进入reduce阶段。该函数由独立线程执行，以检测当前map状态\n\n```go\nfunc (m *Master) tickSchedule() {\n\tfor !m.Done() {\n\t\tm.mu.Lock()\n\t\tDPrintf(\"Global schedule, finTask:%v, taskNum:%v\\n\", m.finishTask, m.taskNum)\n\t\tif m.finishTask == int32(m.taskNum) {\n\t\t\tif m.taskPhase == MapPhase {\n\t\t\t\tm.mu.Unlock()\n\t\t\t\tm.initReduceTask()\n\t\t\t\ttime.Sleep(ScheduleInterval)\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tm.done = true\n\t\t\t}\n\t\t}\n\t\tm.mu.Unlock()\n\t\ttime.Sleep(ScheduleInterval)\n\t}\n}\n```\n\ninitReduceTask()的实现：\n\n```go\nfunc (m *Master) initReduceTask() {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\n\tDPrintf(\"Init Reduce Task\")\n\tm.taskPhase = ReducePhase\n\tm.taskStats = make([]TaskStat, m.nReduce)\n\tm.taskNum = m.nReduce\n\tm.finishTask = 0\n\tfor index := range m.taskStats {\n\t\tgo m.taskSchedule(index) //和map阶段类似，对每一个task，创建一个状态机循环\n\t}\n}\n```\n\n接下来是server()函数，用来监听Worker的RPC调用\n\n```go\nfunc (m *Master) server() {\n\trpc.Register(m) //注册RPC\n\trpc.HandleHTTP()\n\tsockname := masterSock()\n\tos.Remove(sockname)\n\tl, e := net.Listen(\"unix\", sockname)\n\tif e != nil {\n\t\tlog.Fatal(\"listen error:\", e)\n\t}\n\tgo http.Serve(l, nil) //开始监听\n}\n```\n\nMaster其余method均为给Worker调用，在本地RPC框架中注册，包括regTask()  GetOneTask()  ReportTask()  RegWorker()\n\n```go\n//结构体\ntype TaskArgs struct {\n\tWorkerId int\n}\n\ntype TaskReply struct {\n\tTask *Task\n}\n```\n\n注册task，其实就是在Master端记录当前task的状态\n\n```go\nfunc (m *Master) regTask(args *TaskArgs, task *Task) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\n\tif task.Phase != m.taskPhase {\n\t\tpanic(\"Task phase doesn't match\")\n\t}\n\n\tm.taskStats[task.Seq].Status = TaskStatusRunning\n\tm.taskStats[task.Seq].WorkerId = args.WorkerId\n\tm.taskStats[task.Seq].StartTime = time.Now()\n}\n```\n\n从channel中获得一个task，并返回给worker\n\n```go\nfunc (m *Master) GetOneTask(args *TaskArgs, reply *TaskReply) error {\n\ttask := <-m.taskCh\n\treply.Task = &task\n\n\tif task.Alive {\n\t\tm.regTask(args, &task)\n\t}\n\tDPrintf(\"Get one Task, args:%+v, reply:%+v\", args, reply)\n\treturn nil\n}\n```\n\n报告task的函数，如果完成了，就将task在状态数组中的状态改为Finish，否则改为Error\n\n```go\ntype ReportTaskArgs struct {\n\tDone     bool\n\tSeq      int\n\tPhase    TaskPhase\n\tWorkerId int\n}\n\ntype ReportTaskReply struct {\n}\n```\n\n```go\nfunc (m *Master) ReportTask(args *ReportTaskArgs, reply *ReportTaskReply) error {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\n\tDPrintf(\"Get report task: %+v, taskPhase: %+v\", args, m.taskPhase)\n\n\tif m.taskPhase != args.Phase || args.WorkerId != m.taskStats[args.Seq].WorkerId {\n\t\treturn nil\n\t}\n\n\tif args.Done {\n\t\tm.taskStats[args.Seq].Status = TaskStatusFinish\n\t} else {\n\t\tm.taskStats[args.Seq].Status = TaskStatusErr\n\t}\n\n\treturn nil\n}\n```\n\n注册Worker的函数，Master给各个Worker分配一个序号\n\n```go\ntype RegisterArgs struct {\n}\n\ntype RegisterReply struct {\n\tWorkerId int\n}\n```\n\n```go\nfunc (m *Master) RegWorker(args *RegisterArgs, reply *RegisterReply) error {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\n\tm.workerSeq++\n\treply.WorkerId = m.workerSeq\n\treturn nil\n}\n```\n\n### Worker 节点\n\n- mrworker.go\n\nmapf和reducef分别为从外部库导入到自定义map函数和reduce函数\n\n```go\nfunc main() {\n\tif len(os.Args) != 2 {\n\t\tfmt.Fprintf(os.Stderr, \"Usage: mrworker xxx.so\\n\")\n\t\tos.Exit(1)\n    }\n\tmapf, reducef := loadPlugin(os.Args[1])\n\tmr.Worker(mapf, reducef)\n}\n//加载自定义的map函数和reduce函数\nfunc loadPlugin(filename string) (func(string, string) []mr.KeyValue, func(string, []string) string) {\n\tp, err := plugin.Open(filename)\n\tif err != nil {\n\t\tlog.Fatalf(\"cannot load plugin %v\", filename)\n\t}\n\txmapf, err := p.Lookup(\"Map\")\n\tif err != nil {\n\t\tlog.Fatalf(\"cannot find Map in %v\", filename)\n\t}\n\tmapf := xmapf.(func(string, string) []mr.KeyValue)\n\txreducef, err := p.Lookup(\"Reduce\")\n\tif err != nil {\n\t\tlog.Fatalf(\"cannot find Reduce in %v\", filename)\n\t}\n\treducef := xreducef.(func(string, []string) string)\n\n\treturn mapf, reducef\n}\n```\n\nworker函数，函数参数为map和reduce函数指针\n\n```\nfunc Worker(mapf func(string, string) []KeyValue,\n\treducef func(string, []string) string) {\n\n\tw := worker{}\n\tw.mapf = mapf\n\tw.reducef = reducef\n\tw.register()\n\tw.run()\n}\n```\n\nworker结构体\n\n```go\ntype worker struct {\n\tid      int\n\tmapf    func(string, string) []KeyValue\n\treducef func(string, []string) string\n}\n```\n\n将mapf和reducef函数指针进行赋值后，向Master注册自己，其实就是获得一个Master分配的递增id\n\n```go\nfunc (w *worker) register() {\n\targs := &RegisterArgs{}\n\treply := &RegisterReply{}\n\tif ok := call(\"Master.RegWorker\", args, reply); !ok {\n\t\tlog.Fatal(\"reg fail\")\n\t}\n\tw.id = reply.WorkerId\n}\n```\n\n然后执行run函数\n\n```go\nfunc (w *worker) run() {\n\t// if reqTask conn fail, worker exit\n\tfor {\n\t\tt := w.reqTask()\n\t\tif !t.Alive {\n\t\t\tDPrintf(\"worker %v get task not alive, exit\", w.id)\n\t\t\treturn\n\t\t}\n\t\tDPrintf(\"worker %v get task alive\", w.id)\n\t\tw.doTask(t)\n\t}\n}\n```\n\n在run函数中，循环请求（reqTask）和处理（doTask）任务\n\n```go\nfunc (w *worker) reqTask() Task {\n\targs := TaskArgs{}\n\targs.WorkerId = w.id\n\treply := TaskReply{}\n\n\tif ok := call(\"Master.GetOneTask\", &args, &reply); !ok {\n\t\tDPrintf(\"worker get task fail,exit\")\n\t\tos.Exit(1)\n\t}\n\tDPrintf(\"worker get task:%+v\", reply.Task)\n\treturn *reply.Task //请求一个任务并返回\n}\n```\n\n根据不用阶段，分别doMapTask和doReduceTask，其中分别调用了mapf和reducef，完成或者出错，则调用reportTask向Master进行报告\n\n```go\nfunc (w *worker) doTask(t Task) {\n\tDPrintf(\"Worker do Task\")\n\n\tswitch t.Phase {\n\tcase MapPhase:\n\t\tw.doMapTask(t)\n\tcase ReducePhase:\n\t\tw.doReduceTask(t)\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"task phase err: %v\", t.Phase))\n\t}\n}\n```\n\n最后是RPC调用过程中call函数的实现，对系统提供的RPC接口进行了封装\n\n```go\n//\n// send an RPC request to the master, wait for the response.\n// usually returns true.\n// returns false if something goes wrong.\n//\nfunc call(rpcname string, args interface{}, reply interface{}) bool {\n\t// c, err := rpc.DialHTTP(\"tcp\", \"127.0.0.1\"+\":1234\")\n\tsockname := masterSock()\n\tc, err := rpc.DialHTTP(\"unix\", sockname)\n\tif err != nil {\n\t\tDPrintf(\"dialing:\", err)\n\t\treturn false\n\t}\n\tdefer c.Close()\n\n\terr = c.Call(rpcname, args, reply)\n\tif err == nil {\n\t\treturn true\n\t}\n\n\tDPrintf(\"%+v\", err)\n\treturn false\n}\n```\n\n","source":"_posts/6.824/mapreduce-lab.md","raw":"---\ntitle: '[6.824] MapReduce Lab'\ndate: 2020-12-6 16:53\ntags:\n- 6.824\n- Labs\ncategories:\n- 分布式\n---\n\n## MapRudece Lab\n\n### Master 节点\n\nMapReduce是一个分布式计算模型，这是MapReduce的go语言版本的一个简单实现。\n\n- mrmaster.go\n\n```go\nfunc main() {\n\tif len(os.Args) < 2 {\n\t\tfmt.Fprintf(os.Stderr, \"Usage: mrmaster inputfiles...\\n\")\n\t\tos.Exit(1)\n\t}\n\n\tm := mr.MakeMaster(os.Args[1:], 10) //创建一个master\n\tfor m.Done() == false { //主线程等待结束\n\t\ttime.Sleep(time.Second)\n\t}\n\n\ttime.Sleep(time.Second)\n}\n```\n\n- master.go\n\n```go\n//\n// create a Master.\n//\nfunc MakeMaster(files []string, nReduce int) *Master {\n\tm := &Master{}\n\tm.mu = sync.Mutex{}\n\tm.nReduce = nReduce //输入的参数nReduce（输入的文件会被划分成几个task来处理）\n\tm.files = files //文件名数组\n\tif nReduce > len(files) { //确定分发task的channel的缓冲区大小\n\t\tm.taskCh = make(chan Task, nReduce)\n\t} else {\n\t\tm.taskCh = make(chan Task, len(m.files)) //文件数量多于分成的task数量\n\t}\n\n\tm.initMapTask()\n\tgo m.tickSchedule()\n\tm.server()\n\tDPrintf(\"Master init\")\n\treturn m\n}\n```\n\nMaster结构的定义：\n\n```go\ntype Master struct {\n\tfiles      []string   //需要处理的files\n\tnReduce    int        //输入的参数nReduce（输入的文件会被划分成几个task来处理）\n\ttaskPhase  TaskPhase  //taskPhase（map阶段还是reduce阶段）\n\ttaskStats  []TaskStat //taskStats（各个task的状态）\n\ttaskNum    int        //task数量\n\tmu         sync.Mutex //mu（全局锁）\n\tdone       bool       //done（任务是否已完成）\n\tworkerSeq  int        //workerSeq（有几个worker）\n\ttaskCh     chan Task  //taskCh（用来分发task的channel）\n\tfinishTask int32      //statCh（用来接受完成task数量）\n}\n```\n\nMaster包含的本地method有：initMapTask()  taskSchedule()  getTask()  tickSchedule()  initReduceTask()\n\n```go\nfunc (m *Master) initMapTask() {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\n\tDPrintf(\"Init Map Task\")\n\tm.taskPhase = MapPhase //设置阶段\n\tm.taskStats = make([]TaskStat, len(m.files)) //创建task状态数组\n\tm.taskNum = len(m.files) //task数量\n\tm.finishTask = 0\n\tfor index := range m.taskStats {\n\t\tgo m.taskSchedule(index) //对每一个task，创建一个状态机循环\n\t}\n}\n```\n\n单个task的调度，用一个Loop来实现一个状态机。\n\n1. 如果处在TaskStatusReady状态，则getTask()并放进channel\n2. 如果处在TaskStatusQueue，什么都不做\n3. 如果处在TaskStatusRunning，如果任务超时，则重新getTask()并放进channel\n4. 如果处在TaskStatusFinish，则finishTask自加1\n5. 如果处在TaskStatusErr，则getTask()并放进channel\n\n```go\nfunc (m *Master) taskSchedule(taskSeq int) {\n\tfor {\n\t\tif m.Done() { //如果Done则结束\n\t\t\treturn\n\t\t}\n\t\tm.mu.Lock()\n\t\tDPrintf(\"Schedule begin, task:%v, Status: %v\", taskSeq, m.taskStats[taskSeq].Status)\n\t\tswitch m.taskStats[taskSeq].Status { //根据处在的不同状态，完成不同的操作\n\t\tcase TaskStatusReady:\n\t\t\tm.taskCh <- m.getTask(taskSeq)\n\t\t\tm.taskStats[taskSeq].Status = TaskStatusQueue\n\t\tcase TaskStatusQueue:\n\t\tcase TaskStatusRunning:\n\t\t\tif time.Since(m.taskStats[taskSeq].StartTime) > MaxTaskRunTime {\n\t\t\t\tm.taskStats[taskSeq].Status = TaskStatusQueue\n\t\t\t\tm.taskCh <- m.getTask(taskSeq)\n\t\t\t}\n\t\tcase TaskStatusFinish:\n\t\t\tm.finishTask += 1\n\t\t\tm.mu.Unlock()\n\t\t\treturn //单个task完成了就结束\n\t\tcase TaskStatusErr:\n\t\t\tm.taskStats[taskSeq].Status = TaskStatusQueue\n\t\t\tm.taskCh <- m.getTask(taskSeq)\n\t\tdefault:\n\t\t\tm.mu.Unlock()\n\t\t\tpanic(\"Task status err\")\n\t\t}\n\t\tDPrintf(\"Schedule end, task:%v, Status: %v\", taskSeq, m.taskStats[taskSeq].Status)\n\t\tm.mu.Unlock()\n\t\ttime.Sleep(ScheduleInterval) //睡眠一个间隙\n\t}\n}\n```\n\n接下来是getTask()的实现\n\n```go\nfunc (m *Master) getTask(taskSeq int) Task {\n\ttask := Task{\n\t\tFileName: \"\",\n\t\tNReduce:  m.nReduce,\n\t\tNMaps:    len(m.files),\n\t\tSeq:      taskSeq, //序号\n\t\tPhase:    m.taskPhase,\n\t\tAlive:    true,\n\t}\n\tDPrintf(\"Get task, taskseq:%d, len files:%d, len tasks:%d\", m, taskSeq, len(m.files), len(m.taskStats))\n\tif task.Phase == MapPhase {\n\t\ttask.FileName = m.files[taskSeq]\n\t}\n\treturn task\n}\n```\n\ntask的结构体\n\n```go\ntype Task struct {\n\tFileName string\n\tNReduce  int\n\tNMaps    int\n\tSeq      int\n\tPhase    TaskPhase\n\tAlive    bool // worker should exit when alive is false\n}\n```\n\n当map阶段完成，则开始进入reduce阶段。该函数由独立线程执行，以检测当前map状态\n\n```go\nfunc (m *Master) tickSchedule() {\n\tfor !m.Done() {\n\t\tm.mu.Lock()\n\t\tDPrintf(\"Global schedule, finTask:%v, taskNum:%v\\n\", m.finishTask, m.taskNum)\n\t\tif m.finishTask == int32(m.taskNum) {\n\t\t\tif m.taskPhase == MapPhase {\n\t\t\t\tm.mu.Unlock()\n\t\t\t\tm.initReduceTask()\n\t\t\t\ttime.Sleep(ScheduleInterval)\n\t\t\t\tcontinue\n\t\t\t} else {\n\t\t\t\tm.done = true\n\t\t\t}\n\t\t}\n\t\tm.mu.Unlock()\n\t\ttime.Sleep(ScheduleInterval)\n\t}\n}\n```\n\ninitReduceTask()的实现：\n\n```go\nfunc (m *Master) initReduceTask() {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\n\tDPrintf(\"Init Reduce Task\")\n\tm.taskPhase = ReducePhase\n\tm.taskStats = make([]TaskStat, m.nReduce)\n\tm.taskNum = m.nReduce\n\tm.finishTask = 0\n\tfor index := range m.taskStats {\n\t\tgo m.taskSchedule(index) //和map阶段类似，对每一个task，创建一个状态机循环\n\t}\n}\n```\n\n接下来是server()函数，用来监听Worker的RPC调用\n\n```go\nfunc (m *Master) server() {\n\trpc.Register(m) //注册RPC\n\trpc.HandleHTTP()\n\tsockname := masterSock()\n\tos.Remove(sockname)\n\tl, e := net.Listen(\"unix\", sockname)\n\tif e != nil {\n\t\tlog.Fatal(\"listen error:\", e)\n\t}\n\tgo http.Serve(l, nil) //开始监听\n}\n```\n\nMaster其余method均为给Worker调用，在本地RPC框架中注册，包括regTask()  GetOneTask()  ReportTask()  RegWorker()\n\n```go\n//结构体\ntype TaskArgs struct {\n\tWorkerId int\n}\n\ntype TaskReply struct {\n\tTask *Task\n}\n```\n\n注册task，其实就是在Master端记录当前task的状态\n\n```go\nfunc (m *Master) regTask(args *TaskArgs, task *Task) {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\n\tif task.Phase != m.taskPhase {\n\t\tpanic(\"Task phase doesn't match\")\n\t}\n\n\tm.taskStats[task.Seq].Status = TaskStatusRunning\n\tm.taskStats[task.Seq].WorkerId = args.WorkerId\n\tm.taskStats[task.Seq].StartTime = time.Now()\n}\n```\n\n从channel中获得一个task，并返回给worker\n\n```go\nfunc (m *Master) GetOneTask(args *TaskArgs, reply *TaskReply) error {\n\ttask := <-m.taskCh\n\treply.Task = &task\n\n\tif task.Alive {\n\t\tm.regTask(args, &task)\n\t}\n\tDPrintf(\"Get one Task, args:%+v, reply:%+v\", args, reply)\n\treturn nil\n}\n```\n\n报告task的函数，如果完成了，就将task在状态数组中的状态改为Finish，否则改为Error\n\n```go\ntype ReportTaskArgs struct {\n\tDone     bool\n\tSeq      int\n\tPhase    TaskPhase\n\tWorkerId int\n}\n\ntype ReportTaskReply struct {\n}\n```\n\n```go\nfunc (m *Master) ReportTask(args *ReportTaskArgs, reply *ReportTaskReply) error {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\n\tDPrintf(\"Get report task: %+v, taskPhase: %+v\", args, m.taskPhase)\n\n\tif m.taskPhase != args.Phase || args.WorkerId != m.taskStats[args.Seq].WorkerId {\n\t\treturn nil\n\t}\n\n\tif args.Done {\n\t\tm.taskStats[args.Seq].Status = TaskStatusFinish\n\t} else {\n\t\tm.taskStats[args.Seq].Status = TaskStatusErr\n\t}\n\n\treturn nil\n}\n```\n\n注册Worker的函数，Master给各个Worker分配一个序号\n\n```go\ntype RegisterArgs struct {\n}\n\ntype RegisterReply struct {\n\tWorkerId int\n}\n```\n\n```go\nfunc (m *Master) RegWorker(args *RegisterArgs, reply *RegisterReply) error {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\n\tm.workerSeq++\n\treply.WorkerId = m.workerSeq\n\treturn nil\n}\n```\n\n### Worker 节点\n\n- mrworker.go\n\nmapf和reducef分别为从外部库导入到自定义map函数和reduce函数\n\n```go\nfunc main() {\n\tif len(os.Args) != 2 {\n\t\tfmt.Fprintf(os.Stderr, \"Usage: mrworker xxx.so\\n\")\n\t\tos.Exit(1)\n    }\n\tmapf, reducef := loadPlugin(os.Args[1])\n\tmr.Worker(mapf, reducef)\n}\n//加载自定义的map函数和reduce函数\nfunc loadPlugin(filename string) (func(string, string) []mr.KeyValue, func(string, []string) string) {\n\tp, err := plugin.Open(filename)\n\tif err != nil {\n\t\tlog.Fatalf(\"cannot load plugin %v\", filename)\n\t}\n\txmapf, err := p.Lookup(\"Map\")\n\tif err != nil {\n\t\tlog.Fatalf(\"cannot find Map in %v\", filename)\n\t}\n\tmapf := xmapf.(func(string, string) []mr.KeyValue)\n\txreducef, err := p.Lookup(\"Reduce\")\n\tif err != nil {\n\t\tlog.Fatalf(\"cannot find Reduce in %v\", filename)\n\t}\n\treducef := xreducef.(func(string, []string) string)\n\n\treturn mapf, reducef\n}\n```\n\nworker函数，函数参数为map和reduce函数指针\n\n```\nfunc Worker(mapf func(string, string) []KeyValue,\n\treducef func(string, []string) string) {\n\n\tw := worker{}\n\tw.mapf = mapf\n\tw.reducef = reducef\n\tw.register()\n\tw.run()\n}\n```\n\nworker结构体\n\n```go\ntype worker struct {\n\tid      int\n\tmapf    func(string, string) []KeyValue\n\treducef func(string, []string) string\n}\n```\n\n将mapf和reducef函数指针进行赋值后，向Master注册自己，其实就是获得一个Master分配的递增id\n\n```go\nfunc (w *worker) register() {\n\targs := &RegisterArgs{}\n\treply := &RegisterReply{}\n\tif ok := call(\"Master.RegWorker\", args, reply); !ok {\n\t\tlog.Fatal(\"reg fail\")\n\t}\n\tw.id = reply.WorkerId\n}\n```\n\n然后执行run函数\n\n```go\nfunc (w *worker) run() {\n\t// if reqTask conn fail, worker exit\n\tfor {\n\t\tt := w.reqTask()\n\t\tif !t.Alive {\n\t\t\tDPrintf(\"worker %v get task not alive, exit\", w.id)\n\t\t\treturn\n\t\t}\n\t\tDPrintf(\"worker %v get task alive\", w.id)\n\t\tw.doTask(t)\n\t}\n}\n```\n\n在run函数中，循环请求（reqTask）和处理（doTask）任务\n\n```go\nfunc (w *worker) reqTask() Task {\n\targs := TaskArgs{}\n\targs.WorkerId = w.id\n\treply := TaskReply{}\n\n\tif ok := call(\"Master.GetOneTask\", &args, &reply); !ok {\n\t\tDPrintf(\"worker get task fail,exit\")\n\t\tos.Exit(1)\n\t}\n\tDPrintf(\"worker get task:%+v\", reply.Task)\n\treturn *reply.Task //请求一个任务并返回\n}\n```\n\n根据不用阶段，分别doMapTask和doReduceTask，其中分别调用了mapf和reducef，完成或者出错，则调用reportTask向Master进行报告\n\n```go\nfunc (w *worker) doTask(t Task) {\n\tDPrintf(\"Worker do Task\")\n\n\tswitch t.Phase {\n\tcase MapPhase:\n\t\tw.doMapTask(t)\n\tcase ReducePhase:\n\t\tw.doReduceTask(t)\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"task phase err: %v\", t.Phase))\n\t}\n}\n```\n\n最后是RPC调用过程中call函数的实现，对系统提供的RPC接口进行了封装\n\n```go\n//\n// send an RPC request to the master, wait for the response.\n// usually returns true.\n// returns false if something goes wrong.\n//\nfunc call(rpcname string, args interface{}, reply interface{}) bool {\n\t// c, err := rpc.DialHTTP(\"tcp\", \"127.0.0.1\"+\":1234\")\n\tsockname := masterSock()\n\tc, err := rpc.DialHTTP(\"unix\", sockname)\n\tif err != nil {\n\t\tDPrintf(\"dialing:\", err)\n\t\treturn false\n\t}\n\tdefer c.Close()\n\n\terr = c.Call(rpcname, args, reply)\n\tif err == nil {\n\t\treturn true\n\t}\n\n\tDPrintf(\"%+v\", err)\n\treturn false\n}\n```\n\n","slug":"6.824/mapreduce-lab","published":1,"updated":"2020-12-06T08:53:36.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtu8h00002kwj43thf01b","content":"<h2 id=\"maprudece-lab\"><a class=\"markdownIt-Anchor\" href=\"#maprudece-lab\"></a> MapRudece Lab</h2>\n<h3 id=\"master-节点\"><a class=\"markdownIt-Anchor\" href=\"#master-节点\"></a> Master 节点</h3>\n<p>MapReduce是一个分布式计算模型，这是MapReduce的go语言版本的一个简单实现。</p>\n<ul>\n<li>mrmaster.go</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) &lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\tfmt.Fprintf(os.Stderr, <span class=\"string\">\"Usage: mrmaster inputfiles...\\n\"</span>)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tm := mr.MakeMaster(os.Args[<span class=\"number\">1</span>:], <span class=\"number\">10</span>) <span class=\"comment\">//创建一个master</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> m.Done() == <span class=\"literal\">false</span> &#123; <span class=\"comment\">//主线程等待结束</span></span><br><span class=\"line\">\t\ttime.Sleep(time.Second)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(time.Second)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>master.go</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// create a Master.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MakeMaster</span><span class=\"params\">(files []<span class=\"keyword\">string</span>, nReduce <span class=\"keyword\">int</span>)</span> *<span class=\"title\">Master</span></span> &#123;</span><br><span class=\"line\">\tm := &amp;Master&#123;&#125;</span><br><span class=\"line\">\tm.mu = sync.Mutex&#123;&#125;</span><br><span class=\"line\">\tm.nReduce = nReduce <span class=\"comment\">//输入的参数nReduce（输入的文件会被划分成几个task来处理）</span></span><br><span class=\"line\">\tm.files = files <span class=\"comment\">//文件名数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> nReduce &gt; <span class=\"built_in\">len</span>(files) &#123; <span class=\"comment\">//确定分发task的channel的缓冲区大小</span></span><br><span class=\"line\">\t\tm.taskCh = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> Task, nReduce)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tm.taskCh = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> Task, <span class=\"built_in\">len</span>(m.files)) <span class=\"comment\">//文件数量多于分成的task数量</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tm.initMapTask()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> m.tickSchedule()</span><br><span class=\"line\">\tm.server()</span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"Master init\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Master结构的定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Master <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tfiles      []<span class=\"keyword\">string</span>   <span class=\"comment\">//需要处理的files</span></span><br><span class=\"line\">\tnReduce    <span class=\"keyword\">int</span>        <span class=\"comment\">//输入的参数nReduce（输入的文件会被划分成几个task来处理）</span></span><br><span class=\"line\">\ttaskPhase  TaskPhase  <span class=\"comment\">//taskPhase（map阶段还是reduce阶段）</span></span><br><span class=\"line\">\ttaskStats  []TaskStat <span class=\"comment\">//taskStats（各个task的状态）</span></span><br><span class=\"line\">\ttaskNum    <span class=\"keyword\">int</span>        <span class=\"comment\">//task数量</span></span><br><span class=\"line\">\tmu         sync.Mutex <span class=\"comment\">//mu（全局锁）</span></span><br><span class=\"line\">\tdone       <span class=\"keyword\">bool</span>       <span class=\"comment\">//done（任务是否已完成）</span></span><br><span class=\"line\">\tworkerSeq  <span class=\"keyword\">int</span>        <span class=\"comment\">//workerSeq（有几个worker）</span></span><br><span class=\"line\">\ttaskCh     <span class=\"keyword\">chan</span> Task  <span class=\"comment\">//taskCh（用来分发task的channel）</span></span><br><span class=\"line\">\tfinishTask <span class=\"keyword\">int32</span>      <span class=\"comment\">//statCh（用来接受完成task数量）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Master包含的本地method有：initMapTask()  taskSchedule()  getTask()  tickSchedule()  initReduceTask()</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">initMapTask</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm.mu.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> m.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"Init Map Task\"</span>)</span><br><span class=\"line\">\tm.taskPhase = MapPhase <span class=\"comment\">//设置阶段</span></span><br><span class=\"line\">\tm.taskStats = <span class=\"built_in\">make</span>([]TaskStat, <span class=\"built_in\">len</span>(m.files)) <span class=\"comment\">//创建task状态数组</span></span><br><span class=\"line\">\tm.taskNum = <span class=\"built_in\">len</span>(m.files) <span class=\"comment\">//task数量</span></span><br><span class=\"line\">\tm.finishTask = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index := <span class=\"keyword\">range</span> m.taskStats &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> m.taskSchedule(index) <span class=\"comment\">//对每一个task，创建一个状态机循环</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>单个task的调度，用一个Loop来实现一个状态机。</p>\n<ol>\n<li>如果处在TaskStatusReady状态，则getTask()并放进channel</li>\n<li>如果处在TaskStatusQueue，什么都不做</li>\n<li>如果处在TaskStatusRunning，如果任务超时，则重新getTask()并放进channel</li>\n<li>如果处在TaskStatusFinish，则finishTask自加1</li>\n<li>如果处在TaskStatusErr，则getTask()并放进channel</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">taskSchedule</span><span class=\"params\">(taskSeq <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> m.Done() &#123; <span class=\"comment\">//如果Done则结束</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tm.mu.Lock()</span><br><span class=\"line\">\t\tDPrintf(<span class=\"string\">\"Schedule begin, task:%v, Status: %v\"</span>, taskSeq, m.taskStats[taskSeq].Status)</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> m.taskStats[taskSeq].Status &#123; <span class=\"comment\">//根据处在的不同状态，完成不同的操作</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TaskStatusReady:</span><br><span class=\"line\">\t\t\tm.taskCh &lt;- m.getTask(taskSeq)</span><br><span class=\"line\">\t\t\tm.taskStats[taskSeq].Status = TaskStatusQueue</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TaskStatusQueue:</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TaskStatusRunning:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> time.Since(m.taskStats[taskSeq].StartTime) &gt; MaxTaskRunTime &#123;</span><br><span class=\"line\">\t\t\t\tm.taskStats[taskSeq].Status = TaskStatusQueue</span><br><span class=\"line\">\t\t\t\tm.taskCh &lt;- m.getTask(taskSeq)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TaskStatusFinish:</span><br><span class=\"line\">\t\t\tm.finishTask += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\tm.mu.Unlock()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"comment\">//单个task完成了就结束</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TaskStatusErr:</span><br><span class=\"line\">\t\t\tm.taskStats[taskSeq].Status = TaskStatusQueue</span><br><span class=\"line\">\t\t\tm.taskCh &lt;- m.getTask(taskSeq)</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tm.mu.Unlock()</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"Task status err\"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tDPrintf(<span class=\"string\">\"Schedule end, task:%v, Status: %v\"</span>, taskSeq, m.taskStats[taskSeq].Status)</span><br><span class=\"line\">\t\tm.mu.Unlock()</span><br><span class=\"line\">\t\ttime.Sleep(ScheduleInterval) <span class=\"comment\">//睡眠一个间隙</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来是getTask()的实现</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">getTask</span><span class=\"params\">(taskSeq <span class=\"keyword\">int</span>)</span> <span class=\"title\">Task</span></span> &#123;</span><br><span class=\"line\">\ttask := Task&#123;</span><br><span class=\"line\">\t\tFileName: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">\t\tNReduce:  m.nReduce,</span><br><span class=\"line\">\t\tNMaps:    <span class=\"built_in\">len</span>(m.files),</span><br><span class=\"line\">\t\tSeq:      taskSeq, <span class=\"comment\">//序号</span></span><br><span class=\"line\">\t\tPhase:    m.taskPhase,</span><br><span class=\"line\">\t\tAlive:    <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"Get task, taskseq:%d, len files:%d, len tasks:%d\"</span>, m, taskSeq, <span class=\"built_in\">len</span>(m.files), <span class=\"built_in\">len</span>(m.taskStats))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> task.Phase == MapPhase &#123;</span><br><span class=\"line\">\t\ttask.FileName = m.files[taskSeq]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> task</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>task的结构体</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Task <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tFileName <span class=\"keyword\">string</span></span><br><span class=\"line\">\tNReduce  <span class=\"keyword\">int</span></span><br><span class=\"line\">\tNMaps    <span class=\"keyword\">int</span></span><br><span class=\"line\">\tSeq      <span class=\"keyword\">int</span></span><br><span class=\"line\">\tPhase    TaskPhase</span><br><span class=\"line\">\tAlive    <span class=\"keyword\">bool</span> <span class=\"comment\">// worker should exit when alive is false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当map阶段完成，则开始进入reduce阶段。该函数由独立线程执行，以检测当前map状态</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">tickSchedule</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> !m.Done() &#123;</span><br><span class=\"line\">\t\tm.mu.Lock()</span><br><span class=\"line\">\t\tDPrintf(<span class=\"string\">\"Global schedule, finTask:%v, taskNum:%v\\n\"</span>, m.finishTask, m.taskNum)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> m.finishTask == <span class=\"keyword\">int32</span>(m.taskNum) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.taskPhase == MapPhase &#123;</span><br><span class=\"line\">\t\t\t\tm.mu.Unlock()</span><br><span class=\"line\">\t\t\t\tm.initReduceTask()</span><br><span class=\"line\">\t\t\t\ttime.Sleep(ScheduleInterval)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tm.done = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tm.mu.Unlock()</span><br><span class=\"line\">\t\ttime.Sleep(ScheduleInterval)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>initReduceTask()的实现：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">initReduceTask</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm.mu.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> m.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"Init Reduce Task\"</span>)</span><br><span class=\"line\">\tm.taskPhase = ReducePhase</span><br><span class=\"line\">\tm.taskStats = <span class=\"built_in\">make</span>([]TaskStat, m.nReduce)</span><br><span class=\"line\">\tm.taskNum = m.nReduce</span><br><span class=\"line\">\tm.finishTask = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index := <span class=\"keyword\">range</span> m.taskStats &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> m.taskSchedule(index) <span class=\"comment\">//和map阶段类似，对每一个task，创建一个状态机循环</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来是server()函数，用来监听Worker的RPC调用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">server</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trpc.Register(m) <span class=\"comment\">//注册RPC</span></span><br><span class=\"line\">\trpc.HandleHTTP()</span><br><span class=\"line\">\tsockname := masterSock()</span><br><span class=\"line\">\tos.Remove(sockname)</span><br><span class=\"line\">\tl, e := net.Listen(<span class=\"string\">\"unix\"</span>, sockname)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> e != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"listen error:\"</span>, e)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> http.Serve(l, <span class=\"literal\">nil</span>) <span class=\"comment\">//开始监听</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Master其余method均为给Worker调用，在本地RPC框架中注册，包括regTask()  GetOneTask()  ReportTask()  RegWorker()</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> TaskArgs <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tWorkerId <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> TaskReply <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tTask *Task</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注册task，其实就是在Master端记录当前task的状态</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">regTask</span><span class=\"params\">(args *TaskArgs, task *Task)</span></span> &#123;</span><br><span class=\"line\">\tm.mu.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> m.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> task.Phase != m.taskPhase &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"Task phase doesn't match\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tm.taskStats[task.Seq].Status = TaskStatusRunning</span><br><span class=\"line\">\tm.taskStats[task.Seq].WorkerId = args.WorkerId</span><br><span class=\"line\">\tm.taskStats[task.Seq].StartTime = time.Now()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从channel中获得一个task，并返回给worker</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">GetOneTask</span><span class=\"params\">(args *TaskArgs, reply *TaskReply)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\ttask := &lt;-m.taskCh</span><br><span class=\"line\">\treply.Task = &amp;task</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> task.Alive &#123;</span><br><span class=\"line\">\t\tm.regTask(args, &amp;task)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"Get one Task, args:%+v, reply:%+v\"</span>, args, reply)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>报告task的函数，如果完成了，就将task在状态数组中的状态改为Finish，否则改为Error</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ReportTaskArgs <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tDone     <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tSeq      <span class=\"keyword\">int</span></span><br><span class=\"line\">\tPhase    TaskPhase</span><br><span class=\"line\">\tWorkerId <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ReportTaskReply <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">ReportTask</span><span class=\"params\">(args *ReportTaskArgs, reply *ReportTaskReply)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tm.mu.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> m.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"Get report task: %+v, taskPhase: %+v\"</span>, args, m.taskPhase)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> m.taskPhase != args.Phase || args.WorkerId != m.taskStats[args.Seq].WorkerId &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> args.Done &#123;</span><br><span class=\"line\">\t\tm.taskStats[args.Seq].Status = TaskStatusFinish</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tm.taskStats[args.Seq].Status = TaskStatusErr</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注册Worker的函数，Master给各个Worker分配一个序号</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> RegisterArgs <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> RegisterReply <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tWorkerId <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">RegWorker</span><span class=\"params\">(args *RegisterArgs, reply *RegisterReply)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tm.mu.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> m.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\tm.workerSeq++</span><br><span class=\"line\">\treply.WorkerId = m.workerSeq</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"worker-节点\"><a class=\"markdownIt-Anchor\" href=\"#worker-节点\"></a> Worker 节点</h3>\n<ul>\n<li>mrworker.go</li>\n</ul>\n<p>mapf和reducef分别为从外部库导入到自定义map函数和reduce函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) != <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\tfmt.Fprintf(os.Stderr, <span class=\"string\">\"Usage: mrworker xxx.so\\n\"</span>)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tmapf, reducef := loadPlugin(os.Args[<span class=\"number\">1</span>])</span><br><span class=\"line\">\tmr.Worker(mapf, reducef)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//加载自定义的map函数和reduce函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loadPlugin</span><span class=\"params\">(filename <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">func</span>(<span class=\"keyword\">string</span>, <span class=\"keyword\">string</span>)</span> []<span class=\"title\">mr</span>.<span class=\"title\">KeyValue</span>, <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">string</span>, []<span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span>)</span> &#123;</span><br><span class=\"line\">\tp, err := plugin.Open(filename)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"cannot load plugin %v\"</span>, filename)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\txmapf, err := p.Lookup(<span class=\"string\">\"Map\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"cannot find Map in %v\"</span>, filename)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmapf := xmapf.(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"keyword\">string</span>, <span class=\"keyword\">string</span>)</span> []<span class=\"title\">mr</span>.<span class=\"title\">KeyValue</span>)</span></span><br><span class=\"line\">\txreducef, err := p.Lookup(<span class=\"string\">\"Reduce\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"cannot find Reduce in %v\"</span>, filename)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treducef := xreducef.(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"keyword\">string</span>, []<span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> mapf, reducef</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>worker函数，函数参数为map和reduce函数指针</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">func Worker(mapf func(string, string) []KeyValue,</span><br><span class=\"line\">\treducef func(string, []string) string) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tw :&#x3D; worker&#123;&#125;</span><br><span class=\"line\">\tw.mapf &#x3D; mapf</span><br><span class=\"line\">\tw.reducef &#x3D; reducef</span><br><span class=\"line\">\tw.register()</span><br><span class=\"line\">\tw.run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>worker结构体</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> worker <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tid      <span class=\"keyword\">int</span></span><br><span class=\"line\">\tmapf    <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"keyword\">string</span>, <span class=\"keyword\">string</span>)</span> []<span class=\"title\">KeyValue</span></span></span><br><span class=\"line\">\treducef <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"keyword\">string</span>, []<span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将mapf和reducef函数指针进行赋值后，向Master注册自己，其实就是获得一个Master分配的递增id</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *worker)</span> <span class=\"title\">register</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\targs := &amp;RegisterArgs&#123;&#125;</span><br><span class=\"line\">\treply := &amp;RegisterReply&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ok := call(<span class=\"string\">\"Master.RegWorker\"</span>, args, reply); !ok &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"reg fail\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tw.id = reply.WorkerId</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后执行run函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *worker)</span> <span class=\"title\">run</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// if reqTask conn fail, worker exit</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tt := w.reqTask()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !t.Alive &#123;</span><br><span class=\"line\">\t\t\tDPrintf(<span class=\"string\">\"worker %v get task not alive, exit\"</span>, w.id)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tDPrintf(<span class=\"string\">\"worker %v get task alive\"</span>, w.id)</span><br><span class=\"line\">\t\tw.doTask(t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在run函数中，循环请求（reqTask）和处理（doTask）任务</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *worker)</span> <span class=\"title\">reqTask</span><span class=\"params\">()</span> <span class=\"title\">Task</span></span> &#123;</span><br><span class=\"line\">\targs := TaskArgs&#123;&#125;</span><br><span class=\"line\">\targs.WorkerId = w.id</span><br><span class=\"line\">\treply := TaskReply&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ok := call(<span class=\"string\">\"Master.GetOneTask\"</span>, &amp;args, &amp;reply); !ok &#123;</span><br><span class=\"line\">\t\tDPrintf(<span class=\"string\">\"worker get task fail,exit\"</span>)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"worker get task:%+v\"</span>, reply.Task)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *reply.Task <span class=\"comment\">//请求一个任务并返回</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据不用阶段，分别doMapTask和doReduceTask，其中分别调用了mapf和reducef，完成或者出错，则调用reportTask向Master进行报告</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *worker)</span> <span class=\"title\">doTask</span><span class=\"params\">(t Task)</span></span> &#123;</span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"Worker do Task\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> t.Phase &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> MapPhase:</span><br><span class=\"line\">\t\tw.doMapTask(t)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> ReducePhase:</span><br><span class=\"line\">\t\tw.doReduceTask(t)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(fmt.Sprintf(<span class=\"string\">\"task phase err: %v\"</span>, t.Phase))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后是RPC调用过程中call函数的实现，对系统提供的RPC接口进行了封装</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// send an RPC request to the master, wait for the response.</span></span><br><span class=\"line\"><span class=\"comment\">// usually returns true.</span></span><br><span class=\"line\"><span class=\"comment\">// returns false if something goes wrong.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">call</span><span class=\"params\">(rpcname <span class=\"keyword\">string</span>, args <span class=\"keyword\">interface</span>&#123;&#125;, reply <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// c, err := rpc.DialHTTP(\"tcp\", \"127.0.0.1\"+\":1234\")</span></span><br><span class=\"line\">\tsockname := masterSock()</span><br><span class=\"line\">\tc, err := rpc.DialHTTP(<span class=\"string\">\"unix\"</span>, sockname)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tDPrintf(<span class=\"string\">\"dialing:\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> c.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = c.Call(rpcname, args, reply)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"%+v\"</span>, err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"maprudece-lab\"><a class=\"markdownIt-Anchor\" href=\"#maprudece-lab\"></a> MapRudece Lab</h2>\n<h3 id=\"master-节点\"><a class=\"markdownIt-Anchor\" href=\"#master-节点\"></a> Master 节点</h3>\n<p>MapReduce是一个分布式计算模型，这是MapReduce的go语言版本的一个简单实现。</p>\n<ul>\n<li>mrmaster.go</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) &lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\tfmt.Fprintf(os.Stderr, <span class=\"string\">\"Usage: mrmaster inputfiles...\\n\"</span>)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tm := mr.MakeMaster(os.Args[<span class=\"number\">1</span>:], <span class=\"number\">10</span>) <span class=\"comment\">//创建一个master</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> m.Done() == <span class=\"literal\">false</span> &#123; <span class=\"comment\">//主线程等待结束</span></span><br><span class=\"line\">\t\ttime.Sleep(time.Second)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(time.Second)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>master.go</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// create a Master.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MakeMaster</span><span class=\"params\">(files []<span class=\"keyword\">string</span>, nReduce <span class=\"keyword\">int</span>)</span> *<span class=\"title\">Master</span></span> &#123;</span><br><span class=\"line\">\tm := &amp;Master&#123;&#125;</span><br><span class=\"line\">\tm.mu = sync.Mutex&#123;&#125;</span><br><span class=\"line\">\tm.nReduce = nReduce <span class=\"comment\">//输入的参数nReduce（输入的文件会被划分成几个task来处理）</span></span><br><span class=\"line\">\tm.files = files <span class=\"comment\">//文件名数组</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> nReduce &gt; <span class=\"built_in\">len</span>(files) &#123; <span class=\"comment\">//确定分发task的channel的缓冲区大小</span></span><br><span class=\"line\">\t\tm.taskCh = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> Task, nReduce)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tm.taskCh = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> Task, <span class=\"built_in\">len</span>(m.files)) <span class=\"comment\">//文件数量多于分成的task数量</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tm.initMapTask()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> m.tickSchedule()</span><br><span class=\"line\">\tm.server()</span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"Master init\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Master结构的定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Master <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tfiles      []<span class=\"keyword\">string</span>   <span class=\"comment\">//需要处理的files</span></span><br><span class=\"line\">\tnReduce    <span class=\"keyword\">int</span>        <span class=\"comment\">//输入的参数nReduce（输入的文件会被划分成几个task来处理）</span></span><br><span class=\"line\">\ttaskPhase  TaskPhase  <span class=\"comment\">//taskPhase（map阶段还是reduce阶段）</span></span><br><span class=\"line\">\ttaskStats  []TaskStat <span class=\"comment\">//taskStats（各个task的状态）</span></span><br><span class=\"line\">\ttaskNum    <span class=\"keyword\">int</span>        <span class=\"comment\">//task数量</span></span><br><span class=\"line\">\tmu         sync.Mutex <span class=\"comment\">//mu（全局锁）</span></span><br><span class=\"line\">\tdone       <span class=\"keyword\">bool</span>       <span class=\"comment\">//done（任务是否已完成）</span></span><br><span class=\"line\">\tworkerSeq  <span class=\"keyword\">int</span>        <span class=\"comment\">//workerSeq（有几个worker）</span></span><br><span class=\"line\">\ttaskCh     <span class=\"keyword\">chan</span> Task  <span class=\"comment\">//taskCh（用来分发task的channel）</span></span><br><span class=\"line\">\tfinishTask <span class=\"keyword\">int32</span>      <span class=\"comment\">//statCh（用来接受完成task数量）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Master包含的本地method有：initMapTask()  taskSchedule()  getTask()  tickSchedule()  initReduceTask()</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">initMapTask</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm.mu.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> m.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"Init Map Task\"</span>)</span><br><span class=\"line\">\tm.taskPhase = MapPhase <span class=\"comment\">//设置阶段</span></span><br><span class=\"line\">\tm.taskStats = <span class=\"built_in\">make</span>([]TaskStat, <span class=\"built_in\">len</span>(m.files)) <span class=\"comment\">//创建task状态数组</span></span><br><span class=\"line\">\tm.taskNum = <span class=\"built_in\">len</span>(m.files) <span class=\"comment\">//task数量</span></span><br><span class=\"line\">\tm.finishTask = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index := <span class=\"keyword\">range</span> m.taskStats &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> m.taskSchedule(index) <span class=\"comment\">//对每一个task，创建一个状态机循环</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>单个task的调度，用一个Loop来实现一个状态机。</p>\n<ol>\n<li>如果处在TaskStatusReady状态，则getTask()并放进channel</li>\n<li>如果处在TaskStatusQueue，什么都不做</li>\n<li>如果处在TaskStatusRunning，如果任务超时，则重新getTask()并放进channel</li>\n<li>如果处在TaskStatusFinish，则finishTask自加1</li>\n<li>如果处在TaskStatusErr，则getTask()并放进channel</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">taskSchedule</span><span class=\"params\">(taskSeq <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> m.Done() &#123; <span class=\"comment\">//如果Done则结束</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tm.mu.Lock()</span><br><span class=\"line\">\t\tDPrintf(<span class=\"string\">\"Schedule begin, task:%v, Status: %v\"</span>, taskSeq, m.taskStats[taskSeq].Status)</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> m.taskStats[taskSeq].Status &#123; <span class=\"comment\">//根据处在的不同状态，完成不同的操作</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TaskStatusReady:</span><br><span class=\"line\">\t\t\tm.taskCh &lt;- m.getTask(taskSeq)</span><br><span class=\"line\">\t\t\tm.taskStats[taskSeq].Status = TaskStatusQueue</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TaskStatusQueue:</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TaskStatusRunning:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> time.Since(m.taskStats[taskSeq].StartTime) &gt; MaxTaskRunTime &#123;</span><br><span class=\"line\">\t\t\t\tm.taskStats[taskSeq].Status = TaskStatusQueue</span><br><span class=\"line\">\t\t\t\tm.taskCh &lt;- m.getTask(taskSeq)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TaskStatusFinish:</span><br><span class=\"line\">\t\t\tm.finishTask += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\tm.mu.Unlock()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"comment\">//单个task完成了就结束</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> TaskStatusErr:</span><br><span class=\"line\">\t\t\tm.taskStats[taskSeq].Status = TaskStatusQueue</span><br><span class=\"line\">\t\t\tm.taskCh &lt;- m.getTask(taskSeq)</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tm.mu.Unlock()</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"Task status err\"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tDPrintf(<span class=\"string\">\"Schedule end, task:%v, Status: %v\"</span>, taskSeq, m.taskStats[taskSeq].Status)</span><br><span class=\"line\">\t\tm.mu.Unlock()</span><br><span class=\"line\">\t\ttime.Sleep(ScheduleInterval) <span class=\"comment\">//睡眠一个间隙</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来是getTask()的实现</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">getTask</span><span class=\"params\">(taskSeq <span class=\"keyword\">int</span>)</span> <span class=\"title\">Task</span></span> &#123;</span><br><span class=\"line\">\ttask := Task&#123;</span><br><span class=\"line\">\t\tFileName: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">\t\tNReduce:  m.nReduce,</span><br><span class=\"line\">\t\tNMaps:    <span class=\"built_in\">len</span>(m.files),</span><br><span class=\"line\">\t\tSeq:      taskSeq, <span class=\"comment\">//序号</span></span><br><span class=\"line\">\t\tPhase:    m.taskPhase,</span><br><span class=\"line\">\t\tAlive:    <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"Get task, taskseq:%d, len files:%d, len tasks:%d\"</span>, m, taskSeq, <span class=\"built_in\">len</span>(m.files), <span class=\"built_in\">len</span>(m.taskStats))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> task.Phase == MapPhase &#123;</span><br><span class=\"line\">\t\ttask.FileName = m.files[taskSeq]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> task</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>task的结构体</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Task <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tFileName <span class=\"keyword\">string</span></span><br><span class=\"line\">\tNReduce  <span class=\"keyword\">int</span></span><br><span class=\"line\">\tNMaps    <span class=\"keyword\">int</span></span><br><span class=\"line\">\tSeq      <span class=\"keyword\">int</span></span><br><span class=\"line\">\tPhase    TaskPhase</span><br><span class=\"line\">\tAlive    <span class=\"keyword\">bool</span> <span class=\"comment\">// worker should exit when alive is false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当map阶段完成，则开始进入reduce阶段。该函数由独立线程执行，以检测当前map状态</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">tickSchedule</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> !m.Done() &#123;</span><br><span class=\"line\">\t\tm.mu.Lock()</span><br><span class=\"line\">\t\tDPrintf(<span class=\"string\">\"Global schedule, finTask:%v, taskNum:%v\\n\"</span>, m.finishTask, m.taskNum)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> m.finishTask == <span class=\"keyword\">int32</span>(m.taskNum) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.taskPhase == MapPhase &#123;</span><br><span class=\"line\">\t\t\t\tm.mu.Unlock()</span><br><span class=\"line\">\t\t\t\tm.initReduceTask()</span><br><span class=\"line\">\t\t\t\ttime.Sleep(ScheduleInterval)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tm.done = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tm.mu.Unlock()</span><br><span class=\"line\">\t\ttime.Sleep(ScheduleInterval)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>initReduceTask()的实现：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">initReduceTask</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm.mu.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> m.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"Init Reduce Task\"</span>)</span><br><span class=\"line\">\tm.taskPhase = ReducePhase</span><br><span class=\"line\">\tm.taskStats = <span class=\"built_in\">make</span>([]TaskStat, m.nReduce)</span><br><span class=\"line\">\tm.taskNum = m.nReduce</span><br><span class=\"line\">\tm.finishTask = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index := <span class=\"keyword\">range</span> m.taskStats &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> m.taskSchedule(index) <span class=\"comment\">//和map阶段类似，对每一个task，创建一个状态机循环</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来是server()函数，用来监听Worker的RPC调用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">server</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trpc.Register(m) <span class=\"comment\">//注册RPC</span></span><br><span class=\"line\">\trpc.HandleHTTP()</span><br><span class=\"line\">\tsockname := masterSock()</span><br><span class=\"line\">\tos.Remove(sockname)</span><br><span class=\"line\">\tl, e := net.Listen(<span class=\"string\">\"unix\"</span>, sockname)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> e != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"listen error:\"</span>, e)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> http.Serve(l, <span class=\"literal\">nil</span>) <span class=\"comment\">//开始监听</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Master其余method均为给Worker调用，在本地RPC框架中注册，包括regTask()  GetOneTask()  ReportTask()  RegWorker()</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> TaskArgs <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tWorkerId <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> TaskReply <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tTask *Task</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注册task，其实就是在Master端记录当前task的状态</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">regTask</span><span class=\"params\">(args *TaskArgs, task *Task)</span></span> &#123;</span><br><span class=\"line\">\tm.mu.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> m.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> task.Phase != m.taskPhase &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"Task phase doesn't match\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tm.taskStats[task.Seq].Status = TaskStatusRunning</span><br><span class=\"line\">\tm.taskStats[task.Seq].WorkerId = args.WorkerId</span><br><span class=\"line\">\tm.taskStats[task.Seq].StartTime = time.Now()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从channel中获得一个task，并返回给worker</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">GetOneTask</span><span class=\"params\">(args *TaskArgs, reply *TaskReply)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\ttask := &lt;-m.taskCh</span><br><span class=\"line\">\treply.Task = &amp;task</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> task.Alive &#123;</span><br><span class=\"line\">\t\tm.regTask(args, &amp;task)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"Get one Task, args:%+v, reply:%+v\"</span>, args, reply)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>报告task的函数，如果完成了，就将task在状态数组中的状态改为Finish，否则改为Error</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ReportTaskArgs <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tDone     <span class=\"keyword\">bool</span></span><br><span class=\"line\">\tSeq      <span class=\"keyword\">int</span></span><br><span class=\"line\">\tPhase    TaskPhase</span><br><span class=\"line\">\tWorkerId <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ReportTaskReply <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">ReportTask</span><span class=\"params\">(args *ReportTaskArgs, reply *ReportTaskReply)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tm.mu.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> m.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"Get report task: %+v, taskPhase: %+v\"</span>, args, m.taskPhase)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> m.taskPhase != args.Phase || args.WorkerId != m.taskStats[args.Seq].WorkerId &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> args.Done &#123;</span><br><span class=\"line\">\t\tm.taskStats[args.Seq].Status = TaskStatusFinish</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tm.taskStats[args.Seq].Status = TaskStatusErr</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注册Worker的函数，Master给各个Worker分配一个序号</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> RegisterArgs <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> RegisterReply <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tWorkerId <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Master)</span> <span class=\"title\">RegWorker</span><span class=\"params\">(args *RegisterArgs, reply *RegisterReply)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tm.mu.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> m.mu.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">\tm.workerSeq++</span><br><span class=\"line\">\treply.WorkerId = m.workerSeq</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"worker-节点\"><a class=\"markdownIt-Anchor\" href=\"#worker-节点\"></a> Worker 节点</h3>\n<ul>\n<li>mrworker.go</li>\n</ul>\n<p>mapf和reducef分别为从外部库导入到自定义map函数和reduce函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) != <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\tfmt.Fprintf(os.Stderr, <span class=\"string\">\"Usage: mrworker xxx.so\\n\"</span>)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tmapf, reducef := loadPlugin(os.Args[<span class=\"number\">1</span>])</span><br><span class=\"line\">\tmr.Worker(mapf, reducef)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//加载自定义的map函数和reduce函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loadPlugin</span><span class=\"params\">(filename <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">func</span>(<span class=\"keyword\">string</span>, <span class=\"keyword\">string</span>)</span> []<span class=\"title\">mr</span>.<span class=\"title\">KeyValue</span>, <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">string</span>, []<span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span>)</span> &#123;</span><br><span class=\"line\">\tp, err := plugin.Open(filename)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"cannot load plugin %v\"</span>, filename)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\txmapf, err := p.Lookup(<span class=\"string\">\"Map\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"cannot find Map in %v\"</span>, filename)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmapf := xmapf.(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"keyword\">string</span>, <span class=\"keyword\">string</span>)</span> []<span class=\"title\">mr</span>.<span class=\"title\">KeyValue</span>)</span></span><br><span class=\"line\">\txreducef, err := p.Lookup(<span class=\"string\">\"Reduce\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">\"cannot find Reduce in %v\"</span>, filename)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treducef := xreducef.(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"keyword\">string</span>, []<span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> mapf, reducef</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>worker函数，函数参数为map和reduce函数指针</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">func Worker(mapf func(string, string) []KeyValue,</span><br><span class=\"line\">\treducef func(string, []string) string) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tw :&#x3D; worker&#123;&#125;</span><br><span class=\"line\">\tw.mapf &#x3D; mapf</span><br><span class=\"line\">\tw.reducef &#x3D; reducef</span><br><span class=\"line\">\tw.register()</span><br><span class=\"line\">\tw.run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>worker结构体</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> worker <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tid      <span class=\"keyword\">int</span></span><br><span class=\"line\">\tmapf    <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"keyword\">string</span>, <span class=\"keyword\">string</span>)</span> []<span class=\"title\">KeyValue</span></span></span><br><span class=\"line\">\treducef <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"keyword\">string</span>, []<span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将mapf和reducef函数指针进行赋值后，向Master注册自己，其实就是获得一个Master分配的递增id</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *worker)</span> <span class=\"title\">register</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\targs := &amp;RegisterArgs&#123;&#125;</span><br><span class=\"line\">\treply := &amp;RegisterReply&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ok := call(<span class=\"string\">\"Master.RegWorker\"</span>, args, reply); !ok &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"reg fail\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tw.id = reply.WorkerId</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后执行run函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *worker)</span> <span class=\"title\">run</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// if reqTask conn fail, worker exit</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tt := w.reqTask()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !t.Alive &#123;</span><br><span class=\"line\">\t\t\tDPrintf(<span class=\"string\">\"worker %v get task not alive, exit\"</span>, w.id)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tDPrintf(<span class=\"string\">\"worker %v get task alive\"</span>, w.id)</span><br><span class=\"line\">\t\tw.doTask(t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在run函数中，循环请求（reqTask）和处理（doTask）任务</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *worker)</span> <span class=\"title\">reqTask</span><span class=\"params\">()</span> <span class=\"title\">Task</span></span> &#123;</span><br><span class=\"line\">\targs := TaskArgs&#123;&#125;</span><br><span class=\"line\">\targs.WorkerId = w.id</span><br><span class=\"line\">\treply := TaskReply&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ok := call(<span class=\"string\">\"Master.GetOneTask\"</span>, &amp;args, &amp;reply); !ok &#123;</span><br><span class=\"line\">\t\tDPrintf(<span class=\"string\">\"worker get task fail,exit\"</span>)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"worker get task:%+v\"</span>, reply.Task)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *reply.Task <span class=\"comment\">//请求一个任务并返回</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据不用阶段，分别doMapTask和doReduceTask，其中分别调用了mapf和reducef，完成或者出错，则调用reportTask向Master进行报告</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *worker)</span> <span class=\"title\">doTask</span><span class=\"params\">(t Task)</span></span> &#123;</span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"Worker do Task\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> t.Phase &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> MapPhase:</span><br><span class=\"line\">\t\tw.doMapTask(t)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> ReducePhase:</span><br><span class=\"line\">\t\tw.doReduceTask(t)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(fmt.Sprintf(<span class=\"string\">\"task phase err: %v\"</span>, t.Phase))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后是RPC调用过程中call函数的实现，对系统提供的RPC接口进行了封装</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// send an RPC request to the master, wait for the response.</span></span><br><span class=\"line\"><span class=\"comment\">// usually returns true.</span></span><br><span class=\"line\"><span class=\"comment\">// returns false if something goes wrong.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">call</span><span class=\"params\">(rpcname <span class=\"keyword\">string</span>, args <span class=\"keyword\">interface</span>&#123;&#125;, reply <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// c, err := rpc.DialHTTP(\"tcp\", \"127.0.0.1\"+\":1234\")</span></span><br><span class=\"line\">\tsockname := masterSock()</span><br><span class=\"line\">\tc, err := rpc.DialHTTP(<span class=\"string\">\"unix\"</span>, sockname)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tDPrintf(<span class=\"string\">\"dialing:\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> c.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = c.Call(rpcname, args, reply)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDPrintf(<span class=\"string\">\"%+v\"</span>, err)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"[6.824] 分布式笔记","date":"2020-12-06T08:48:00.000Z","_content":"\n## MIT 6.824 分布式系统笔记\n\n### L3 GFS\n\n#### 分布式的难点\n\n人们设计大型分布式系统或大型存储系统出发点通常是，他们想获取巨大的性能加成，进而利用数百台计算机的资源来同时完成大量工作。因此，性能问题就成为了最初的诉求。 之后，很自然的想法就是将数据分割放到大量的服务器上，这样就可以并行的从多台服务器读取数据。我们将这种方式称之为分片（Sharding）。\n\n如果你在成百上千台服务器进行分片，你将会看见常态的故障。如果你有数千台服务器，那么总是会有一台服务器宕机，每天甚至每个小时都可能会发生错误。所以，我们需要自动化的方法而不是人工介入来修复错误。我们需要一个自动的容错系统，这就引出了容错这个话题（fault tolerance）。\n\n实现容错最有用的一种方法是使用复制，只需要维护2-3个数据的副本，当其中一个故障了，你就可以使用另一个。所以，如果想要容错能力，就得有复制（replication）。\n\n如果有复制，那就有了两份数据的副本。可以确定的是，如果你不小心，它们就会不一致。所以，你本来设想的是，有了两个数据副本，你可以任意使用其中一个副本来容错。但是如果你不够小心，两个数据的副本就不是完全一致，严格来说，它们就不再互为副本了。而你获取到的数据内容也将取决于你向哪个副本请求数据。这对于应用程序来说就有些麻烦了。所以，如果我们有了复制，我们就有不一致的问题（inconsistency）。\n\n通过聪明的设计，你可以避免不一致的问题，并且让数据看起来也表现的符合预期。但是为了达到这样的效果，你总是需要额外的工作，需要不同服务器之间通过网络额外的交互，而这样的交互会降低性能。所以如果你想要一致性，你的代价就是低性能。但这明显不是我们最开始所希望的。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111174832.png\" width=\"500px\"> </div>\n\n\n\n#### 一种分布式存储错误的设计\n\n对于强一致性或者好的一致性的设备，从应用程序或者客户端来看就像是在和一台服务器在通信。对于一个理想的强一致性模型，你看到的就像是只有一台服务器，一份数据，并且系统一次只做一件事情。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111211740.png\" width=\"500px\"> </div>\n\n上图表示了一个因服务端接收数据顺序不一样而可能出问题的系统。\n\n#### GFS的设计目标\n\nGFS的目标是构建一个大型的，快速的文件系统。并且这个文件系统是全局有效的，这样各种不同的应用程序都可以从中读取数据。\n\nGFS在各个方面对大型的顺序文件读写进行了定制。GFS只会顺序处理，不支持随机访问。\n\n#### GFS Master节点\n\n接下来是GFS的大致架构。\n\nGFS中只有一个Master节点在工作，Master节点保存了文件名和存储位置的对应关系。除此之外，还有大量的Chunk服务器。Master用来管理文件和Chunk的信息，而Chunk服务器用来存储实际的数据。Master节点知道每一个文件对应的Chunk的ID，这些Chunk是64MB大小，它们共同构成了一个文件。如果我有一个1GB的文件，那么Master节点就知道文件的第一个Chunk存储在哪，第二个Chunk存储在哪，等等。当我想读取这个文件中的任意一个部分时，我需要向Master节点查询对应的Chunk在哪个服务器上，之后我可以直接从Chunk服务器读取对应的Chunk数据。\n\nMaster节点内保存的数据内容，主要关心两个表单：\n\n1. 文件名 -> Chunk ID 或者 Chunk Handle数组的对应。这个表单告诉你，文件对应了哪些Chunk\n\n2. Chunk ID -> Chunk 数据 对应关系，包括了：\n\n   - 每个Chunk存储在哪些服务器上，所以这部分是Chunk服务器的列表\n- 每个Chunk当前的版本号，所以Master节点必须记住每个Chunk对应的版本号。\n   - 所有对于Chunk的写操作都必须在主Chunk（Primary Chunk）上顺序处理，主Chunk是Chunk的多个副本之一。所以，Master节点必须记住哪个Chunk服务器持有主Chunk。\n- 并且，主Chunk只能在特定的租约时间内担任主Chunk，所以，Master节点要记住主Chunk的租约过期时间\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111213312.png\" width=\"500px\"> </div>\n\n以上数据都在内存中，如果Master故障了，这些数据就都丢失了。为了能让Master重启而不丢失数据，Master节点会同时将数据存储在磁盘上。Master会在磁盘上存储Log，每次有数据变更时，Master会在磁盘的Log中追加一条记录，并生成CheckPoint（备份点）。\n\n1. Chunk Handle的数组（第一个表单）要保存在磁盘上。标记为NV（non-volatile 非易失）这个标记的数据会写到磁盘上\n\n2. Chunk服务器列表不用保存到磁盘上。因为Master节点重启之后可以与所有的Chunk服务器通信，并查询每个Chunk服务器存储了哪些Chunk，标记为V（volatile）\n\n3. 版本号要不要写入磁盘取决于GFS如何工作，我认为需要写入磁盘。之后讨论，先标记为NV\n\n4. 主Chunk的ID，可以确定不用写入磁盘，因为Master节点重启之后会忘记谁是主Chunk，这个时候，Master节点可以安全指定一个新的主Chunk。所以这里标记成V\n\n5. 类似的，租约过期时间也不用写入磁盘，标记成V\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111215459.png\" width=\"500px\"> </div>\n\n任何时候，如果文件扩展到达了一个新的64MB，需要新增一个Chunk或者由于指定了新的主Chunk而导致版本号更新了，Master节点需要向磁盘中的Log追加一条记录，我刚刚向这个文件添加了一个新的Chunk或者我刚刚修改了Chunk的版本号。\n\n> 这里在磁盘中维护Log而不是数据库的原因是，数据库本质上来说是某种B树（B-tree）或者Hash table，相比之下，追加Log会非常的高效，因为你可以将最近的多个Log记录一次性的写入磁盘。因为这些数据都是向同一个地址追加，这样只需要等待磁盘的磁碟旋转一次。而对于B树来说，每一份数据都需要在磁盘中随机找个位置写入。所以使用Log可以使得磁盘写入更快一些。\n\n当Master节点故障重启，并重建状态，你不会想要从Log的最开始重建状态，因为Log的最开始可能是很久以前。重启时，Master节点会从Log中的最近一个CheckPoint开始恢复，并逐条执行从CheckPoint开始的Log记录。\n\n#### GFS读文件 Read file\n\n有了之前的基础，接下来会列出GFS读和写的步骤，最后，介绍出现故障之后，系统是如何保持正确的行为。\n\n对于读请求来说，意味着应用或者GFS客户端有一个文件名和它想从文件的某个位置读取的偏移量（offset），应用程序会将这些信息发送给Master节点。Master节点会从自己的File表单中查询文件名，得到Chunk ID的数组。因为每个Chunk都是64MB，所以偏移量除以64MB就可以从数组中得到对应的Chunk ID。之后Master再从Chunk表单中找到存有Chunk的服务器列表，并将列表返回给客户端。所以分两步：\n\n1. 客户端-> 文件名 + 偏移量 -> Master\n2. Master-> Chunk handle + 服务器列表 -> 客户端\n\n现在客户端从服务器列表中挑选一个来读取数据。（论文中说客户端会选择一个网络上最近的服务器）客户端可能会连续多次读取同一个Chunk的不同位置。所以，客户端会缓存Chunk和服务器的对应关系，这样不用向Master一次次去请求相同的信息。\n\n接下来，客户端和Chunk通信，将Chunk Handle和偏移量发送给那个Chunk服务器。服务器找到数据，将数据返回给客户端。\n\n#### GFS写文件 Write File 1\n\nGFS写文件的过程更加复杂。我们只讨论客户端的记录追加（Record Append），想把buffer中的数据，追加到这个文件名对应的文件中。对于写文件，客户端会向Master节点发送请求说：我想向这个文件名对应的文件追加数据，请告诉我文件中最后一个Chunk的位置。\n\n当有多个客户端同时写同一个文件时，一个客户端并不能知道文件究竟有多长。这个时候，客户端可以向Master节点查询哪个Chunk服务器保存了文件的最后一个Chunk。对于读文件来说，可以从任何最新的Chunk副本读取数据，但是对于写文件来说，必须要通过Chunk的主副本（Primary Chunk）来写入。对于某个特定的Chunk来说，在某一个时间点，Master不一定指定了Chunk的主副本。所以，写文件的时候，需要考虑Chunk的主副本不存在的情况。\n\n对于Master节点来说，如果发现Chunk的主副本不存在，Master会找出所有存有Chunk最新副本的Chunk服务器。Master节点的工作就是弄清楚在追加文件时，客户端应该与哪个Chunk服务器进行通信。\n\n每个Chunk可能同时有多个副本，最新的副本是指，副本中保存的版本号与Master中记录的Chunk的版本号一致。Chunk副本中的版本号是由Master节点下发的，所以Master节点知道，对于一个特定的Chunk，哪个版本号是最新的。所以Chunk的版本号在Master节点上需要保存在磁盘这种非易失的存储中。如果版本号在故障中丢失，这时，Master无法区分Chunk服务器的数据是旧的或者是新的。\n\n回到之前讲的，当客户端想要对文件进行追加，但是Master又不知道文件尾的Chunk对应的Primary在哪时，Master会等所有存储了最新Chunk版本的服务器集合完成，然后挑选一个作为Primary，其他的作为Secondary。之后，Master会增加版本号，并将版本号写入磁盘，这样就不会丢失这个版本号数据。接下来，Master节点会向Primary和Secondary副本对应的服务器发送消息并告诉它们，谁是Primary，谁是Secondary，Chunk的新版本是什么。Primary和Secondary服务器都会将版本号存储在本地的磁盘中。这样，当它们因为故障重启时，它们可以向Master报告本地保存的Chunk的实际版本号。\n\n所以，现在我们有了一个Primary，它可以接收来自客户端的请求，并将写请求应用到多个Chunk服务器中。之所以要管理Chunk的版本号，是因为这样Master可以将实际更新Chunk的能力转移给Primary服务器。并且在将版本号更新到Primary和Secondary服务器之后，如果Master节点故障重启，还是可以在相同的Primary和Secondary服务器上继续更新Chunk。\n\n现在，Master节点通知Primary和Secondary服务器，你们可以修改这个Chunk。它还给Primary一个租约，这个租约告诉Primary说，在接下来的60秒中，你将是Primary，60秒之后你必须停止成为Primary。这种机制可以确保我们不会同时有两个Primary，我们之后会再做讨论（之后的问答中有一个专门的问题讨论）。\n\n现在来看GFS论文的图2。假设现在Master节点告诉客户端谁是Primary，谁是Secondary，GFS提出了一种聪明的方法来实现写请求的执行序列。客户端会将要追加的数据发送给Primary和Secondary服务器，这些服务器会将数据写入到一个临时位置。所以最开始，这些数据不会追加到文件中。当所有的服务器都返回确认消息说，已经有了要追加的数据，客户端会向Primary服务器发送一条消息说，你和所有的Secondary服务器都有了要追加的数据，现在我想将这个数据追加到这个文件中。Primary服务器或许会从大量客户端收到大量的并发请求，Primary服务器会以某种顺序，一次只执行一个请求。对于每个客户端的追加数据请求（也就是写请求），Primary会查看当前文件结尾的Chunk，并确保Chunk中有足够的剩余空间，然后将客户端要追加的数据写入Chunk的末尾。并且，Primary会通知所有的Secondary服务器也将客户端要追加的数据写入在它们自己存储的Chunk末尾。这样，包括Primary在内的所有副本，都会收到通知将数据追加在Chunk的末尾。\n\n但是对于Secondary服务器来说，它们可能可以执行成功，也可能会执行失败，比如说磁盘空间不足，比如说故障了，比如说Primary发出的消息网络丢包了。如果Secondary实际真的将数据写入到了本地磁盘存储的Chunk中，它会回复“yes”给Primary。如果所有的Secondary服务器都成功将数据写入，并将“yes”回复给了Primary，并且Primary也收到了这些回复。Primary会向客户端返回写入成功。如果至少一个Secondary服务器没有回复Primary，或者回复了，但是内容却是：抱歉，一些不好的事情发生了，比如说磁盘空间不够，或者磁盘故障了，Primary会向客户端返回写入失败。\n\nGFS论文说，如果客户端从Primary得到写入失败，那么客户端应该重新发起整个追加过程。客户端首先会重新与Master交互，找到文件末尾的Chunk；之后，客户端需要重新发起对于Primary和Secondary的数据追加操作。\n\n#### GFS写文件 Write File 2\n\n这部分主要是写文件操作的问答\n\n> 待续\n\n#### GFS的一致性\n\n这里最重要的部分就是重复我们刚刚讨论过的内容。\n\n当我们追加数据时，面对Chunk的三个副本，当客户端发送了一个追加数据的请求，要将数据A追加到文件末尾，所有的三个副本，包括一个Primary和两个Secondary，都成功的将数据追加到了Chunk，所以Chunk中的第一个记录是A。\n\n![微信截图_20201114161415](C:\\Users\\jxhnw\\Desktop\\images\\微信截图_20201114161415.png)\n\n假设第二个客户端加入进来，想要追加数据B，但是由于网络问题发送给某个副本的消息丢失了。所以，追加数据B的消息只被两个副本收到，一个是Primary，一个是Secondary。这两个副本都在文件中追加了数据B，所以，现在我们有两个副本有数据B，另一个没有。\n\n![微信截图_20201114161458](C:\\Users\\jxhnw\\Desktop\\images\\微信截图_20201114161458.png)\n\n之后，第三个客户端想要追加数据C，并且第三个客户端记得下图中左边第一个副本是Primary。Primary选择了偏移量，并将偏移量告诉Secondary，将数据C写在Chunk的这个位置。三个副本都将数据C写在这个位置。\n\n![微信截图_20201114161601](C:\\Users\\jxhnw\\Desktop\\images\\微信截图_20201114161601.png)\n\n对于数据B来说，客户端会收到写入失败的回复，客户端会重发写入数据B的请求。所以，第二个客户端会再次请求追加数据B，或许这次数据没有在网络中丢包，并且所有的三个副本都成功追加了数据B。现在三个副本都在线，并且都有最新的版本号。\n\n![微信截图_20201114161638](C:\\Users\\jxhnw\\Desktop\\images\\微信截图_20201114161638.png)\n\n之后，如果一个客户端读文件，则读取到的内容取决于读取的是Chunk的哪个副本。客户端总共可以看到三条数据，但是取决于不同的副本，读取数据的顺序是不一样的。\n\n或许最坏的情况是，一些客户端写文件时，因为其中一个Secondary未能成功执行数据追加操作，客户端从Primary收到写入失败的回复。在客户端重新发送写文件请求之前，客户端就故障了。所以，你有可能进入这种情形：数据D出现在某些副本中，而其他副本则完全没有。\n\n在GFS的这种工作方式下，如果Primary返回写入成功，那么一切都还好，如果Primary返回写入失败，就不是那么好了。Primary返回写入失败会导致不同的副本有完全不同的数据。\n\n>提问：为什么GFS要设计成多个副本不一致？\n>\n>Robert教授：不明白GFS设计者为什么这么做。GFS可以设计成多个副本完全精确同步的，在lab2和lab3中设计的系统，其中的副本是同步的。你们也会知道，为了保持同步，你们要使用各种各样的技术。\n\nGFS这样设计的理由是足够的简单，但是同时也给应用程序暴露了一些奇怪的数据。这里希望为应用程序提供一个相对简单的写入接口，但应用程序需要容忍读取数据的乱序。如果应用程序不能容忍乱序，应用程序要么可以通过在文件中写入序列号，这样读取的时候能自己识别顺序。\n\n最后，让我花一分钟来介绍GFS在它生涯的前5-10年在Google的出色表现，总的来说，它取得了巨大的成功，许多许多Google的应用都使用了它，许多Google的基础架构，例如BigTable和MapReduce是构建在GFS之上，所以GFS在Google内部广泛被应用。它最严重的局限可能在于，它只有一个Master节点，会带来以下问题：\n\n- Master节点必须为每个文件，每个Chunk维护表单，随着GFS的应用越来越多，这意味着涉及的文件也越来越多，最终Master会耗尽内存来存储文件表单。你可以增加内存，但是单台计算机的内存也是有上限的。所以，这是人们遇到的最早的问题。\n- 除此之外，单个Master节点要承载数千个客户端的请求，而Master节点的CPU每秒只能处理数百个请求，尤其Master还需要将部分数据写入磁盘，很快，客户端数量超过了单个Master的能力。\n- 另一个问题是，应用程序发现很难处理GFS奇怪的语义（本节最开始介绍的GFS的副本数据的同步，或者可以说不同步）。\n- 最后一个问题是，从我们读到的GFS论文中，Master节点的故障切换不是自动的。GFS需要人工干预来处理已经永久故障的Master节点，并更换新的服务器，这可能需要几十分钟甚至更长的而时间来处理。对于某些应用程序来说，这个时间太长了。\n\n### L4 Primary-Backup Replication\n\n#### 复制 Replication\n\n这节主要讲了关于容错（Fault-Tolerance）和复制（Replication）的内容。\n\n容错是为了用来提高可用性。当服务出现故障，例如硬件和网路故障，我们仍然想提供服务，这时候就需要用到复制这个工具。但是，复制也不是万能的，复制能解决什么呢？\n\n复制能解决单台计算机的故障，指单台计算机的fail-stop。例如单纯的停止运行，电源或者网络失效。\n\n但是复制不能处理软件中的bug和硬件中的缺陷。如果软件或者硬件有bug，那么复制对我们没有任何帮助。\n\n当然，足够幸运的话，复制也可以处理一些硬件和软件的bug。总的来说，我们还是只能期望复制能处理fail-stop错误。\n\n另一个关于复制的问题：复制所需的资源消耗是否值得？\n\n#### 状态转移和复制状态机\n\n复制有两种方法：**状态转移**（State Transfer）和**复制状态机**（Replicated State Machine），这门课中我们主要介绍后者。\n\n如果有一个服务器的两个副本，让其保持同步，这样Primary出现故障的时候，Backup有所有的信息，就可以接管服务。状态转移的思想：Primary将自己完整的状态（比如内存中的内容），拷贝并发送给Backup。当Primary故障了，Backup就从保存的最新的状态开始运行。VMware FT没有采用这种方法，因为需要通过网络发送的数据量太多。为了提升效率，只发送上次同步后变更的内容就行了。\n\n复制状态机基于：我们想复制的大部分的服务或者计算机软件都有一些确定的内部操作，不确定的部分是外部的输入。通常情况下，如果一台计算机没有外部影响，它只是一个接一个的执行指令，每条指令执行的是计算机中内存和寄存器上确定的函数，只有当外部事件干预时，才会发生一些预期外的事。\n\n所以，复制状态机不会在不同的副本之间发送状态，相应的，它只会从Primary将这些外部事件发送给Backup。通常来说，如果有两台计算机，如果它们从相同的状态开始，并且它们以相同的顺序，在相同的时间，看到了相同的输入，那么它们会一直互为副本，并且一直保持一致。\n\n状态转移传输的是可能是内存，而复制状态机会将来自客户端的操作或者其他外部事件，从Primary传输到Backup。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115154354.png\" width=\"500px\"> </div>\n\n人们倾向于使用复制状态机的原因是，通常来说，外部操作或者事件比服务的状态要小。\n\n有趣的是，或许你已经注意到了，VMware FT论文讨论的都是复制状态机，并且只涉及了单核CPU，目前还不确定文中的方案如何扩展到多核处理器中。在多核的机器中，两个核交互处理指令的行为是不确定的，所以就算Primary和Backup执行相同的指令，在多核的机器中，它们也不一定产生相同的结果。\n\n回到什么样的状态需要被复制这个话题。VMware FT论文对这个问题有一个非常有趣的回答。它会复制机器的完整状态，这包括了所有的内存，所有的寄存器。这是一个非常详细的复制方案，Primary和Backup，即使在最底层也是完全一样的。对于复制方案来说，这种类型是非常少见的。总的来说，大部分场景都是应用程序级别的复制，就像GFS和其他这门课程中会学习的其他论文一样。\n\nVMware FT的独特之处在于，它从机器级别实现复制，因此它不关心你在机器上运行什么样的软件，它就是复制底层的寄存器和内存。\n\n#### VMware FT工作原理\n\nVMware FT需要两个物理服务器。将Primary和Backup运行在一台服务器的两个虚拟机里面毫无意义，因为容错本来就是为了能够抵御硬件故障。所以，你至少需要两个物理服务器运行VMM，Primary在其中一个物理服务器上，Backup在另一个物理服务器上。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115161607.png\" width=\"500px\"> </div>\n\n两个物理服务器上的VMM会为每个虚拟机分配一段内存，这两段内存的镜像需要完全一致，或者我们的目的就是让Primary和Backup的内存镜像完全一致。所以现在，我们有两个物理服务器，它们每一个都运行了一个虚拟机，每个虚拟机里面都有我们关心的服务的一个拷贝。我们假设有一个网络连接了这两个物理服务器。\n\n![微信截图_20201115161820](C:\\Users\\jxhnw\\Desktop\\images\\微信截图_20201115161820.png)\n\n此外，在这个LAN上，还有一些客户端。所以，基本的工作流程是，我们假设这两个副本，或者说这两个虚拟机：Primary和Backup，互为副本。某些我们服务的客户端，向Primary发送了一个请求，这个请求以网络数据包的形式发出。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115162121.png\" width=\"500px\"> </div>\n\n这个网络数据包产生一个中断，之后这个中断送到了VMM。VMM可以发现这是一个发给我们的多副本服务的一个输入，所以这里VMM会做两件事情：\n\n- 在虚拟机的Guest操作系统中，模拟网络数据包到达的中断，以将相应的数据送给应用程序的Primary副本。\n- 除此之外，因为这是一个多副本虚拟机的输入，VMM会将网络数据包拷贝一份，并通过网络送给Backup虚机所在的VMM。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115162252.png\" width=\"500px\"> </div>\n\nBackup虚机所在的VMM知道这是发送给Backup虚机的网络数据包，它也会在Backup虚机中模拟网络数据包到达的中断，以将数据发送给应用程序的Backup。所以现在，Primary和Backup都有了这个网络数据包，它们有了相同的输入，再加上许多细节，它们将会以相同的方式处理这个输入，并保持同步。\n\n当然，虚机内的服务会回复客户端的请求。在Primary虚机里面，服务会生成一个回复报文，并通过VMM在虚机内模拟的虚拟网卡发出。之后VMM可以看到这个报文，它会实际的将这个报文发送给客户端。\n\n另一方面，由于Backup虚机运行了相同顺序的指令，它也会生成一个回复报文给客户端，并将这个报文通过它的VMM模拟出来的虚拟网卡发出。但是它的VMM知道这是Backup虚机，会丢弃这里的回复报文。所以这里，Primary和Backup都看见了相同的输入，但是只有Primary虚机实际生成了回复报文给客户端。\n\n这里有一个术语，VMware FT论文中将Primary到Backup之间同步的数据流的通道称之为Log Channel。虽然都运行在一个网络上，但是这些从Primary发往Backup的事件被称为Log Channel上的Log Event/Entry。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115162450.png\" width=\"500px\"> </div>\n\n当Primary因为故障停止运行时，FT（Fault-Tolerance）就开始工作了。从Backup的角度来说，它将不再收到来自于Log Channel上的Log条目。实际中，Backup每秒可以收到很多条Log，其中一个来源就是来自于Primary的定时器中断。每个Primary的定时器中断都会生成一条Log条目并发送给Backup，这些定时器中断每秒大概会有100次。所以，如果Primary虚机还在运行，Backup必然可以期望从Log Channel收到很多消息。如果Primary虚机停止运行了，那么Backup的VMM就会说：天，我都有1秒没有从Log Channel收到任何消息了，Primary一定是挂了或者出什么问题了。当Backup不再从Primary收到消息，VMware FT论文的描述是，Backup虚机会上线（Go Alive）。这意味着，Backup不会再等待来自于Primary的Log Channel的事件，Backup的VMM会让Backup自由执行，而不是受来自于Primary的事件驱动。Backup的VMM会在网络中做一些处理（猜测是发GARP），让后续的客户端请求发往Backup虚机，而不是Primary虚机。同时，Backup的VMM不再会丢弃Backup虚机的输出。当然，它现在已经不再是Backup，而是Primary。所以现在，左边的虚机直接接收输入，直接产生输出。到此为止，Backup虚机接管了服务。\n\n类似的一个场景，虽然没那么有趣，但是也需要能正确工作。如果Backup虚机停止运行，Primary也需要用一个类似的流程来抛弃Backup，停止向它发送事件，并且表现的就像是一个单点的服务，而不是一个多副本服务一样。所以，只要有一个因为故障停止运行，并且不再产生网络流量时，Primary和Backup中的另一个都可以上线继续工作。\n\n#### 非确定性事件 Non-Deterministic Events\n\n目前为止，我们都假设只要Backup虚机也看到了来自客户端的请求，经过同样的执行过程，那么它就会与Primary保持一致，但是这背后其实有很多很重要的细节。就如其他同学之前指出的一样，其中一个问题是存在非确定性（Non-Deterministic）的事件。虽然通常情况下，代码执行都是直接明了的，但并不是说计算机中每一个指令都是由计算机内存的内容而确定的行为。这一节，我们来看一下不由当前内存直接决定的指令。如果我们不够小心，这些指令在Primary和Backup的运行结果可能会不一样。这些指令就是所谓的非确定性事件。所以，设计者们需要弄明白怎么让这一类事件能在Primary和Backup之间同步。\n\n非确定性事件可以分成几类:\n\n- 客户端的输入。假设有一个来自客户端的输入，这个输入随时可能会送法，所以它是不可预期的。客户端请求何时送达， 会有什么样的内容，并不取决于服务当前的状态。我们讨论的系统专注于通过网络来进行交互，所以这里的系统输入的唯一格式就是网络数据包。所以当我们说输入的时候，我们实际上是指接收到了一个网络数据包。而一个网络数据包对于我们来说有两部分，一个是数据包中的数据，另一个是提示数据包送达了的中断。当网络数据包送达时，通常网卡的DMA（Direct Memory Access）会将网络数据包的内容拷贝到内存，之后触发一个中断。操作系统会在处理指令的过程中消费这个中断。对于Primary和Backup来说，这里的步骤必须看起来是一样的，否则它们在执行指令的时候就会出现不一致。所以，这里的问题是，中断在什么时候，具体在指令流中的哪个位置触发？对于Primary和Backup，最好要在相同的时间，相同的位置触发，否则执行过程就是不一样的，进而会导致它们的状态产生偏差。所以，我们不仅关心网络数据包的内容，还关心中断的时间。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116163150.png\" width=\"500px\"> </div>\n\n- 另外，有一些指令在不同的计算机上的行为是不一样的，这一类指令称为怪异指令，比如：\n  - 随机数生成器\n  - 获取当前时间的指令，在不同时间调用会得到不同的结果\n  - 获取计算机的唯一ID\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116163420.png\" width=\"500px\"> </div>\n\n- 另外一个常见的非确定事件，在VMware FT论文中没有讨论，就是多CPU的并发。我们现在讨论的都是一个单进程系统，没有多CPU多核这种事情。之所以多核会导致非确定性事件，是因为当服务运行在多CPU上时，指令在不同的CPU上会交织在一起运行，进而产生的指令顺序是不可预期的。所以如果我们在Backup上运行相同的代码，并且代码并行运行在多核CPU上，硬件会使得指令以不同（于Primary）的方式交织在一起，而这会引起不同的运行结果。假设两个核同时向同一份数据请求锁，在Primary上，核1得到了锁；在Backup上，由于细微的时间差别核2得到了锁，那么执行结果极有可能完全不一样，这里其实说的就是（在两个副本上）不同的线程获得了锁。所以，多核是一个巨大的非确定性事件来源，VMware FT论文完全没有讨论它，并且它也不适用与我们这节课的讨论。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116163754.png\" width=\"500px\"> </div>\n\n> 学生提问：如何确保VMware FT管理的服务只使用单核？\n> Robert教授：服务不能使用多核并行计算。硬件几乎可以肯定是多核并行的，但是这些硬件在VMM之下。在这篇论文中，VMM暴露给运行了Primary和Backup虚机操作系统的硬件是单核的。我猜他们也没有一种简单的方法可以将这里的内容应用到一个多核的虚拟机中。\n\n所有的事件都需要通过Log Channel，从Primary同步到Backup。有关日志条目的格式在论文中没有怎么描述，但是我（Robert教授）猜日志条目中有三样东西：\n\n1. 事件发生时的指令序号。因为如果要同步中断或者客户端输入数据，最好是Primary和Backup在相同的指令位置看到数据，所以我们需要知道指令序号。这里的指令号是自机器启动以来指令的相对序号，而不是指令在内存中的地址。比如说，我们正在执行第40亿零79条指令。所以日志条目需要有指令序号。对于中断和输入来说，指令序号就是指令或者中断在Primary中执行的位置。对于怪异的指令（Weird instructions），比如说获取当前的时间来说，这个序号就是获取时间这条指令执行的序号。这样，Backup虚机就知道在哪个指令位置让相应的事件发生。\n2. 日志条目的类型，可能是普通的网络数据输入，也可能是怪异指令。\n3. 最后是数据。如果是一个网络数据包，那么数据就是网络数据包的内容。如果是一个怪异指令，数据将会是这些怪异指令在Primary上执行的结果。这样Backup虚机就可以伪造指令，并提供与Primary相同的结果。\n\n举个例子，Primary和Backup两个虚机内部的guest操作系统需要在模拟的硬件里有一个定时器，能够每秒触发100次中断，这样操作系统才可以通过对这些中断进行计数来跟踪时间。因此，这里的定时器必须在Primary和Backup虚机的完全相同位置产生中断，否则这两个虚机不会以相同的顺序执行指令，进而可能会产生分歧。所以，在运行了Primary虚机的物理服务器上，有一个定时器，这个定时器会计时，生成定时器中断并发送给VMM。在适当的时候，VMM会停止Primary虚机的指令执行，并记下当前的指令序号，然后在指令序号的位置插入伪造的模拟定时器中断，并恢复Primary虚机的运行。之后，VMM将指令序号和定时器中断再发送给Backup虚机。虽然Backup虚机的VMM也可以从自己的物理定时器接收中断，但是它并没有将这些物理定时器中断传递给Backup虚机的guest操作系统，而是直接忽略它们。当来自于Primary虚机的Log条目到达时，Backup虚机的VMM配合特殊的CPU特性支持，会使得物理服务器在相同的指令序号处产生一个定时器中断，之后VMM获取到这个中断，并伪造一个假的定时器中断，并将其送入Backup虚机的guest操作系统，并且这个定时器中断会出现在与Primary相同的指令序号位置。\n\n>学生提问：这里的操作依赖硬件的定制吗？（实际上我听不清，猜的）\n>Robert教授：是的，这里依赖于CPU的一些特殊的定制，这样VMM就可以告诉CPU，执行1000条指令之后暂停一下，方便VMM将伪造的中断注入，这样Backup虚机就可以与Primary虚机在相同的指令位置触发相同的中断，执行相同的指令。之后，VMM会告诉CPU恢复执行。这里需要一些特殊的硬件，但是现在看起来所有的Intel芯片上都有这个功能，所以也不是那么的特殊。或许15年前，这个功能还是比较新鲜的，但是现在来说就比较正常了。现在这个功能还有很多其他用途，比如说做CPU时间性能分析，可以让处理器每1000条指令中断一次，这里用的是相同的硬件让微处理器每1000条指令产生一个中断。所以现在，这是CPU中非常常见的一个小工具。\n>学生提问：如果Backup领先了Primary会怎么样？\n>Robert教授： 场景可能是这样，Primary即将在第100万条指令处中断，但是Backup已经执行了100万零1条指令了。如果我们让这种场景发生，那么Primary的中断传输就太晚了。如果我们允许Backup执行领先Primary，就会使得中断在Backup中执行位置落后于Primary。所以我们不能允许这种情况发生，我们不能允许Backup在执行指令时领先于Primary。\n>VMware FT是这么做的。它会维护一个来自于Primary的Log条目的等待缓冲区，如果缓冲区为空，Backup是不允许执行指令的。如果缓冲区不为空，那么它可以根据Log的信息知道Primary对应的指令序号，并且会强制Backup虚机最多执行指令到这个位置。所以，Backup虚机的CPU总是会被通知执行到特定的位置就停止。Backup虚机只有在Log缓冲区中有数据才会执行，并且只会执行到Log条目对应的指令序号。在Primary产生的第一个Log，并且送达Backup之前，Backup甚至都不能执行指令，所以Backup总是落后于Primary至少一个Log。如果物理服务器的资源占用过多，导致Backup执行变慢，那么Backup可能落后于Primary多个Log条目。\n\n网络数据包送达时，有一个细节会比较复杂。当网络数据包到达网卡时，如果我们没有运行虚拟机，网卡会将网络数据包通过DMA的方式送到计算机的关联内存中。现在我们有了虚拟机，并且这个网络数据包是发送给虚拟机的，在虚拟机内的操作系统可能会监听DMA并将数据拷贝到虚拟机的内存中。因为VMware的虚拟机设计成可以支持任何操作系统，我们并不知道网络数据包到达时操作系统会执行什么样的操作，有的操作系统或许会真的监听网络数据包拷贝到内存的操作。\n\n我们不能允许这种情况发生。如果我们允许网卡直接将网络数据包DMA到Primary虚机中，我们就失去了对于Primary虚机的时序控制，因为我们也不知道什么时候Primary会收到网络数据包。所以，实际中，物理服务器的网卡会将网络数据包拷贝给VMM的内存，之后，网卡中断会送给VMM，并说，一个网络数据包送达了。这时，VMM会暂停Primary虚机，记住当前的指令序号，将整个网络数据包拷贝给Primary虚机的内存，之后模拟一个网卡中断发送给Primary虚机。同时，将网络数据包和指令序号发送给Backup。Backup虚机的VMM也会在对应的指令序号暂停Backup虚机，将网络数据包拷贝给Backup虚机，之后在相同的指令序号位置模拟一个网卡中断发送给Backup虚机。这就是论文中介绍的Bounce Buffer机制。\n\n#### 输出控制 Output Rule\n\n对于VMware FT系统的输出，也是值得说一下的。在这个系统中，唯一的输出就是对于客户端请求的响应。客户端通过网络数据包将数据送入，服务器的回复也会以网络数据包的形式送出。我之前说过，Primary和Backup虚机都会生成回复报文，之后通过模拟的网卡送出，但是**只有Primary虚机才会真正的将回复送出**，而Backup虚机只是将回复简单的**丢弃**掉。\n\n好吧，真实情况会复杂一些。假设我们正在跑一个简单的数据库服务器，这个服务器支持一个计数器自增操作，工作模式是这样，客户端发送了一个自增的请求，服务器端对计数器加1，并返回新的数值。假设最开始一切正常，在Primary和Backup中的计数器都存了10。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201227.png\" width=\"500px\"> </div>\n\n\n\n现在，局域网的一个客户端发送了一个自增的请求给Primary。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201309.png\" width=\"500px\"> </div>\n\n这个请求在Primary虚机的软件中执行，Primary会发现，现在的数据是10，我要将它变成11，并回复客户端说，现在的数值是11。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201348.png\" width=\"500px\"> </div>\n\n这个请求也会发送给Backup虚机，并将它的数值从10改到11。Backup也会产生一个回复，但是这个回复会被**丢弃**，这是我们期望发生的。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201418.png\" width=\"500px\"> </div>\n\n但是，你需要考虑，如果在一个不恰当的时间，出现了故障会怎样？在这门课程中，你需要始终考虑，故障的最坏场景是什么，故障会导致什么结果？在这个例子中，假设Primary确实生成了回复给客户端，但是之后立马崩溃了。更糟糕的是，现在网络不可靠，Primary发送给Backup的Log条目在Primary崩溃时也丢包了。那么现在的状态是，客户端收到了回复说现在的数据是11，但是Backup虚机因为没有看到客户端请求，所以它保存的数据还是10。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201524.png\" width=\"500px\"> </div>\n\n现在，因为察觉到Primary崩溃了，Backup接管服务。这时，客户端再次发送一个自增的请求，这个请求发送到了原来的Backup虚机，它会将自身的数值从10增加到11，并产生第二个数据是11的回复给客户端。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201559.png\" width=\"500px\"> </div>\n\n如果客户端比较前后两次的回复，会发现一个明显不可能的场景（两次自增的结果都是11）。\n\n因为VMware FT的优势就是在不修改软件，甚至软件都不需要知道复制的存在的前提下，就能支持容错，所以我们也不能修改客户端让它知道因为容错导致的副本切换触发了一些奇怪的事情。在VMware FT场景里，我们没有修改客户端这个选项，因为整个系统只有在不修改服务软件的前提下才有意义。所以，前面的例子是个大问题，我们不能让它实际发生。有人还记得论文里面是如何防止它发生的吗？\n\n论文里的解决方法就是控制输出（Output Rule）。直到Backup虚机确认收到了相应的Log条目，Primary虚机不允许生成任何输出。让我们回到Primary崩溃前，并且计数器的内容还是10，Primary上的正确的流程是这样的：\n\n1. 客户端输入到达Primary。\n2. Primary的VMM将输入的拷贝发送给Backup虚机的VMM。所以有关输入的Log条目在Primary虚机生成输出之前，就发往了Backup。之后，这条Log条目通过网络发往Backup，但是过程中有可能丢失。\n3. Primary的VMM将输入发送给Primary虚机，Primary虚机生成了输出。现在Primary虚机的里的数据已经变成了11，生成的输出也包含了11。但是VMM不会无条件转发这个输出给客户端。\n4. Primary的VMM会等到之前的Log条目都被Backup虚机确认收到了才将输出转发给客户端。所以，包含了客户端输入的Log条目，会从Primary的VMM送到Backup的VMM，Backup的VMM不用等到Backup虚机实际执行这个输入，就会发送一个表明收到了这条Log的ACK报文给Primary的VMM。当Primary的VMM收到了这个ACK，才会将Primary虚机生成的输出转发到网络中。\n\n所以，这里的核心思想是，确保在客户端看到对于请求的响应时，Backup虚机一定也看到了对应的请求，或者说至少在Backup的VMM中缓存了这个请求。这样，我们就不会陷入到这个奇怪的场景：客户端已经收到了回复，但是因为有故障发生和副本切换，新接手的副本完全不知道客户端之前收到了对应的回复。\n\n如果在上面的步骤2中，Log条目通过网络发送给Backup虚机时丢失了，然后Primary虚机崩溃了。因为Log条目丢失了， 所以Backup节点也不会发送ACK消息。所以，如果Log条目的丢失与Primary的崩溃同一时间发生，那么Primary必然在VMM将回复转发到网络之前就崩溃了，所以客户端也就不会收到任何回复，所以客户端就不会观察到任何异常。这就是输出控制（Output rule）。\n\n所以，Primary会等到Backup已经有了最新的数据，才会将回复返回给客户端。这几乎是所有的复制方案中对于性能产生伤害的地方。这里的同步等待使得Primary不能超前Backup太多，因为如果Primary超前了并且又故障了，对应的就是Backup的状态落后于客户端的状态。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201957.png\" width=\"500px\"> </div>\n\n所以，几乎每一个复制系统都有这个问题，在某个时间点，Primary必须要停下来等待Backup，这对于性能是实打实的限制。即使副本机器在相邻的机架上，Primary节点发送消息并收到回复仍然需要0.5毫秒的延时。如果我们想要能承受类似于地震或者城市范围内的断电等问题，Primary和Backup需要在不同的城市，之间可能有5毫秒的差距。如果我们将两个副本放置在不同的城市，每次生成一个输出时，都需要至少等待5毫秒，等Backup确认收到了前一个Log条目，然后VMM才能将输出发送到网络。对于一些低请求量的服务，这不是问题。但是如果我们的服务要能够每秒处理数百万个请求，那就会对我们的性能产生巨大的伤害。\n\n所以如果条件允许，人们会更喜欢使用在更高层级做复制的系统（详见4.2 最后两段）。这样的复制系统可以理解操作的含义，这样的话Primary虚机就不必在每个网络数据包暂停同步一下，而是可以在一个更高层级的操作层面暂停来做同步，甚至可以对一些只读操作不做暂停。但是这就需要一些特殊的应用程序层面的复制机制。\n\n>学生提问：其实不用暂停Primary虚机的执行，只需要阻止Primary虚机的输出就行吧？\n>Robert教授：你是对的。所以，这里的同步等待或许没有那么糟糕。但是不管怎么样，在一个系统中，本来可以几微秒响应一个客户端请求，而现在我们需要先更新另一个城市的副本，这可能会将一个10微秒的操作变成10毫秒。\n>学生提问：这里虽然等待时间比较长，如果提高请求的并发度，是不是还是可以有高性能？\n>Robert教授：如果你有大量的客户端并发的发送请求，那么你或许还是可以在高延时的情况下获得高的吞吐量，但是就需要你有足够聪明的设计和足够的幸运。\n>学生提问：可以不可以将Log保留在Primary虚机对应的物理服务器内存中，这样就不用长时间的等待了。\n>Robert教授：这是一个很好的想法。但是如果你这么做的话，物理服务器宕机，Log就丢失了。通常，如果服务器故障，就认为服务器中的所有数据都没了，其中包括内存的内容。如果故障是某人不小心将服务器的电源拔了，即使Primary对应的物理服务器有电池供电的RAM，Backup也没办法从其获取Log。实际上，系统会在Backup的内存中记录Log。为了保证系统的可靠性，Primary必须等待Backup的ACK才真正输出。你这里的想法很好，但是我们还是不能使用Primary的内存来存Log。\n>学生提问：能不能输入送到Primary，输出从Backup送出？\n>Robert教授：这是个很聪明的想法。我之前完全没有想到过这点。它或许可以工作，我不确定，但是这很有意思。\n\n#### 重复输出 Duplicated Output\n\n还有一种可能的情况是，回复报文已经从VMM发往客户端了，所以客户端收到了回复，但是这时Primary虚机崩溃了。而在Backup侧，客户端请求还堆积在Backup对应的VMM的Log等待缓冲区（详见4.4倒数第二个学生提问），也就是说客户端请求还没有真正发送到Backup虚机中。当Primary崩溃之后，Backup接管服务，Backup首先需要消费所有在等待缓冲区中的Log，以保持与Primay在相同的状态，这样Backup才能以与Primary相同的状态接管服务。假设最后一条Log条目对应来自客户端的请求，那么Backup会在处理完客户端请求对应的中断之后，再上线接管服务。这意味着，Backup会将自己的计数器增加到11（原来是10，处理完客户端的自增请求变成11），并生成一个输出报文。因为这时，Backup已经上线接管服务，它生成的输出报文会被它的VMM发往客户端。这样客户端会收到两个内容是11的回复。如果这里的情况真的发生了，那么明显这也是一个异常行为，因为不可能在运行在单个服务器的服务上发生这种行为。\n\n好消息是，几乎可以肯定，客户端通过TCP与服务进行交互，也就是说客户端请求和回复都通过TCP Channel收发。当Backup接管服务时，因为它的状态与Primary相同，所以它知道TCP连接的状态和TCP传输的序列号。当Backup生成回复报文时，这个报文的TCP序列号与之前Primary生成报文的TCP序列号是一样的，这样客户端的TCP栈会发现这是一个重复的报文，它会在TCP层面丢弃这个重复的报文，用户层的软件永远也看不到这里的重复。\n\n这里可以认为是异常的场景，并且被意外的解决了。但是事实上，对于任何有主从切换的复制系统，基本上不可能将系统设计成不产生重复输出。为了避免重复输出，有一个选项是在两边都不生成输出，但这是一个非常糟糕的做法（因为对于客户端来说就是一次失败的请求）。当出现主从切换时，切换的两边都有可能生成重复的输出，这意味着，某种程度上来说，所有复制系统的客户端需要一种重复检测机制。这里我们使用的是TCP来完成重复检测，如果我们没有TCP，那就需要另一种其他机制，或许是应用程序级别的序列号。\n\n在lab2和lab3中，基本上可以看到我们前面介绍的所有内容，例如输出控制，你会设计你的复制状态机。\n\n> 学生提问：太长了，听不太清，直接看回答吧。\n> Robert教授：第一部分是对的。当Backup虚机消费了最后一条Log条目，这条Log包含了客户端的请求，并且Backup上线了。从这个时间点开始，我们不需要复制任何东西，因为Primary已经挂了，现在没有任何其他副本。\n> 如果Primary向客户端发送了一个回复报文，之后，Primary或者客户端关闭了TCP连接，所以现在客户端侧是没有TCP连接的。Primary挂了之后，Backup虚机还是有TCP连接的信息。Backup执行最后一条Log，Backup会生成一个回复报文，但是这个报文送到客户端时，客户端并没有相应的TCP连接信息。客户端会直接丢弃报文，就像这个报文不存在一样。哦不！这里客户端实际会发送一个TCP Reset，这是一个类似于TCP error的东西给Backup虚机，Backup会处理这里的TCP Reset，但是没关系，因为现在只有一个副本，Backup可以任意处理，而不用担心与其他副本有差异。实际上，Backup会直接忽略这个报文。现在Backup上线了，在这个复制系统里面，它不受任何人任何事的限制。\n> 学生提问：Backup接手服务之后，对于之前的TCP连接，还能用相同的TCP源端口来发送数据吗（因为源端口一般是随机的）？\n> Robert教授：你可以这么认为。因为Backup的内存镜像与Primary的完全一致，所以它们会以相同的TCP源端口来发送数据，它们在每一件事情上都是一样的。它们发送的报文每一bit都是一样的。\n> 学生提问：甚至对于IP地址都会是一样的吗，毕竟这里涉及两个物理服务器？\n> Robert教授：在这个层面，物理服务器并没有IP地址。在我们的例子中，Primary虚机和Backup虚机都有IP地址，但是物理服务器和VMM在网络上基本是透明的。物理服务器上的VMM在网络上并没有自己的唯一标识。虚拟机有自己独立的操作系统和独立的TCP栈，但是对于IP地址和其他的关联数据，Primary和Backup是一样的（类似于HA VIP）。当虚机发送一个网络报文，它会以虚机的IP地址和MAC地址来发送，这些信息是直接透传到局域网的，而这正是我们想要的。所以Backup会生成与Primary完全一样的报文。这里有一些tricky，因为如果物理服务器都接在一个以太网交换机上，那么它们必然在交换机的不同端口上，在发生切换时，我们希望以太网交换机能够知道当前主节点在哪，这样才能正常的转发报文，这会有一些额外的有意思的事情。大部分时候，Primary和Backup都是生成相同的报文，并送出。\n> （注：早期的VMware虚机都是直接以VLAN或者Flat形式，通过DVS接入到物理网络，所以虚拟机的报文与物理机无关，可以直接在局域网发送。以太网交换机会维护MAC地址表，表明MAC地址与交换机端口的对应，因为Primary和Backup虚机的MAC地址一样，当主从切换时，这个表需要更新，这样同一个目的MAC地址，切换前是发往了Primary虚机所在的物理服务器对应的交换机端口，切换之后是发往了Backup虚机所在的物理服务器对应的交换机端口。交换机MAC地址表的切换通常通过虚机主动发起GARP来更新。）\n\n#### Test-and-Set 服务\n\n最后还有一个细节。我一直都假设Primary出现的是fail-stop故障（详见4.1最开始），但是这不是所有的情况。一个非常常见的场景就是，Primary和Backup都在运行，但是它们之间的网络出现了问题，同时它们各自又能够与一些客户端通信。这时，它们都会以为对方挂了，自己需要上线并接管服务。所以现在，我们对于同一个服务，有两个机器是在线的。因为现在它们都不向彼此发送Log条目，它们自然就出现了分歧。它们或许会因为接收了不同的客户端请求，而变得不一样。\n\n因为涉及到了计算机网络，那就可能出现上面的问题，而不仅仅是机器故障。如果我们同时让Primary和Backup都在线，那么我们现在就有了脑裂（Split Brain）。这篇论文解决这个问题的方法是，向一个外部的第三方权威机构求证，来决定Primary还是Backup允许上线。这里的第三方就是Test-and-Set服务。\n\nTest-and-Set服务不运行在Primary和Backup的物理服务器上，VMware FT需要通过网络支持Test-and-Set服务。这个服务会在内存中保留一些标志位，当你向它发送一个Test-and-Set请求，它会设置标志位，并且返回旧的值。Primary和Backup都需要获取Test-and-Set标志位，这有点像一个锁。为了能够上线，它们或许会同时发送一个Test-and-Set请求，给Test-and-Set服务。当第一个请求送达时，Test-and-Set服务会说，这个标志位之前是0，现在是1。第二个请求送达时，Test-and-Set服务会说，标志位已经是1了，你不允许成为Primary。对于这个Test-and-Set服务，我们可以认为运行在单台服务器。当网络出现故障，并且两个副本都认为对方已经挂了时，Test-and-Set服务就是一个仲裁官，决定了两个副本中哪一个应该上线。\n\n对于这种机制有什么问题吗？\n\n>学生提问：只有在网络故障的时候才需要询问Test-and-Set服务吗？\n>Robert教授：即使没有网络分区，在所有情况下，两个副本中任意一个觉得对方挂了，哪怕对方真的挂了，想要上线的那个副本仍然需要获得Test-and-Set服务的锁。在6.824这门课程中，有个核心的规则就是，你无法判断另一个计算机是否真的挂了，你所知道的就是，你无法从那台计算机收到网络报文，你无法判断是因为那台计算机挂了，还是因为网络出问题了导致的。所以，Backup看到的是，我收不到来自Primary的网络报文，或许Primary挂了，或许还活着。Primary或许也同时看不到Backup的报文。所以，如果存在网络分区，那么必然要询问Test-and-Set服务。但是实际上没人知道现在是不是网络分区，所以每次涉及到主从切换，都需要向Test-and-Set服务进行查询。所以，当副本想要上线的时候，Test-and-Set服务必须要在线，因为副本需要获取这里的Test-and-Set锁。现在Test-and-Set看起来像是个单点故障（Single-Point-of-Failure）。虽然VMware FT尝试构建一个复制的容错的系统，但是最后，主从切换还是依赖于Test-and-Set服务在线，这有点让人失望。我强烈的认为，Test-and-Set服务本身也是个复制的服务，并且是容错的。几乎可以肯定的是，VMware非常乐意向你售卖价值百万的高可用存储系统，系统内使用大量的复制服务。因为这里用到了Test-and-Set服务，我猜它也是复制的。\n\n你们将要在Lab2和Lab3构建的系统，会帮助你们构建容错的Test-and-Set服务，所以这个问题可以轻易被解决。","source":"_posts/6.824/distributed-system-notes-1.md","raw":"---\ntitle: '[6.824] 分布式笔记'\ndate: 2020-12-6 16:48\ntags:\n- 6.824\ncategories:\n- 分布式\n---\n\n## MIT 6.824 分布式系统笔记\n\n### L3 GFS\n\n#### 分布式的难点\n\n人们设计大型分布式系统或大型存储系统出发点通常是，他们想获取巨大的性能加成，进而利用数百台计算机的资源来同时完成大量工作。因此，性能问题就成为了最初的诉求。 之后，很自然的想法就是将数据分割放到大量的服务器上，这样就可以并行的从多台服务器读取数据。我们将这种方式称之为分片（Sharding）。\n\n如果你在成百上千台服务器进行分片，你将会看见常态的故障。如果你有数千台服务器，那么总是会有一台服务器宕机，每天甚至每个小时都可能会发生错误。所以，我们需要自动化的方法而不是人工介入来修复错误。我们需要一个自动的容错系统，这就引出了容错这个话题（fault tolerance）。\n\n实现容错最有用的一种方法是使用复制，只需要维护2-3个数据的副本，当其中一个故障了，你就可以使用另一个。所以，如果想要容错能力，就得有复制（replication）。\n\n如果有复制，那就有了两份数据的副本。可以确定的是，如果你不小心，它们就会不一致。所以，你本来设想的是，有了两个数据副本，你可以任意使用其中一个副本来容错。但是如果你不够小心，两个数据的副本就不是完全一致，严格来说，它们就不再互为副本了。而你获取到的数据内容也将取决于你向哪个副本请求数据。这对于应用程序来说就有些麻烦了。所以，如果我们有了复制，我们就有不一致的问题（inconsistency）。\n\n通过聪明的设计，你可以避免不一致的问题，并且让数据看起来也表现的符合预期。但是为了达到这样的效果，你总是需要额外的工作，需要不同服务器之间通过网络额外的交互，而这样的交互会降低性能。所以如果你想要一致性，你的代价就是低性能。但这明显不是我们最开始所希望的。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111174832.png\" width=\"500px\"> </div>\n\n\n\n#### 一种分布式存储错误的设计\n\n对于强一致性或者好的一致性的设备，从应用程序或者客户端来看就像是在和一台服务器在通信。对于一个理想的强一致性模型，你看到的就像是只有一台服务器，一份数据，并且系统一次只做一件事情。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111211740.png\" width=\"500px\"> </div>\n\n上图表示了一个因服务端接收数据顺序不一样而可能出问题的系统。\n\n#### GFS的设计目标\n\nGFS的目标是构建一个大型的，快速的文件系统。并且这个文件系统是全局有效的，这样各种不同的应用程序都可以从中读取数据。\n\nGFS在各个方面对大型的顺序文件读写进行了定制。GFS只会顺序处理，不支持随机访问。\n\n#### GFS Master节点\n\n接下来是GFS的大致架构。\n\nGFS中只有一个Master节点在工作，Master节点保存了文件名和存储位置的对应关系。除此之外，还有大量的Chunk服务器。Master用来管理文件和Chunk的信息，而Chunk服务器用来存储实际的数据。Master节点知道每一个文件对应的Chunk的ID，这些Chunk是64MB大小，它们共同构成了一个文件。如果我有一个1GB的文件，那么Master节点就知道文件的第一个Chunk存储在哪，第二个Chunk存储在哪，等等。当我想读取这个文件中的任意一个部分时，我需要向Master节点查询对应的Chunk在哪个服务器上，之后我可以直接从Chunk服务器读取对应的Chunk数据。\n\nMaster节点内保存的数据内容，主要关心两个表单：\n\n1. 文件名 -> Chunk ID 或者 Chunk Handle数组的对应。这个表单告诉你，文件对应了哪些Chunk\n\n2. Chunk ID -> Chunk 数据 对应关系，包括了：\n\n   - 每个Chunk存储在哪些服务器上，所以这部分是Chunk服务器的列表\n- 每个Chunk当前的版本号，所以Master节点必须记住每个Chunk对应的版本号。\n   - 所有对于Chunk的写操作都必须在主Chunk（Primary Chunk）上顺序处理，主Chunk是Chunk的多个副本之一。所以，Master节点必须记住哪个Chunk服务器持有主Chunk。\n- 并且，主Chunk只能在特定的租约时间内担任主Chunk，所以，Master节点要记住主Chunk的租约过期时间\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111213312.png\" width=\"500px\"> </div>\n\n以上数据都在内存中，如果Master故障了，这些数据就都丢失了。为了能让Master重启而不丢失数据，Master节点会同时将数据存储在磁盘上。Master会在磁盘上存储Log，每次有数据变更时，Master会在磁盘的Log中追加一条记录，并生成CheckPoint（备份点）。\n\n1. Chunk Handle的数组（第一个表单）要保存在磁盘上。标记为NV（non-volatile 非易失）这个标记的数据会写到磁盘上\n\n2. Chunk服务器列表不用保存到磁盘上。因为Master节点重启之后可以与所有的Chunk服务器通信，并查询每个Chunk服务器存储了哪些Chunk，标记为V（volatile）\n\n3. 版本号要不要写入磁盘取决于GFS如何工作，我认为需要写入磁盘。之后讨论，先标记为NV\n\n4. 主Chunk的ID，可以确定不用写入磁盘，因为Master节点重启之后会忘记谁是主Chunk，这个时候，Master节点可以安全指定一个新的主Chunk。所以这里标记成V\n\n5. 类似的，租约过期时间也不用写入磁盘，标记成V\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111215459.png\" width=\"500px\"> </div>\n\n任何时候，如果文件扩展到达了一个新的64MB，需要新增一个Chunk或者由于指定了新的主Chunk而导致版本号更新了，Master节点需要向磁盘中的Log追加一条记录，我刚刚向这个文件添加了一个新的Chunk或者我刚刚修改了Chunk的版本号。\n\n> 这里在磁盘中维护Log而不是数据库的原因是，数据库本质上来说是某种B树（B-tree）或者Hash table，相比之下，追加Log会非常的高效，因为你可以将最近的多个Log记录一次性的写入磁盘。因为这些数据都是向同一个地址追加，这样只需要等待磁盘的磁碟旋转一次。而对于B树来说，每一份数据都需要在磁盘中随机找个位置写入。所以使用Log可以使得磁盘写入更快一些。\n\n当Master节点故障重启，并重建状态，你不会想要从Log的最开始重建状态，因为Log的最开始可能是很久以前。重启时，Master节点会从Log中的最近一个CheckPoint开始恢复，并逐条执行从CheckPoint开始的Log记录。\n\n#### GFS读文件 Read file\n\n有了之前的基础，接下来会列出GFS读和写的步骤，最后，介绍出现故障之后，系统是如何保持正确的行为。\n\n对于读请求来说，意味着应用或者GFS客户端有一个文件名和它想从文件的某个位置读取的偏移量（offset），应用程序会将这些信息发送给Master节点。Master节点会从自己的File表单中查询文件名，得到Chunk ID的数组。因为每个Chunk都是64MB，所以偏移量除以64MB就可以从数组中得到对应的Chunk ID。之后Master再从Chunk表单中找到存有Chunk的服务器列表，并将列表返回给客户端。所以分两步：\n\n1. 客户端-> 文件名 + 偏移量 -> Master\n2. Master-> Chunk handle + 服务器列表 -> 客户端\n\n现在客户端从服务器列表中挑选一个来读取数据。（论文中说客户端会选择一个网络上最近的服务器）客户端可能会连续多次读取同一个Chunk的不同位置。所以，客户端会缓存Chunk和服务器的对应关系，这样不用向Master一次次去请求相同的信息。\n\n接下来，客户端和Chunk通信，将Chunk Handle和偏移量发送给那个Chunk服务器。服务器找到数据，将数据返回给客户端。\n\n#### GFS写文件 Write File 1\n\nGFS写文件的过程更加复杂。我们只讨论客户端的记录追加（Record Append），想把buffer中的数据，追加到这个文件名对应的文件中。对于写文件，客户端会向Master节点发送请求说：我想向这个文件名对应的文件追加数据，请告诉我文件中最后一个Chunk的位置。\n\n当有多个客户端同时写同一个文件时，一个客户端并不能知道文件究竟有多长。这个时候，客户端可以向Master节点查询哪个Chunk服务器保存了文件的最后一个Chunk。对于读文件来说，可以从任何最新的Chunk副本读取数据，但是对于写文件来说，必须要通过Chunk的主副本（Primary Chunk）来写入。对于某个特定的Chunk来说，在某一个时间点，Master不一定指定了Chunk的主副本。所以，写文件的时候，需要考虑Chunk的主副本不存在的情况。\n\n对于Master节点来说，如果发现Chunk的主副本不存在，Master会找出所有存有Chunk最新副本的Chunk服务器。Master节点的工作就是弄清楚在追加文件时，客户端应该与哪个Chunk服务器进行通信。\n\n每个Chunk可能同时有多个副本，最新的副本是指，副本中保存的版本号与Master中记录的Chunk的版本号一致。Chunk副本中的版本号是由Master节点下发的，所以Master节点知道，对于一个特定的Chunk，哪个版本号是最新的。所以Chunk的版本号在Master节点上需要保存在磁盘这种非易失的存储中。如果版本号在故障中丢失，这时，Master无法区分Chunk服务器的数据是旧的或者是新的。\n\n回到之前讲的，当客户端想要对文件进行追加，但是Master又不知道文件尾的Chunk对应的Primary在哪时，Master会等所有存储了最新Chunk版本的服务器集合完成，然后挑选一个作为Primary，其他的作为Secondary。之后，Master会增加版本号，并将版本号写入磁盘，这样就不会丢失这个版本号数据。接下来，Master节点会向Primary和Secondary副本对应的服务器发送消息并告诉它们，谁是Primary，谁是Secondary，Chunk的新版本是什么。Primary和Secondary服务器都会将版本号存储在本地的磁盘中。这样，当它们因为故障重启时，它们可以向Master报告本地保存的Chunk的实际版本号。\n\n所以，现在我们有了一个Primary，它可以接收来自客户端的请求，并将写请求应用到多个Chunk服务器中。之所以要管理Chunk的版本号，是因为这样Master可以将实际更新Chunk的能力转移给Primary服务器。并且在将版本号更新到Primary和Secondary服务器之后，如果Master节点故障重启，还是可以在相同的Primary和Secondary服务器上继续更新Chunk。\n\n现在，Master节点通知Primary和Secondary服务器，你们可以修改这个Chunk。它还给Primary一个租约，这个租约告诉Primary说，在接下来的60秒中，你将是Primary，60秒之后你必须停止成为Primary。这种机制可以确保我们不会同时有两个Primary，我们之后会再做讨论（之后的问答中有一个专门的问题讨论）。\n\n现在来看GFS论文的图2。假设现在Master节点告诉客户端谁是Primary，谁是Secondary，GFS提出了一种聪明的方法来实现写请求的执行序列。客户端会将要追加的数据发送给Primary和Secondary服务器，这些服务器会将数据写入到一个临时位置。所以最开始，这些数据不会追加到文件中。当所有的服务器都返回确认消息说，已经有了要追加的数据，客户端会向Primary服务器发送一条消息说，你和所有的Secondary服务器都有了要追加的数据，现在我想将这个数据追加到这个文件中。Primary服务器或许会从大量客户端收到大量的并发请求，Primary服务器会以某种顺序，一次只执行一个请求。对于每个客户端的追加数据请求（也就是写请求），Primary会查看当前文件结尾的Chunk，并确保Chunk中有足够的剩余空间，然后将客户端要追加的数据写入Chunk的末尾。并且，Primary会通知所有的Secondary服务器也将客户端要追加的数据写入在它们自己存储的Chunk末尾。这样，包括Primary在内的所有副本，都会收到通知将数据追加在Chunk的末尾。\n\n但是对于Secondary服务器来说，它们可能可以执行成功，也可能会执行失败，比如说磁盘空间不足，比如说故障了，比如说Primary发出的消息网络丢包了。如果Secondary实际真的将数据写入到了本地磁盘存储的Chunk中，它会回复“yes”给Primary。如果所有的Secondary服务器都成功将数据写入，并将“yes”回复给了Primary，并且Primary也收到了这些回复。Primary会向客户端返回写入成功。如果至少一个Secondary服务器没有回复Primary，或者回复了，但是内容却是：抱歉，一些不好的事情发生了，比如说磁盘空间不够，或者磁盘故障了，Primary会向客户端返回写入失败。\n\nGFS论文说，如果客户端从Primary得到写入失败，那么客户端应该重新发起整个追加过程。客户端首先会重新与Master交互，找到文件末尾的Chunk；之后，客户端需要重新发起对于Primary和Secondary的数据追加操作。\n\n#### GFS写文件 Write File 2\n\n这部分主要是写文件操作的问答\n\n> 待续\n\n#### GFS的一致性\n\n这里最重要的部分就是重复我们刚刚讨论过的内容。\n\n当我们追加数据时，面对Chunk的三个副本，当客户端发送了一个追加数据的请求，要将数据A追加到文件末尾，所有的三个副本，包括一个Primary和两个Secondary，都成功的将数据追加到了Chunk，所以Chunk中的第一个记录是A。\n\n![微信截图_20201114161415](C:\\Users\\jxhnw\\Desktop\\images\\微信截图_20201114161415.png)\n\n假设第二个客户端加入进来，想要追加数据B，但是由于网络问题发送给某个副本的消息丢失了。所以，追加数据B的消息只被两个副本收到，一个是Primary，一个是Secondary。这两个副本都在文件中追加了数据B，所以，现在我们有两个副本有数据B，另一个没有。\n\n![微信截图_20201114161458](C:\\Users\\jxhnw\\Desktop\\images\\微信截图_20201114161458.png)\n\n之后，第三个客户端想要追加数据C，并且第三个客户端记得下图中左边第一个副本是Primary。Primary选择了偏移量，并将偏移量告诉Secondary，将数据C写在Chunk的这个位置。三个副本都将数据C写在这个位置。\n\n![微信截图_20201114161601](C:\\Users\\jxhnw\\Desktop\\images\\微信截图_20201114161601.png)\n\n对于数据B来说，客户端会收到写入失败的回复，客户端会重发写入数据B的请求。所以，第二个客户端会再次请求追加数据B，或许这次数据没有在网络中丢包，并且所有的三个副本都成功追加了数据B。现在三个副本都在线，并且都有最新的版本号。\n\n![微信截图_20201114161638](C:\\Users\\jxhnw\\Desktop\\images\\微信截图_20201114161638.png)\n\n之后，如果一个客户端读文件，则读取到的内容取决于读取的是Chunk的哪个副本。客户端总共可以看到三条数据，但是取决于不同的副本，读取数据的顺序是不一样的。\n\n或许最坏的情况是，一些客户端写文件时，因为其中一个Secondary未能成功执行数据追加操作，客户端从Primary收到写入失败的回复。在客户端重新发送写文件请求之前，客户端就故障了。所以，你有可能进入这种情形：数据D出现在某些副本中，而其他副本则完全没有。\n\n在GFS的这种工作方式下，如果Primary返回写入成功，那么一切都还好，如果Primary返回写入失败，就不是那么好了。Primary返回写入失败会导致不同的副本有完全不同的数据。\n\n>提问：为什么GFS要设计成多个副本不一致？\n>\n>Robert教授：不明白GFS设计者为什么这么做。GFS可以设计成多个副本完全精确同步的，在lab2和lab3中设计的系统，其中的副本是同步的。你们也会知道，为了保持同步，你们要使用各种各样的技术。\n\nGFS这样设计的理由是足够的简单，但是同时也给应用程序暴露了一些奇怪的数据。这里希望为应用程序提供一个相对简单的写入接口，但应用程序需要容忍读取数据的乱序。如果应用程序不能容忍乱序，应用程序要么可以通过在文件中写入序列号，这样读取的时候能自己识别顺序。\n\n最后，让我花一分钟来介绍GFS在它生涯的前5-10年在Google的出色表现，总的来说，它取得了巨大的成功，许多许多Google的应用都使用了它，许多Google的基础架构，例如BigTable和MapReduce是构建在GFS之上，所以GFS在Google内部广泛被应用。它最严重的局限可能在于，它只有一个Master节点，会带来以下问题：\n\n- Master节点必须为每个文件，每个Chunk维护表单，随着GFS的应用越来越多，这意味着涉及的文件也越来越多，最终Master会耗尽内存来存储文件表单。你可以增加内存，但是单台计算机的内存也是有上限的。所以，这是人们遇到的最早的问题。\n- 除此之外，单个Master节点要承载数千个客户端的请求，而Master节点的CPU每秒只能处理数百个请求，尤其Master还需要将部分数据写入磁盘，很快，客户端数量超过了单个Master的能力。\n- 另一个问题是，应用程序发现很难处理GFS奇怪的语义（本节最开始介绍的GFS的副本数据的同步，或者可以说不同步）。\n- 最后一个问题是，从我们读到的GFS论文中，Master节点的故障切换不是自动的。GFS需要人工干预来处理已经永久故障的Master节点，并更换新的服务器，这可能需要几十分钟甚至更长的而时间来处理。对于某些应用程序来说，这个时间太长了。\n\n### L4 Primary-Backup Replication\n\n#### 复制 Replication\n\n这节主要讲了关于容错（Fault-Tolerance）和复制（Replication）的内容。\n\n容错是为了用来提高可用性。当服务出现故障，例如硬件和网路故障，我们仍然想提供服务，这时候就需要用到复制这个工具。但是，复制也不是万能的，复制能解决什么呢？\n\n复制能解决单台计算机的故障，指单台计算机的fail-stop。例如单纯的停止运行，电源或者网络失效。\n\n但是复制不能处理软件中的bug和硬件中的缺陷。如果软件或者硬件有bug，那么复制对我们没有任何帮助。\n\n当然，足够幸运的话，复制也可以处理一些硬件和软件的bug。总的来说，我们还是只能期望复制能处理fail-stop错误。\n\n另一个关于复制的问题：复制所需的资源消耗是否值得？\n\n#### 状态转移和复制状态机\n\n复制有两种方法：**状态转移**（State Transfer）和**复制状态机**（Replicated State Machine），这门课中我们主要介绍后者。\n\n如果有一个服务器的两个副本，让其保持同步，这样Primary出现故障的时候，Backup有所有的信息，就可以接管服务。状态转移的思想：Primary将自己完整的状态（比如内存中的内容），拷贝并发送给Backup。当Primary故障了，Backup就从保存的最新的状态开始运行。VMware FT没有采用这种方法，因为需要通过网络发送的数据量太多。为了提升效率，只发送上次同步后变更的内容就行了。\n\n复制状态机基于：我们想复制的大部分的服务或者计算机软件都有一些确定的内部操作，不确定的部分是外部的输入。通常情况下，如果一台计算机没有外部影响，它只是一个接一个的执行指令，每条指令执行的是计算机中内存和寄存器上确定的函数，只有当外部事件干预时，才会发生一些预期外的事。\n\n所以，复制状态机不会在不同的副本之间发送状态，相应的，它只会从Primary将这些外部事件发送给Backup。通常来说，如果有两台计算机，如果它们从相同的状态开始，并且它们以相同的顺序，在相同的时间，看到了相同的输入，那么它们会一直互为副本，并且一直保持一致。\n\n状态转移传输的是可能是内存，而复制状态机会将来自客户端的操作或者其他外部事件，从Primary传输到Backup。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115154354.png\" width=\"500px\"> </div>\n\n人们倾向于使用复制状态机的原因是，通常来说，外部操作或者事件比服务的状态要小。\n\n有趣的是，或许你已经注意到了，VMware FT论文讨论的都是复制状态机，并且只涉及了单核CPU，目前还不确定文中的方案如何扩展到多核处理器中。在多核的机器中，两个核交互处理指令的行为是不确定的，所以就算Primary和Backup执行相同的指令，在多核的机器中，它们也不一定产生相同的结果。\n\n回到什么样的状态需要被复制这个话题。VMware FT论文对这个问题有一个非常有趣的回答。它会复制机器的完整状态，这包括了所有的内存，所有的寄存器。这是一个非常详细的复制方案，Primary和Backup，即使在最底层也是完全一样的。对于复制方案来说，这种类型是非常少见的。总的来说，大部分场景都是应用程序级别的复制，就像GFS和其他这门课程中会学习的其他论文一样。\n\nVMware FT的独特之处在于，它从机器级别实现复制，因此它不关心你在机器上运行什么样的软件，它就是复制底层的寄存器和内存。\n\n#### VMware FT工作原理\n\nVMware FT需要两个物理服务器。将Primary和Backup运行在一台服务器的两个虚拟机里面毫无意义，因为容错本来就是为了能够抵御硬件故障。所以，你至少需要两个物理服务器运行VMM，Primary在其中一个物理服务器上，Backup在另一个物理服务器上。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115161607.png\" width=\"500px\"> </div>\n\n两个物理服务器上的VMM会为每个虚拟机分配一段内存，这两段内存的镜像需要完全一致，或者我们的目的就是让Primary和Backup的内存镜像完全一致。所以现在，我们有两个物理服务器，它们每一个都运行了一个虚拟机，每个虚拟机里面都有我们关心的服务的一个拷贝。我们假设有一个网络连接了这两个物理服务器。\n\n![微信截图_20201115161820](C:\\Users\\jxhnw\\Desktop\\images\\微信截图_20201115161820.png)\n\n此外，在这个LAN上，还有一些客户端。所以，基本的工作流程是，我们假设这两个副本，或者说这两个虚拟机：Primary和Backup，互为副本。某些我们服务的客户端，向Primary发送了一个请求，这个请求以网络数据包的形式发出。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115162121.png\" width=\"500px\"> </div>\n\n这个网络数据包产生一个中断，之后这个中断送到了VMM。VMM可以发现这是一个发给我们的多副本服务的一个输入，所以这里VMM会做两件事情：\n\n- 在虚拟机的Guest操作系统中，模拟网络数据包到达的中断，以将相应的数据送给应用程序的Primary副本。\n- 除此之外，因为这是一个多副本虚拟机的输入，VMM会将网络数据包拷贝一份，并通过网络送给Backup虚机所在的VMM。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115162252.png\" width=\"500px\"> </div>\n\nBackup虚机所在的VMM知道这是发送给Backup虚机的网络数据包，它也会在Backup虚机中模拟网络数据包到达的中断，以将数据发送给应用程序的Backup。所以现在，Primary和Backup都有了这个网络数据包，它们有了相同的输入，再加上许多细节，它们将会以相同的方式处理这个输入，并保持同步。\n\n当然，虚机内的服务会回复客户端的请求。在Primary虚机里面，服务会生成一个回复报文，并通过VMM在虚机内模拟的虚拟网卡发出。之后VMM可以看到这个报文，它会实际的将这个报文发送给客户端。\n\n另一方面，由于Backup虚机运行了相同顺序的指令，它也会生成一个回复报文给客户端，并将这个报文通过它的VMM模拟出来的虚拟网卡发出。但是它的VMM知道这是Backup虚机，会丢弃这里的回复报文。所以这里，Primary和Backup都看见了相同的输入，但是只有Primary虚机实际生成了回复报文给客户端。\n\n这里有一个术语，VMware FT论文中将Primary到Backup之间同步的数据流的通道称之为Log Channel。虽然都运行在一个网络上，但是这些从Primary发往Backup的事件被称为Log Channel上的Log Event/Entry。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115162450.png\" width=\"500px\"> </div>\n\n当Primary因为故障停止运行时，FT（Fault-Tolerance）就开始工作了。从Backup的角度来说，它将不再收到来自于Log Channel上的Log条目。实际中，Backup每秒可以收到很多条Log，其中一个来源就是来自于Primary的定时器中断。每个Primary的定时器中断都会生成一条Log条目并发送给Backup，这些定时器中断每秒大概会有100次。所以，如果Primary虚机还在运行，Backup必然可以期望从Log Channel收到很多消息。如果Primary虚机停止运行了，那么Backup的VMM就会说：天，我都有1秒没有从Log Channel收到任何消息了，Primary一定是挂了或者出什么问题了。当Backup不再从Primary收到消息，VMware FT论文的描述是，Backup虚机会上线（Go Alive）。这意味着，Backup不会再等待来自于Primary的Log Channel的事件，Backup的VMM会让Backup自由执行，而不是受来自于Primary的事件驱动。Backup的VMM会在网络中做一些处理（猜测是发GARP），让后续的客户端请求发往Backup虚机，而不是Primary虚机。同时，Backup的VMM不再会丢弃Backup虚机的输出。当然，它现在已经不再是Backup，而是Primary。所以现在，左边的虚机直接接收输入，直接产生输出。到此为止，Backup虚机接管了服务。\n\n类似的一个场景，虽然没那么有趣，但是也需要能正确工作。如果Backup虚机停止运行，Primary也需要用一个类似的流程来抛弃Backup，停止向它发送事件，并且表现的就像是一个单点的服务，而不是一个多副本服务一样。所以，只要有一个因为故障停止运行，并且不再产生网络流量时，Primary和Backup中的另一个都可以上线继续工作。\n\n#### 非确定性事件 Non-Deterministic Events\n\n目前为止，我们都假设只要Backup虚机也看到了来自客户端的请求，经过同样的执行过程，那么它就会与Primary保持一致，但是这背后其实有很多很重要的细节。就如其他同学之前指出的一样，其中一个问题是存在非确定性（Non-Deterministic）的事件。虽然通常情况下，代码执行都是直接明了的，但并不是说计算机中每一个指令都是由计算机内存的内容而确定的行为。这一节，我们来看一下不由当前内存直接决定的指令。如果我们不够小心，这些指令在Primary和Backup的运行结果可能会不一样。这些指令就是所谓的非确定性事件。所以，设计者们需要弄明白怎么让这一类事件能在Primary和Backup之间同步。\n\n非确定性事件可以分成几类:\n\n- 客户端的输入。假设有一个来自客户端的输入，这个输入随时可能会送法，所以它是不可预期的。客户端请求何时送达， 会有什么样的内容，并不取决于服务当前的状态。我们讨论的系统专注于通过网络来进行交互，所以这里的系统输入的唯一格式就是网络数据包。所以当我们说输入的时候，我们实际上是指接收到了一个网络数据包。而一个网络数据包对于我们来说有两部分，一个是数据包中的数据，另一个是提示数据包送达了的中断。当网络数据包送达时，通常网卡的DMA（Direct Memory Access）会将网络数据包的内容拷贝到内存，之后触发一个中断。操作系统会在处理指令的过程中消费这个中断。对于Primary和Backup来说，这里的步骤必须看起来是一样的，否则它们在执行指令的时候就会出现不一致。所以，这里的问题是，中断在什么时候，具体在指令流中的哪个位置触发？对于Primary和Backup，最好要在相同的时间，相同的位置触发，否则执行过程就是不一样的，进而会导致它们的状态产生偏差。所以，我们不仅关心网络数据包的内容，还关心中断的时间。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116163150.png\" width=\"500px\"> </div>\n\n- 另外，有一些指令在不同的计算机上的行为是不一样的，这一类指令称为怪异指令，比如：\n  - 随机数生成器\n  - 获取当前时间的指令，在不同时间调用会得到不同的结果\n  - 获取计算机的唯一ID\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116163420.png\" width=\"500px\"> </div>\n\n- 另外一个常见的非确定事件，在VMware FT论文中没有讨论，就是多CPU的并发。我们现在讨论的都是一个单进程系统，没有多CPU多核这种事情。之所以多核会导致非确定性事件，是因为当服务运行在多CPU上时，指令在不同的CPU上会交织在一起运行，进而产生的指令顺序是不可预期的。所以如果我们在Backup上运行相同的代码，并且代码并行运行在多核CPU上，硬件会使得指令以不同（于Primary）的方式交织在一起，而这会引起不同的运行结果。假设两个核同时向同一份数据请求锁，在Primary上，核1得到了锁；在Backup上，由于细微的时间差别核2得到了锁，那么执行结果极有可能完全不一样，这里其实说的就是（在两个副本上）不同的线程获得了锁。所以，多核是一个巨大的非确定性事件来源，VMware FT论文完全没有讨论它，并且它也不适用与我们这节课的讨论。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116163754.png\" width=\"500px\"> </div>\n\n> 学生提问：如何确保VMware FT管理的服务只使用单核？\n> Robert教授：服务不能使用多核并行计算。硬件几乎可以肯定是多核并行的，但是这些硬件在VMM之下。在这篇论文中，VMM暴露给运行了Primary和Backup虚机操作系统的硬件是单核的。我猜他们也没有一种简单的方法可以将这里的内容应用到一个多核的虚拟机中。\n\n所有的事件都需要通过Log Channel，从Primary同步到Backup。有关日志条目的格式在论文中没有怎么描述，但是我（Robert教授）猜日志条目中有三样东西：\n\n1. 事件发生时的指令序号。因为如果要同步中断或者客户端输入数据，最好是Primary和Backup在相同的指令位置看到数据，所以我们需要知道指令序号。这里的指令号是自机器启动以来指令的相对序号，而不是指令在内存中的地址。比如说，我们正在执行第40亿零79条指令。所以日志条目需要有指令序号。对于中断和输入来说，指令序号就是指令或者中断在Primary中执行的位置。对于怪异的指令（Weird instructions），比如说获取当前的时间来说，这个序号就是获取时间这条指令执行的序号。这样，Backup虚机就知道在哪个指令位置让相应的事件发生。\n2. 日志条目的类型，可能是普通的网络数据输入，也可能是怪异指令。\n3. 最后是数据。如果是一个网络数据包，那么数据就是网络数据包的内容。如果是一个怪异指令，数据将会是这些怪异指令在Primary上执行的结果。这样Backup虚机就可以伪造指令，并提供与Primary相同的结果。\n\n举个例子，Primary和Backup两个虚机内部的guest操作系统需要在模拟的硬件里有一个定时器，能够每秒触发100次中断，这样操作系统才可以通过对这些中断进行计数来跟踪时间。因此，这里的定时器必须在Primary和Backup虚机的完全相同位置产生中断，否则这两个虚机不会以相同的顺序执行指令，进而可能会产生分歧。所以，在运行了Primary虚机的物理服务器上，有一个定时器，这个定时器会计时，生成定时器中断并发送给VMM。在适当的时候，VMM会停止Primary虚机的指令执行，并记下当前的指令序号，然后在指令序号的位置插入伪造的模拟定时器中断，并恢复Primary虚机的运行。之后，VMM将指令序号和定时器中断再发送给Backup虚机。虽然Backup虚机的VMM也可以从自己的物理定时器接收中断，但是它并没有将这些物理定时器中断传递给Backup虚机的guest操作系统，而是直接忽略它们。当来自于Primary虚机的Log条目到达时，Backup虚机的VMM配合特殊的CPU特性支持，会使得物理服务器在相同的指令序号处产生一个定时器中断，之后VMM获取到这个中断，并伪造一个假的定时器中断，并将其送入Backup虚机的guest操作系统，并且这个定时器中断会出现在与Primary相同的指令序号位置。\n\n>学生提问：这里的操作依赖硬件的定制吗？（实际上我听不清，猜的）\n>Robert教授：是的，这里依赖于CPU的一些特殊的定制，这样VMM就可以告诉CPU，执行1000条指令之后暂停一下，方便VMM将伪造的中断注入，这样Backup虚机就可以与Primary虚机在相同的指令位置触发相同的中断，执行相同的指令。之后，VMM会告诉CPU恢复执行。这里需要一些特殊的硬件，但是现在看起来所有的Intel芯片上都有这个功能，所以也不是那么的特殊。或许15年前，这个功能还是比较新鲜的，但是现在来说就比较正常了。现在这个功能还有很多其他用途，比如说做CPU时间性能分析，可以让处理器每1000条指令中断一次，这里用的是相同的硬件让微处理器每1000条指令产生一个中断。所以现在，这是CPU中非常常见的一个小工具。\n>学生提问：如果Backup领先了Primary会怎么样？\n>Robert教授： 场景可能是这样，Primary即将在第100万条指令处中断，但是Backup已经执行了100万零1条指令了。如果我们让这种场景发生，那么Primary的中断传输就太晚了。如果我们允许Backup执行领先Primary，就会使得中断在Backup中执行位置落后于Primary。所以我们不能允许这种情况发生，我们不能允许Backup在执行指令时领先于Primary。\n>VMware FT是这么做的。它会维护一个来自于Primary的Log条目的等待缓冲区，如果缓冲区为空，Backup是不允许执行指令的。如果缓冲区不为空，那么它可以根据Log的信息知道Primary对应的指令序号，并且会强制Backup虚机最多执行指令到这个位置。所以，Backup虚机的CPU总是会被通知执行到特定的位置就停止。Backup虚机只有在Log缓冲区中有数据才会执行，并且只会执行到Log条目对应的指令序号。在Primary产生的第一个Log，并且送达Backup之前，Backup甚至都不能执行指令，所以Backup总是落后于Primary至少一个Log。如果物理服务器的资源占用过多，导致Backup执行变慢，那么Backup可能落后于Primary多个Log条目。\n\n网络数据包送达时，有一个细节会比较复杂。当网络数据包到达网卡时，如果我们没有运行虚拟机，网卡会将网络数据包通过DMA的方式送到计算机的关联内存中。现在我们有了虚拟机，并且这个网络数据包是发送给虚拟机的，在虚拟机内的操作系统可能会监听DMA并将数据拷贝到虚拟机的内存中。因为VMware的虚拟机设计成可以支持任何操作系统，我们并不知道网络数据包到达时操作系统会执行什么样的操作，有的操作系统或许会真的监听网络数据包拷贝到内存的操作。\n\n我们不能允许这种情况发生。如果我们允许网卡直接将网络数据包DMA到Primary虚机中，我们就失去了对于Primary虚机的时序控制，因为我们也不知道什么时候Primary会收到网络数据包。所以，实际中，物理服务器的网卡会将网络数据包拷贝给VMM的内存，之后，网卡中断会送给VMM，并说，一个网络数据包送达了。这时，VMM会暂停Primary虚机，记住当前的指令序号，将整个网络数据包拷贝给Primary虚机的内存，之后模拟一个网卡中断发送给Primary虚机。同时，将网络数据包和指令序号发送给Backup。Backup虚机的VMM也会在对应的指令序号暂停Backup虚机，将网络数据包拷贝给Backup虚机，之后在相同的指令序号位置模拟一个网卡中断发送给Backup虚机。这就是论文中介绍的Bounce Buffer机制。\n\n#### 输出控制 Output Rule\n\n对于VMware FT系统的输出，也是值得说一下的。在这个系统中，唯一的输出就是对于客户端请求的响应。客户端通过网络数据包将数据送入，服务器的回复也会以网络数据包的形式送出。我之前说过，Primary和Backup虚机都会生成回复报文，之后通过模拟的网卡送出，但是**只有Primary虚机才会真正的将回复送出**，而Backup虚机只是将回复简单的**丢弃**掉。\n\n好吧，真实情况会复杂一些。假设我们正在跑一个简单的数据库服务器，这个服务器支持一个计数器自增操作，工作模式是这样，客户端发送了一个自增的请求，服务器端对计数器加1，并返回新的数值。假设最开始一切正常，在Primary和Backup中的计数器都存了10。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201227.png\" width=\"500px\"> </div>\n\n\n\n现在，局域网的一个客户端发送了一个自增的请求给Primary。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201309.png\" width=\"500px\"> </div>\n\n这个请求在Primary虚机的软件中执行，Primary会发现，现在的数据是10，我要将它变成11，并回复客户端说，现在的数值是11。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201348.png\" width=\"500px\"> </div>\n\n这个请求也会发送给Backup虚机，并将它的数值从10改到11。Backup也会产生一个回复，但是这个回复会被**丢弃**，这是我们期望发生的。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201418.png\" width=\"500px\"> </div>\n\n但是，你需要考虑，如果在一个不恰当的时间，出现了故障会怎样？在这门课程中，你需要始终考虑，故障的最坏场景是什么，故障会导致什么结果？在这个例子中，假设Primary确实生成了回复给客户端，但是之后立马崩溃了。更糟糕的是，现在网络不可靠，Primary发送给Backup的Log条目在Primary崩溃时也丢包了。那么现在的状态是，客户端收到了回复说现在的数据是11，但是Backup虚机因为没有看到客户端请求，所以它保存的数据还是10。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201524.png\" width=\"500px\"> </div>\n\n现在，因为察觉到Primary崩溃了，Backup接管服务。这时，客户端再次发送一个自增的请求，这个请求发送到了原来的Backup虚机，它会将自身的数值从10增加到11，并产生第二个数据是11的回复给客户端。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201559.png\" width=\"500px\"> </div>\n\n如果客户端比较前后两次的回复，会发现一个明显不可能的场景（两次自增的结果都是11）。\n\n因为VMware FT的优势就是在不修改软件，甚至软件都不需要知道复制的存在的前提下，就能支持容错，所以我们也不能修改客户端让它知道因为容错导致的副本切换触发了一些奇怪的事情。在VMware FT场景里，我们没有修改客户端这个选项，因为整个系统只有在不修改服务软件的前提下才有意义。所以，前面的例子是个大问题，我们不能让它实际发生。有人还记得论文里面是如何防止它发生的吗？\n\n论文里的解决方法就是控制输出（Output Rule）。直到Backup虚机确认收到了相应的Log条目，Primary虚机不允许生成任何输出。让我们回到Primary崩溃前，并且计数器的内容还是10，Primary上的正确的流程是这样的：\n\n1. 客户端输入到达Primary。\n2. Primary的VMM将输入的拷贝发送给Backup虚机的VMM。所以有关输入的Log条目在Primary虚机生成输出之前，就发往了Backup。之后，这条Log条目通过网络发往Backup，但是过程中有可能丢失。\n3. Primary的VMM将输入发送给Primary虚机，Primary虚机生成了输出。现在Primary虚机的里的数据已经变成了11，生成的输出也包含了11。但是VMM不会无条件转发这个输出给客户端。\n4. Primary的VMM会等到之前的Log条目都被Backup虚机确认收到了才将输出转发给客户端。所以，包含了客户端输入的Log条目，会从Primary的VMM送到Backup的VMM，Backup的VMM不用等到Backup虚机实际执行这个输入，就会发送一个表明收到了这条Log的ACK报文给Primary的VMM。当Primary的VMM收到了这个ACK，才会将Primary虚机生成的输出转发到网络中。\n\n所以，这里的核心思想是，确保在客户端看到对于请求的响应时，Backup虚机一定也看到了对应的请求，或者说至少在Backup的VMM中缓存了这个请求。这样，我们就不会陷入到这个奇怪的场景：客户端已经收到了回复，但是因为有故障发生和副本切换，新接手的副本完全不知道客户端之前收到了对应的回复。\n\n如果在上面的步骤2中，Log条目通过网络发送给Backup虚机时丢失了，然后Primary虚机崩溃了。因为Log条目丢失了， 所以Backup节点也不会发送ACK消息。所以，如果Log条目的丢失与Primary的崩溃同一时间发生，那么Primary必然在VMM将回复转发到网络之前就崩溃了，所以客户端也就不会收到任何回复，所以客户端就不会观察到任何异常。这就是输出控制（Output rule）。\n\n所以，Primary会等到Backup已经有了最新的数据，才会将回复返回给客户端。这几乎是所有的复制方案中对于性能产生伤害的地方。这里的同步等待使得Primary不能超前Backup太多，因为如果Primary超前了并且又故障了，对应的就是Backup的状态落后于客户端的状态。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201957.png\" width=\"500px\"> </div>\n\n所以，几乎每一个复制系统都有这个问题，在某个时间点，Primary必须要停下来等待Backup，这对于性能是实打实的限制。即使副本机器在相邻的机架上，Primary节点发送消息并收到回复仍然需要0.5毫秒的延时。如果我们想要能承受类似于地震或者城市范围内的断电等问题，Primary和Backup需要在不同的城市，之间可能有5毫秒的差距。如果我们将两个副本放置在不同的城市，每次生成一个输出时，都需要至少等待5毫秒，等Backup确认收到了前一个Log条目，然后VMM才能将输出发送到网络。对于一些低请求量的服务，这不是问题。但是如果我们的服务要能够每秒处理数百万个请求，那就会对我们的性能产生巨大的伤害。\n\n所以如果条件允许，人们会更喜欢使用在更高层级做复制的系统（详见4.2 最后两段）。这样的复制系统可以理解操作的含义，这样的话Primary虚机就不必在每个网络数据包暂停同步一下，而是可以在一个更高层级的操作层面暂停来做同步，甚至可以对一些只读操作不做暂停。但是这就需要一些特殊的应用程序层面的复制机制。\n\n>学生提问：其实不用暂停Primary虚机的执行，只需要阻止Primary虚机的输出就行吧？\n>Robert教授：你是对的。所以，这里的同步等待或许没有那么糟糕。但是不管怎么样，在一个系统中，本来可以几微秒响应一个客户端请求，而现在我们需要先更新另一个城市的副本，这可能会将一个10微秒的操作变成10毫秒。\n>学生提问：这里虽然等待时间比较长，如果提高请求的并发度，是不是还是可以有高性能？\n>Robert教授：如果你有大量的客户端并发的发送请求，那么你或许还是可以在高延时的情况下获得高的吞吐量，但是就需要你有足够聪明的设计和足够的幸运。\n>学生提问：可以不可以将Log保留在Primary虚机对应的物理服务器内存中，这样就不用长时间的等待了。\n>Robert教授：这是一个很好的想法。但是如果你这么做的话，物理服务器宕机，Log就丢失了。通常，如果服务器故障，就认为服务器中的所有数据都没了，其中包括内存的内容。如果故障是某人不小心将服务器的电源拔了，即使Primary对应的物理服务器有电池供电的RAM，Backup也没办法从其获取Log。实际上，系统会在Backup的内存中记录Log。为了保证系统的可靠性，Primary必须等待Backup的ACK才真正输出。你这里的想法很好，但是我们还是不能使用Primary的内存来存Log。\n>学生提问：能不能输入送到Primary，输出从Backup送出？\n>Robert教授：这是个很聪明的想法。我之前完全没有想到过这点。它或许可以工作，我不确定，但是这很有意思。\n\n#### 重复输出 Duplicated Output\n\n还有一种可能的情况是，回复报文已经从VMM发往客户端了，所以客户端收到了回复，但是这时Primary虚机崩溃了。而在Backup侧，客户端请求还堆积在Backup对应的VMM的Log等待缓冲区（详见4.4倒数第二个学生提问），也就是说客户端请求还没有真正发送到Backup虚机中。当Primary崩溃之后，Backup接管服务，Backup首先需要消费所有在等待缓冲区中的Log，以保持与Primay在相同的状态，这样Backup才能以与Primary相同的状态接管服务。假设最后一条Log条目对应来自客户端的请求，那么Backup会在处理完客户端请求对应的中断之后，再上线接管服务。这意味着，Backup会将自己的计数器增加到11（原来是10，处理完客户端的自增请求变成11），并生成一个输出报文。因为这时，Backup已经上线接管服务，它生成的输出报文会被它的VMM发往客户端。这样客户端会收到两个内容是11的回复。如果这里的情况真的发生了，那么明显这也是一个异常行为，因为不可能在运行在单个服务器的服务上发生这种行为。\n\n好消息是，几乎可以肯定，客户端通过TCP与服务进行交互，也就是说客户端请求和回复都通过TCP Channel收发。当Backup接管服务时，因为它的状态与Primary相同，所以它知道TCP连接的状态和TCP传输的序列号。当Backup生成回复报文时，这个报文的TCP序列号与之前Primary生成报文的TCP序列号是一样的，这样客户端的TCP栈会发现这是一个重复的报文，它会在TCP层面丢弃这个重复的报文，用户层的软件永远也看不到这里的重复。\n\n这里可以认为是异常的场景，并且被意外的解决了。但是事实上，对于任何有主从切换的复制系统，基本上不可能将系统设计成不产生重复输出。为了避免重复输出，有一个选项是在两边都不生成输出，但这是一个非常糟糕的做法（因为对于客户端来说就是一次失败的请求）。当出现主从切换时，切换的两边都有可能生成重复的输出，这意味着，某种程度上来说，所有复制系统的客户端需要一种重复检测机制。这里我们使用的是TCP来完成重复检测，如果我们没有TCP，那就需要另一种其他机制，或许是应用程序级别的序列号。\n\n在lab2和lab3中，基本上可以看到我们前面介绍的所有内容，例如输出控制，你会设计你的复制状态机。\n\n> 学生提问：太长了，听不太清，直接看回答吧。\n> Robert教授：第一部分是对的。当Backup虚机消费了最后一条Log条目，这条Log包含了客户端的请求，并且Backup上线了。从这个时间点开始，我们不需要复制任何东西，因为Primary已经挂了，现在没有任何其他副本。\n> 如果Primary向客户端发送了一个回复报文，之后，Primary或者客户端关闭了TCP连接，所以现在客户端侧是没有TCP连接的。Primary挂了之后，Backup虚机还是有TCP连接的信息。Backup执行最后一条Log，Backup会生成一个回复报文，但是这个报文送到客户端时，客户端并没有相应的TCP连接信息。客户端会直接丢弃报文，就像这个报文不存在一样。哦不！这里客户端实际会发送一个TCP Reset，这是一个类似于TCP error的东西给Backup虚机，Backup会处理这里的TCP Reset，但是没关系，因为现在只有一个副本，Backup可以任意处理，而不用担心与其他副本有差异。实际上，Backup会直接忽略这个报文。现在Backup上线了，在这个复制系统里面，它不受任何人任何事的限制。\n> 学生提问：Backup接手服务之后，对于之前的TCP连接，还能用相同的TCP源端口来发送数据吗（因为源端口一般是随机的）？\n> Robert教授：你可以这么认为。因为Backup的内存镜像与Primary的完全一致，所以它们会以相同的TCP源端口来发送数据，它们在每一件事情上都是一样的。它们发送的报文每一bit都是一样的。\n> 学生提问：甚至对于IP地址都会是一样的吗，毕竟这里涉及两个物理服务器？\n> Robert教授：在这个层面，物理服务器并没有IP地址。在我们的例子中，Primary虚机和Backup虚机都有IP地址，但是物理服务器和VMM在网络上基本是透明的。物理服务器上的VMM在网络上并没有自己的唯一标识。虚拟机有自己独立的操作系统和独立的TCP栈，但是对于IP地址和其他的关联数据，Primary和Backup是一样的（类似于HA VIP）。当虚机发送一个网络报文，它会以虚机的IP地址和MAC地址来发送，这些信息是直接透传到局域网的，而这正是我们想要的。所以Backup会生成与Primary完全一样的报文。这里有一些tricky，因为如果物理服务器都接在一个以太网交换机上，那么它们必然在交换机的不同端口上，在发生切换时，我们希望以太网交换机能够知道当前主节点在哪，这样才能正常的转发报文，这会有一些额外的有意思的事情。大部分时候，Primary和Backup都是生成相同的报文，并送出。\n> （注：早期的VMware虚机都是直接以VLAN或者Flat形式，通过DVS接入到物理网络，所以虚拟机的报文与物理机无关，可以直接在局域网发送。以太网交换机会维护MAC地址表，表明MAC地址与交换机端口的对应，因为Primary和Backup虚机的MAC地址一样，当主从切换时，这个表需要更新，这样同一个目的MAC地址，切换前是发往了Primary虚机所在的物理服务器对应的交换机端口，切换之后是发往了Backup虚机所在的物理服务器对应的交换机端口。交换机MAC地址表的切换通常通过虚机主动发起GARP来更新。）\n\n#### Test-and-Set 服务\n\n最后还有一个细节。我一直都假设Primary出现的是fail-stop故障（详见4.1最开始），但是这不是所有的情况。一个非常常见的场景就是，Primary和Backup都在运行，但是它们之间的网络出现了问题，同时它们各自又能够与一些客户端通信。这时，它们都会以为对方挂了，自己需要上线并接管服务。所以现在，我们对于同一个服务，有两个机器是在线的。因为现在它们都不向彼此发送Log条目，它们自然就出现了分歧。它们或许会因为接收了不同的客户端请求，而变得不一样。\n\n因为涉及到了计算机网络，那就可能出现上面的问题，而不仅仅是机器故障。如果我们同时让Primary和Backup都在线，那么我们现在就有了脑裂（Split Brain）。这篇论文解决这个问题的方法是，向一个外部的第三方权威机构求证，来决定Primary还是Backup允许上线。这里的第三方就是Test-and-Set服务。\n\nTest-and-Set服务不运行在Primary和Backup的物理服务器上，VMware FT需要通过网络支持Test-and-Set服务。这个服务会在内存中保留一些标志位，当你向它发送一个Test-and-Set请求，它会设置标志位，并且返回旧的值。Primary和Backup都需要获取Test-and-Set标志位，这有点像一个锁。为了能够上线，它们或许会同时发送一个Test-and-Set请求，给Test-and-Set服务。当第一个请求送达时，Test-and-Set服务会说，这个标志位之前是0，现在是1。第二个请求送达时，Test-and-Set服务会说，标志位已经是1了，你不允许成为Primary。对于这个Test-and-Set服务，我们可以认为运行在单台服务器。当网络出现故障，并且两个副本都认为对方已经挂了时，Test-and-Set服务就是一个仲裁官，决定了两个副本中哪一个应该上线。\n\n对于这种机制有什么问题吗？\n\n>学生提问：只有在网络故障的时候才需要询问Test-and-Set服务吗？\n>Robert教授：即使没有网络分区，在所有情况下，两个副本中任意一个觉得对方挂了，哪怕对方真的挂了，想要上线的那个副本仍然需要获得Test-and-Set服务的锁。在6.824这门课程中，有个核心的规则就是，你无法判断另一个计算机是否真的挂了，你所知道的就是，你无法从那台计算机收到网络报文，你无法判断是因为那台计算机挂了，还是因为网络出问题了导致的。所以，Backup看到的是，我收不到来自Primary的网络报文，或许Primary挂了，或许还活着。Primary或许也同时看不到Backup的报文。所以，如果存在网络分区，那么必然要询问Test-and-Set服务。但是实际上没人知道现在是不是网络分区，所以每次涉及到主从切换，都需要向Test-and-Set服务进行查询。所以，当副本想要上线的时候，Test-and-Set服务必须要在线，因为副本需要获取这里的Test-and-Set锁。现在Test-and-Set看起来像是个单点故障（Single-Point-of-Failure）。虽然VMware FT尝试构建一个复制的容错的系统，但是最后，主从切换还是依赖于Test-and-Set服务在线，这有点让人失望。我强烈的认为，Test-and-Set服务本身也是个复制的服务，并且是容错的。几乎可以肯定的是，VMware非常乐意向你售卖价值百万的高可用存储系统，系统内使用大量的复制服务。因为这里用到了Test-and-Set服务，我猜它也是复制的。\n\n你们将要在Lab2和Lab3构建的系统，会帮助你们构建容错的Test-and-Set服务，所以这个问题可以轻易被解决。","slug":"6.824/distributed-system-notes-1","published":1,"updated":"2020-12-06T08:50:20.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtu8p00012kwjbfdwfrt0","content":"<h2 id=\"mit-6824-分布式系统笔记\"><a class=\"markdownIt-Anchor\" href=\"#mit-6824-分布式系统笔记\"></a> MIT 6.824 分布式系统笔记</h2>\n<h3 id=\"l3-gfs\"><a class=\"markdownIt-Anchor\" href=\"#l3-gfs\"></a> L3 GFS</h3>\n<h4 id=\"分布式的难点\"><a class=\"markdownIt-Anchor\" href=\"#分布式的难点\"></a> 分布式的难点</h4>\n<p>人们设计大型分布式系统或大型存储系统出发点通常是，他们想获取巨大的性能加成，进而利用数百台计算机的资源来同时完成大量工作。因此，性能问题就成为了最初的诉求。 之后，很自然的想法就是将数据分割放到大量的服务器上，这样就可以并行的从多台服务器读取数据。我们将这种方式称之为分片（Sharding）。</p>\n<p>如果你在成百上千台服务器进行分片，你将会看见常态的故障。如果你有数千台服务器，那么总是会有一台服务器宕机，每天甚至每个小时都可能会发生错误。所以，我们需要自动化的方法而不是人工介入来修复错误。我们需要一个自动的容错系统，这就引出了容错这个话题（fault tolerance）。</p>\n<p>实现容错最有用的一种方法是使用复制，只需要维护2-3个数据的副本，当其中一个故障了，你就可以使用另一个。所以，如果想要容错能力，就得有复制（replication）。</p>\n<p>如果有复制，那就有了两份数据的副本。可以确定的是，如果你不小心，它们就会不一致。所以，你本来设想的是，有了两个数据副本，你可以任意使用其中一个副本来容错。但是如果你不够小心，两个数据的副本就不是完全一致，严格来说，它们就不再互为副本了。而你获取到的数据内容也将取决于你向哪个副本请求数据。这对于应用程序来说就有些麻烦了。所以，如果我们有了复制，我们就有不一致的问题（inconsistency）。</p>\n<p>通过聪明的设计，你可以避免不一致的问题，并且让数据看起来也表现的符合预期。但是为了达到这样的效果，你总是需要额外的工作，需要不同服务器之间通过网络额外的交互，而这样的交互会降低性能。所以如果你想要一致性，你的代价就是低性能。但这明显不是我们最开始所希望的。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111174832.png\" width=\"500px\"> </div>\n<h4 id=\"一种分布式存储错误的设计\"><a class=\"markdownIt-Anchor\" href=\"#一种分布式存储错误的设计\"></a> 一种分布式存储错误的设计</h4>\n<p>对于强一致性或者好的一致性的设备，从应用程序或者客户端来看就像是在和一台服务器在通信。对于一个理想的强一致性模型，你看到的就像是只有一台服务器，一份数据，并且系统一次只做一件事情。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111211740.png\" width=\"500px\"> </div>\n<p>上图表示了一个因服务端接收数据顺序不一样而可能出问题的系统。</p>\n<h4 id=\"gfs的设计目标\"><a class=\"markdownIt-Anchor\" href=\"#gfs的设计目标\"></a> GFS的设计目标</h4>\n<p>GFS的目标是构建一个大型的，快速的文件系统。并且这个文件系统是全局有效的，这样各种不同的应用程序都可以从中读取数据。</p>\n<p>GFS在各个方面对大型的顺序文件读写进行了定制。GFS只会顺序处理，不支持随机访问。</p>\n<h4 id=\"gfs-master节点\"><a class=\"markdownIt-Anchor\" href=\"#gfs-master节点\"></a> GFS Master节点</h4>\n<p>接下来是GFS的大致架构。</p>\n<p>GFS中只有一个Master节点在工作，Master节点保存了文件名和存储位置的对应关系。除此之外，还有大量的Chunk服务器。Master用来管理文件和Chunk的信息，而Chunk服务器用来存储实际的数据。Master节点知道每一个文件对应的Chunk的ID，这些Chunk是64MB大小，它们共同构成了一个文件。如果我有一个1GB的文件，那么Master节点就知道文件的第一个Chunk存储在哪，第二个Chunk存储在哪，等等。当我想读取这个文件中的任意一个部分时，我需要向Master节点查询对应的Chunk在哪个服务器上，之后我可以直接从Chunk服务器读取对应的Chunk数据。</p>\n<p>Master节点内保存的数据内容，主要关心两个表单：</p>\n<ol>\n<li>\n<p>文件名 -&gt; Chunk ID 或者 Chunk Handle数组的对应。这个表单告诉你，文件对应了哪些Chunk</p>\n</li>\n<li>\n<p>Chunk ID -&gt; Chunk 数据 对应关系，包括了：</p>\n<ul>\n<li>每个Chunk存储在哪些服务器上，所以这部分是Chunk服务器的列表</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>每个Chunk当前的版本号，所以Master节点必须记住每个Chunk对应的版本号。\n<ul>\n<li>所有对于Chunk的写操作都必须在主Chunk（Primary Chunk）上顺序处理，主Chunk是Chunk的多个副本之一。所以，Master节点必须记住哪个Chunk服务器持有主Chunk。</li>\n</ul>\n</li>\n<li>并且，主Chunk只能在特定的租约时间内担任主Chunk，所以，Master节点要记住主Chunk的租约过期时间</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111213312.png\" width=\"500px\"> </div>\n<p>以上数据都在内存中，如果Master故障了，这些数据就都丢失了。为了能让Master重启而不丢失数据，Master节点会同时将数据存储在磁盘上。Master会在磁盘上存储Log，每次有数据变更时，Master会在磁盘的Log中追加一条记录，并生成CheckPoint（备份点）。</p>\n<ol>\n<li>\n<p>Chunk Handle的数组（第一个表单）要保存在磁盘上。标记为NV（non-volatile 非易失）这个标记的数据会写到磁盘上</p>\n</li>\n<li>\n<p>Chunk服务器列表不用保存到磁盘上。因为Master节点重启之后可以与所有的Chunk服务器通信，并查询每个Chunk服务器存储了哪些Chunk，标记为V（volatile）</p>\n</li>\n<li>\n<p>版本号要不要写入磁盘取决于GFS如何工作，我认为需要写入磁盘。之后讨论，先标记为NV</p>\n</li>\n<li>\n<p>主Chunk的ID，可以确定不用写入磁盘，因为Master节点重启之后会忘记谁是主Chunk，这个时候，Master节点可以安全指定一个新的主Chunk。所以这里标记成V</p>\n</li>\n<li>\n<p>类似的，租约过期时间也不用写入磁盘，标记成V</p>\n</li>\n</ol>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111215459.png\" width=\"500px\"> </div>\n<p>任何时候，如果文件扩展到达了一个新的64MB，需要新增一个Chunk或者由于指定了新的主Chunk而导致版本号更新了，Master节点需要向磁盘中的Log追加一条记录，我刚刚向这个文件添加了一个新的Chunk或者我刚刚修改了Chunk的版本号。</p>\n<blockquote>\n<p>这里在磁盘中维护Log而不是数据库的原因是，数据库本质上来说是某种B树（B-tree）或者Hash table，相比之下，追加Log会非常的高效，因为你可以将最近的多个Log记录一次性的写入磁盘。因为这些数据都是向同一个地址追加，这样只需要等待磁盘的磁碟旋转一次。而对于B树来说，每一份数据都需要在磁盘中随机找个位置写入。所以使用Log可以使得磁盘写入更快一些。</p>\n</blockquote>\n<p>当Master节点故障重启，并重建状态，你不会想要从Log的最开始重建状态，因为Log的最开始可能是很久以前。重启时，Master节点会从Log中的最近一个CheckPoint开始恢复，并逐条执行从CheckPoint开始的Log记录。</p>\n<h4 id=\"gfs读文件-read-file\"><a class=\"markdownIt-Anchor\" href=\"#gfs读文件-read-file\"></a> GFS读文件 Read file</h4>\n<p>有了之前的基础，接下来会列出GFS读和写的步骤，最后，介绍出现故障之后，系统是如何保持正确的行为。</p>\n<p>对于读请求来说，意味着应用或者GFS客户端有一个文件名和它想从文件的某个位置读取的偏移量（offset），应用程序会将这些信息发送给Master节点。Master节点会从自己的File表单中查询文件名，得到Chunk ID的数组。因为每个Chunk都是64MB，所以偏移量除以64MB就可以从数组中得到对应的Chunk ID。之后Master再从Chunk表单中找到存有Chunk的服务器列表，并将列表返回给客户端。所以分两步：</p>\n<ol>\n<li>客户端-&gt; 文件名 + 偏移量 -&gt; Master</li>\n<li>Master-&gt; Chunk handle + 服务器列表 -&gt; 客户端</li>\n</ol>\n<p>现在客户端从服务器列表中挑选一个来读取数据。（论文中说客户端会选择一个网络上最近的服务器）客户端可能会连续多次读取同一个Chunk的不同位置。所以，客户端会缓存Chunk和服务器的对应关系，这样不用向Master一次次去请求相同的信息。</p>\n<p>接下来，客户端和Chunk通信，将Chunk Handle和偏移量发送给那个Chunk服务器。服务器找到数据，将数据返回给客户端。</p>\n<h4 id=\"gfs写文件-write-file-1\"><a class=\"markdownIt-Anchor\" href=\"#gfs写文件-write-file-1\"></a> GFS写文件 Write File 1</h4>\n<p>GFS写文件的过程更加复杂。我们只讨论客户端的记录追加（Record Append），想把buffer中的数据，追加到这个文件名对应的文件中。对于写文件，客户端会向Master节点发送请求说：我想向这个文件名对应的文件追加数据，请告诉我文件中最后一个Chunk的位置。</p>\n<p>当有多个客户端同时写同一个文件时，一个客户端并不能知道文件究竟有多长。这个时候，客户端可以向Master节点查询哪个Chunk服务器保存了文件的最后一个Chunk。对于读文件来说，可以从任何最新的Chunk副本读取数据，但是对于写文件来说，必须要通过Chunk的主副本（Primary Chunk）来写入。对于某个特定的Chunk来说，在某一个时间点，Master不一定指定了Chunk的主副本。所以，写文件的时候，需要考虑Chunk的主副本不存在的情况。</p>\n<p>对于Master节点来说，如果发现Chunk的主副本不存在，Master会找出所有存有Chunk最新副本的Chunk服务器。Master节点的工作就是弄清楚在追加文件时，客户端应该与哪个Chunk服务器进行通信。</p>\n<p>每个Chunk可能同时有多个副本，最新的副本是指，副本中保存的版本号与Master中记录的Chunk的版本号一致。Chunk副本中的版本号是由Master节点下发的，所以Master节点知道，对于一个特定的Chunk，哪个版本号是最新的。所以Chunk的版本号在Master节点上需要保存在磁盘这种非易失的存储中。如果版本号在故障中丢失，这时，Master无法区分Chunk服务器的数据是旧的或者是新的。</p>\n<p>回到之前讲的，当客户端想要对文件进行追加，但是Master又不知道文件尾的Chunk对应的Primary在哪时，Master会等所有存储了最新Chunk版本的服务器集合完成，然后挑选一个作为Primary，其他的作为Secondary。之后，Master会增加版本号，并将版本号写入磁盘，这样就不会丢失这个版本号数据。接下来，Master节点会向Primary和Secondary副本对应的服务器发送消息并告诉它们，谁是Primary，谁是Secondary，Chunk的新版本是什么。Primary和Secondary服务器都会将版本号存储在本地的磁盘中。这样，当它们因为故障重启时，它们可以向Master报告本地保存的Chunk的实际版本号。</p>\n<p>所以，现在我们有了一个Primary，它可以接收来自客户端的请求，并将写请求应用到多个Chunk服务器中。之所以要管理Chunk的版本号，是因为这样Master可以将实际更新Chunk的能力转移给Primary服务器。并且在将版本号更新到Primary和Secondary服务器之后，如果Master节点故障重启，还是可以在相同的Primary和Secondary服务器上继续更新Chunk。</p>\n<p>现在，Master节点通知Primary和Secondary服务器，你们可以修改这个Chunk。它还给Primary一个租约，这个租约告诉Primary说，在接下来的60秒中，你将是Primary，60秒之后你必须停止成为Primary。这种机制可以确保我们不会同时有两个Primary，我们之后会再做讨论（之后的问答中有一个专门的问题讨论）。</p>\n<p>现在来看GFS论文的图2。假设现在Master节点告诉客户端谁是Primary，谁是Secondary，GFS提出了一种聪明的方法来实现写请求的执行序列。客户端会将要追加的数据发送给Primary和Secondary服务器，这些服务器会将数据写入到一个临时位置。所以最开始，这些数据不会追加到文件中。当所有的服务器都返回确认消息说，已经有了要追加的数据，客户端会向Primary服务器发送一条消息说，你和所有的Secondary服务器都有了要追加的数据，现在我想将这个数据追加到这个文件中。Primary服务器或许会从大量客户端收到大量的并发请求，Primary服务器会以某种顺序，一次只执行一个请求。对于每个客户端的追加数据请求（也就是写请求），Primary会查看当前文件结尾的Chunk，并确保Chunk中有足够的剩余空间，然后将客户端要追加的数据写入Chunk的末尾。并且，Primary会通知所有的Secondary服务器也将客户端要追加的数据写入在它们自己存储的Chunk末尾。这样，包括Primary在内的所有副本，都会收到通知将数据追加在Chunk的末尾。</p>\n<p>但是对于Secondary服务器来说，它们可能可以执行成功，也可能会执行失败，比如说磁盘空间不足，比如说故障了，比如说Primary发出的消息网络丢包了。如果Secondary实际真的将数据写入到了本地磁盘存储的Chunk中，它会回复“yes”给Primary。如果所有的Secondary服务器都成功将数据写入，并将“yes”回复给了Primary，并且Primary也收到了这些回复。Primary会向客户端返回写入成功。如果至少一个Secondary服务器没有回复Primary，或者回复了，但是内容却是：抱歉，一些不好的事情发生了，比如说磁盘空间不够，或者磁盘故障了，Primary会向客户端返回写入失败。</p>\n<p>GFS论文说，如果客户端从Primary得到写入失败，那么客户端应该重新发起整个追加过程。客户端首先会重新与Master交互，找到文件末尾的Chunk；之后，客户端需要重新发起对于Primary和Secondary的数据追加操作。</p>\n<h4 id=\"gfs写文件-write-file-2\"><a class=\"markdownIt-Anchor\" href=\"#gfs写文件-write-file-2\"></a> GFS写文件 Write File 2</h4>\n<p>这部分主要是写文件操作的问答</p>\n<blockquote>\n<p>待续</p>\n</blockquote>\n<h4 id=\"gfs的一致性\"><a class=\"markdownIt-Anchor\" href=\"#gfs的一致性\"></a> GFS的一致性</h4>\n<p>这里最重要的部分就是重复我们刚刚讨论过的内容。</p>\n<p>当我们追加数据时，面对Chunk的三个副本，当客户端发送了一个追加数据的请求，要将数据A追加到文件末尾，所有的三个副本，包括一个Primary和两个Secondary，都成功的将数据追加到了Chunk，所以Chunk中的第一个记录是A。</p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimages%5C%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201114161415.png\" alt=\"微信截图_20201114161415\" /></p>\n<p>假设第二个客户端加入进来，想要追加数据B，但是由于网络问题发送给某个副本的消息丢失了。所以，追加数据B的消息只被两个副本收到，一个是Primary，一个是Secondary。这两个副本都在文件中追加了数据B，所以，现在我们有两个副本有数据B，另一个没有。</p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimages%5C%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201114161458.png\" alt=\"微信截图_20201114161458\" /></p>\n<p>之后，第三个客户端想要追加数据C，并且第三个客户端记得下图中左边第一个副本是Primary。Primary选择了偏移量，并将偏移量告诉Secondary，将数据C写在Chunk的这个位置。三个副本都将数据C写在这个位置。</p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimages%5C%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201114161601.png\" alt=\"微信截图_20201114161601\" /></p>\n<p>对于数据B来说，客户端会收到写入失败的回复，客户端会重发写入数据B的请求。所以，第二个客户端会再次请求追加数据B，或许这次数据没有在网络中丢包，并且所有的三个副本都成功追加了数据B。现在三个副本都在线，并且都有最新的版本号。</p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimages%5C%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201114161638.png\" alt=\"微信截图_20201114161638\" /></p>\n<p>之后，如果一个客户端读文件，则读取到的内容取决于读取的是Chunk的哪个副本。客户端总共可以看到三条数据，但是取决于不同的副本，读取数据的顺序是不一样的。</p>\n<p>或许最坏的情况是，一些客户端写文件时，因为其中一个Secondary未能成功执行数据追加操作，客户端从Primary收到写入失败的回复。在客户端重新发送写文件请求之前，客户端就故障了。所以，你有可能进入这种情形：数据D出现在某些副本中，而其他副本则完全没有。</p>\n<p>在GFS的这种工作方式下，如果Primary返回写入成功，那么一切都还好，如果Primary返回写入失败，就不是那么好了。Primary返回写入失败会导致不同的副本有完全不同的数据。</p>\n<blockquote>\n<p>提问：为什么GFS要设计成多个副本不一致？</p>\n<p>Robert教授：不明白GFS设计者为什么这么做。GFS可以设计成多个副本完全精确同步的，在lab2和lab3中设计的系统，其中的副本是同步的。你们也会知道，为了保持同步，你们要使用各种各样的技术。</p>\n</blockquote>\n<p>GFS这样设计的理由是足够的简单，但是同时也给应用程序暴露了一些奇怪的数据。这里希望为应用程序提供一个相对简单的写入接口，但应用程序需要容忍读取数据的乱序。如果应用程序不能容忍乱序，应用程序要么可以通过在文件中写入序列号，这样读取的时候能自己识别顺序。</p>\n<p>最后，让我花一分钟来介绍GFS在它生涯的前5-10年在Google的出色表现，总的来说，它取得了巨大的成功，许多许多Google的应用都使用了它，许多Google的基础架构，例如BigTable和MapReduce是构建在GFS之上，所以GFS在Google内部广泛被应用。它最严重的局限可能在于，它只有一个Master节点，会带来以下问题：</p>\n<ul>\n<li>Master节点必须为每个文件，每个Chunk维护表单，随着GFS的应用越来越多，这意味着涉及的文件也越来越多，最终Master会耗尽内存来存储文件表单。你可以增加内存，但是单台计算机的内存也是有上限的。所以，这是人们遇到的最早的问题。</li>\n<li>除此之外，单个Master节点要承载数千个客户端的请求，而Master节点的CPU每秒只能处理数百个请求，尤其Master还需要将部分数据写入磁盘，很快，客户端数量超过了单个Master的能力。</li>\n<li>另一个问题是，应用程序发现很难处理GFS奇怪的语义（本节最开始介绍的GFS的副本数据的同步，或者可以说不同步）。</li>\n<li>最后一个问题是，从我们读到的GFS论文中，Master节点的故障切换不是自动的。GFS需要人工干预来处理已经永久故障的Master节点，并更换新的服务器，这可能需要几十分钟甚至更长的而时间来处理。对于某些应用程序来说，这个时间太长了。</li>\n</ul>\n<h3 id=\"l4-primary-backup-replication\"><a class=\"markdownIt-Anchor\" href=\"#l4-primary-backup-replication\"></a> L4 Primary-Backup Replication</h3>\n<h4 id=\"复制-replication\"><a class=\"markdownIt-Anchor\" href=\"#复制-replication\"></a> 复制 Replication</h4>\n<p>这节主要讲了关于容错（Fault-Tolerance）和复制（Replication）的内容。</p>\n<p>容错是为了用来提高可用性。当服务出现故障，例如硬件和网路故障，我们仍然想提供服务，这时候就需要用到复制这个工具。但是，复制也不是万能的，复制能解决什么呢？</p>\n<p>复制能解决单台计算机的故障，指单台计算机的fail-stop。例如单纯的停止运行，电源或者网络失效。</p>\n<p>但是复制不能处理软件中的bug和硬件中的缺陷。如果软件或者硬件有bug，那么复制对我们没有任何帮助。</p>\n<p>当然，足够幸运的话，复制也可以处理一些硬件和软件的bug。总的来说，我们还是只能期望复制能处理fail-stop错误。</p>\n<p>另一个关于复制的问题：复制所需的资源消耗是否值得？</p>\n<h4 id=\"状态转移和复制状态机\"><a class=\"markdownIt-Anchor\" href=\"#状态转移和复制状态机\"></a> 状态转移和复制状态机</h4>\n<p>复制有两种方法：<strong>状态转移</strong>（State Transfer）和<strong>复制状态机</strong>（Replicated State Machine），这门课中我们主要介绍后者。</p>\n<p>如果有一个服务器的两个副本，让其保持同步，这样Primary出现故障的时候，Backup有所有的信息，就可以接管服务。状态转移的思想：Primary将自己完整的状态（比如内存中的内容），拷贝并发送给Backup。当Primary故障了，Backup就从保存的最新的状态开始运行。VMware FT没有采用这种方法，因为需要通过网络发送的数据量太多。为了提升效率，只发送上次同步后变更的内容就行了。</p>\n<p>复制状态机基于：我们想复制的大部分的服务或者计算机软件都有一些确定的内部操作，不确定的部分是外部的输入。通常情况下，如果一台计算机没有外部影响，它只是一个接一个的执行指令，每条指令执行的是计算机中内存和寄存器上确定的函数，只有当外部事件干预时，才会发生一些预期外的事。</p>\n<p>所以，复制状态机不会在不同的副本之间发送状态，相应的，它只会从Primary将这些外部事件发送给Backup。通常来说，如果有两台计算机，如果它们从相同的状态开始，并且它们以相同的顺序，在相同的时间，看到了相同的输入，那么它们会一直互为副本，并且一直保持一致。</p>\n<p>状态转移传输的是可能是内存，而复制状态机会将来自客户端的操作或者其他外部事件，从Primary传输到Backup。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115154354.png\" width=\"500px\"> </div>\n<p>人们倾向于使用复制状态机的原因是，通常来说，外部操作或者事件比服务的状态要小。</p>\n<p>有趣的是，或许你已经注意到了，VMware FT论文讨论的都是复制状态机，并且只涉及了单核CPU，目前还不确定文中的方案如何扩展到多核处理器中。在多核的机器中，两个核交互处理指令的行为是不确定的，所以就算Primary和Backup执行相同的指令，在多核的机器中，它们也不一定产生相同的结果。</p>\n<p>回到什么样的状态需要被复制这个话题。VMware FT论文对这个问题有一个非常有趣的回答。它会复制机器的完整状态，这包括了所有的内存，所有的寄存器。这是一个非常详细的复制方案，Primary和Backup，即使在最底层也是完全一样的。对于复制方案来说，这种类型是非常少见的。总的来说，大部分场景都是应用程序级别的复制，就像GFS和其他这门课程中会学习的其他论文一样。</p>\n<p>VMware FT的独特之处在于，它从机器级别实现复制，因此它不关心你在机器上运行什么样的软件，它就是复制底层的寄存器和内存。</p>\n<h4 id=\"vmware-ft工作原理\"><a class=\"markdownIt-Anchor\" href=\"#vmware-ft工作原理\"></a> VMware FT工作原理</h4>\n<p>VMware FT需要两个物理服务器。将Primary和Backup运行在一台服务器的两个虚拟机里面毫无意义，因为容错本来就是为了能够抵御硬件故障。所以，你至少需要两个物理服务器运行VMM，Primary在其中一个物理服务器上，Backup在另一个物理服务器上。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115161607.png\" width=\"500px\"> </div>\n<p>两个物理服务器上的VMM会为每个虚拟机分配一段内存，这两段内存的镜像需要完全一致，或者我们的目的就是让Primary和Backup的内存镜像完全一致。所以现在，我们有两个物理服务器，它们每一个都运行了一个虚拟机，每个虚拟机里面都有我们关心的服务的一个拷贝。我们假设有一个网络连接了这两个物理服务器。</p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimages%5C%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201115161820.png\" alt=\"微信截图_20201115161820\" /></p>\n<p>此外，在这个LAN上，还有一些客户端。所以，基本的工作流程是，我们假设这两个副本，或者说这两个虚拟机：Primary和Backup，互为副本。某些我们服务的客户端，向Primary发送了一个请求，这个请求以网络数据包的形式发出。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115162121.png\" width=\"500px\"> </div>\n<p>这个网络数据包产生一个中断，之后这个中断送到了VMM。VMM可以发现这是一个发给我们的多副本服务的一个输入，所以这里VMM会做两件事情：</p>\n<ul>\n<li>在虚拟机的Guest操作系统中，模拟网络数据包到达的中断，以将相应的数据送给应用程序的Primary副本。</li>\n<li>除此之外，因为这是一个多副本虚拟机的输入，VMM会将网络数据包拷贝一份，并通过网络送给Backup虚机所在的VMM。</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115162252.png\" width=\"500px\"> </div>\n<p>Backup虚机所在的VMM知道这是发送给Backup虚机的网络数据包，它也会在Backup虚机中模拟网络数据包到达的中断，以将数据发送给应用程序的Backup。所以现在，Primary和Backup都有了这个网络数据包，它们有了相同的输入，再加上许多细节，它们将会以相同的方式处理这个输入，并保持同步。</p>\n<p>当然，虚机内的服务会回复客户端的请求。在Primary虚机里面，服务会生成一个回复报文，并通过VMM在虚机内模拟的虚拟网卡发出。之后VMM可以看到这个报文，它会实际的将这个报文发送给客户端。</p>\n<p>另一方面，由于Backup虚机运行了相同顺序的指令，它也会生成一个回复报文给客户端，并将这个报文通过它的VMM模拟出来的虚拟网卡发出。但是它的VMM知道这是Backup虚机，会丢弃这里的回复报文。所以这里，Primary和Backup都看见了相同的输入，但是只有Primary虚机实际生成了回复报文给客户端。</p>\n<p>这里有一个术语，VMware FT论文中将Primary到Backup之间同步的数据流的通道称之为Log Channel。虽然都运行在一个网络上，但是这些从Primary发往Backup的事件被称为Log Channel上的Log Event/Entry。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115162450.png\" width=\"500px\"> </div>\n<p>当Primary因为故障停止运行时，FT（Fault-Tolerance）就开始工作了。从Backup的角度来说，它将不再收到来自于Log Channel上的Log条目。实际中，Backup每秒可以收到很多条Log，其中一个来源就是来自于Primary的定时器中断。每个Primary的定时器中断都会生成一条Log条目并发送给Backup，这些定时器中断每秒大概会有100次。所以，如果Primary虚机还在运行，Backup必然可以期望从Log Channel收到很多消息。如果Primary虚机停止运行了，那么Backup的VMM就会说：天，我都有1秒没有从Log Channel收到任何消息了，Primary一定是挂了或者出什么问题了。当Backup不再从Primary收到消息，VMware FT论文的描述是，Backup虚机会上线（Go Alive）。这意味着，Backup不会再等待来自于Primary的Log Channel的事件，Backup的VMM会让Backup自由执行，而不是受来自于Primary的事件驱动。Backup的VMM会在网络中做一些处理（猜测是发GARP），让后续的客户端请求发往Backup虚机，而不是Primary虚机。同时，Backup的VMM不再会丢弃Backup虚机的输出。当然，它现在已经不再是Backup，而是Primary。所以现在，左边的虚机直接接收输入，直接产生输出。到此为止，Backup虚机接管了服务。</p>\n<p>类似的一个场景，虽然没那么有趣，但是也需要能正确工作。如果Backup虚机停止运行，Primary也需要用一个类似的流程来抛弃Backup，停止向它发送事件，并且表现的就像是一个单点的服务，而不是一个多副本服务一样。所以，只要有一个因为故障停止运行，并且不再产生网络流量时，Primary和Backup中的另一个都可以上线继续工作。</p>\n<h4 id=\"非确定性事件-non-deterministic-events\"><a class=\"markdownIt-Anchor\" href=\"#非确定性事件-non-deterministic-events\"></a> 非确定性事件 Non-Deterministic Events</h4>\n<p>目前为止，我们都假设只要Backup虚机也看到了来自客户端的请求，经过同样的执行过程，那么它就会与Primary保持一致，但是这背后其实有很多很重要的细节。就如其他同学之前指出的一样，其中一个问题是存在非确定性（Non-Deterministic）的事件。虽然通常情况下，代码执行都是直接明了的，但并不是说计算机中每一个指令都是由计算机内存的内容而确定的行为。这一节，我们来看一下不由当前内存直接决定的指令。如果我们不够小心，这些指令在Primary和Backup的运行结果可能会不一样。这些指令就是所谓的非确定性事件。所以，设计者们需要弄明白怎么让这一类事件能在Primary和Backup之间同步。</p>\n<p>非确定性事件可以分成几类:</p>\n<ul>\n<li>客户端的输入。假设有一个来自客户端的输入，这个输入随时可能会送法，所以它是不可预期的。客户端请求何时送达， 会有什么样的内容，并不取决于服务当前的状态。我们讨论的系统专注于通过网络来进行交互，所以这里的系统输入的唯一格式就是网络数据包。所以当我们说输入的时候，我们实际上是指接收到了一个网络数据包。而一个网络数据包对于我们来说有两部分，一个是数据包中的数据，另一个是提示数据包送达了的中断。当网络数据包送达时，通常网卡的DMA（Direct Memory Access）会将网络数据包的内容拷贝到内存，之后触发一个中断。操作系统会在处理指令的过程中消费这个中断。对于Primary和Backup来说，这里的步骤必须看起来是一样的，否则它们在执行指令的时候就会出现不一致。所以，这里的问题是，中断在什么时候，具体在指令流中的哪个位置触发？对于Primary和Backup，最好要在相同的时间，相同的位置触发，否则执行过程就是不一样的，进而会导致它们的状态产生偏差。所以，我们不仅关心网络数据包的内容，还关心中断的时间。</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116163150.png\" width=\"500px\"> </div>\n<ul>\n<li>另外，有一些指令在不同的计算机上的行为是不一样的，这一类指令称为怪异指令，比如：\n<ul>\n<li>随机数生成器</li>\n<li>获取当前时间的指令，在不同时间调用会得到不同的结果</li>\n<li>获取计算机的唯一ID</li>\n</ul>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116163420.png\" width=\"500px\"> </div>\n<ul>\n<li>另外一个常见的非确定事件，在VMware FT论文中没有讨论，就是多CPU的并发。我们现在讨论的都是一个单进程系统，没有多CPU多核这种事情。之所以多核会导致非确定性事件，是因为当服务运行在多CPU上时，指令在不同的CPU上会交织在一起运行，进而产生的指令顺序是不可预期的。所以如果我们在Backup上运行相同的代码，并且代码并行运行在多核CPU上，硬件会使得指令以不同（于Primary）的方式交织在一起，而这会引起不同的运行结果。假设两个核同时向同一份数据请求锁，在Primary上，核1得到了锁；在Backup上，由于细微的时间差别核2得到了锁，那么执行结果极有可能完全不一样，这里其实说的就是（在两个副本上）不同的线程获得了锁。所以，多核是一个巨大的非确定性事件来源，VMware FT论文完全没有讨论它，并且它也不适用与我们这节课的讨论。</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116163754.png\" width=\"500px\"> </div>\n<blockquote>\n<p>学生提问：如何确保VMware FT管理的服务只使用单核？<br />\nRobert教授：服务不能使用多核并行计算。硬件几乎可以肯定是多核并行的，但是这些硬件在VMM之下。在这篇论文中，VMM暴露给运行了Primary和Backup虚机操作系统的硬件是单核的。我猜他们也没有一种简单的方法可以将这里的内容应用到一个多核的虚拟机中。</p>\n</blockquote>\n<p>所有的事件都需要通过Log Channel，从Primary同步到Backup。有关日志条目的格式在论文中没有怎么描述，但是我（Robert教授）猜日志条目中有三样东西：</p>\n<ol>\n<li>事件发生时的指令序号。因为如果要同步中断或者客户端输入数据，最好是Primary和Backup在相同的指令位置看到数据，所以我们需要知道指令序号。这里的指令号是自机器启动以来指令的相对序号，而不是指令在内存中的地址。比如说，我们正在执行第40亿零79条指令。所以日志条目需要有指令序号。对于中断和输入来说，指令序号就是指令或者中断在Primary中执行的位置。对于怪异的指令（Weird instructions），比如说获取当前的时间来说，这个序号就是获取时间这条指令执行的序号。这样，Backup虚机就知道在哪个指令位置让相应的事件发生。</li>\n<li>日志条目的类型，可能是普通的网络数据输入，也可能是怪异指令。</li>\n<li>最后是数据。如果是一个网络数据包，那么数据就是网络数据包的内容。如果是一个怪异指令，数据将会是这些怪异指令在Primary上执行的结果。这样Backup虚机就可以伪造指令，并提供与Primary相同的结果。</li>\n</ol>\n<p>举个例子，Primary和Backup两个虚机内部的guest操作系统需要在模拟的硬件里有一个定时器，能够每秒触发100次中断，这样操作系统才可以通过对这些中断进行计数来跟踪时间。因此，这里的定时器必须在Primary和Backup虚机的完全相同位置产生中断，否则这两个虚机不会以相同的顺序执行指令，进而可能会产生分歧。所以，在运行了Primary虚机的物理服务器上，有一个定时器，这个定时器会计时，生成定时器中断并发送给VMM。在适当的时候，VMM会停止Primary虚机的指令执行，并记下当前的指令序号，然后在指令序号的位置插入伪造的模拟定时器中断，并恢复Primary虚机的运行。之后，VMM将指令序号和定时器中断再发送给Backup虚机。虽然Backup虚机的VMM也可以从自己的物理定时器接收中断，但是它并没有将这些物理定时器中断传递给Backup虚机的guest操作系统，而是直接忽略它们。当来自于Primary虚机的Log条目到达时，Backup虚机的VMM配合特殊的CPU特性支持，会使得物理服务器在相同的指令序号处产生一个定时器中断，之后VMM获取到这个中断，并伪造一个假的定时器中断，并将其送入Backup虚机的guest操作系统，并且这个定时器中断会出现在与Primary相同的指令序号位置。</p>\n<blockquote>\n<p>学生提问：这里的操作依赖硬件的定制吗？（实际上我听不清，猜的）<br />\nRobert教授：是的，这里依赖于CPU的一些特殊的定制，这样VMM就可以告诉CPU，执行1000条指令之后暂停一下，方便VMM将伪造的中断注入，这样Backup虚机就可以与Primary虚机在相同的指令位置触发相同的中断，执行相同的指令。之后，VMM会告诉CPU恢复执行。这里需要一些特殊的硬件，但是现在看起来所有的Intel芯片上都有这个功能，所以也不是那么的特殊。或许15年前，这个功能还是比较新鲜的，但是现在来说就比较正常了。现在这个功能还有很多其他用途，比如说做CPU时间性能分析，可以让处理器每1000条指令中断一次，这里用的是相同的硬件让微处理器每1000条指令产生一个中断。所以现在，这是CPU中非常常见的一个小工具。<br />\n学生提问：如果Backup领先了Primary会怎么样？<br />\nRobert教授： 场景可能是这样，Primary即将在第100万条指令处中断，但是Backup已经执行了100万零1条指令了。如果我们让这种场景发生，那么Primary的中断传输就太晚了。如果我们允许Backup执行领先Primary，就会使得中断在Backup中执行位置落后于Primary。所以我们不能允许这种情况发生，我们不能允许Backup在执行指令时领先于Primary。<br />\nVMware FT是这么做的。它会维护一个来自于Primary的Log条目的等待缓冲区，如果缓冲区为空，Backup是不允许执行指令的。如果缓冲区不为空，那么它可以根据Log的信息知道Primary对应的指令序号，并且会强制Backup虚机最多执行指令到这个位置。所以，Backup虚机的CPU总是会被通知执行到特定的位置就停止。Backup虚机只有在Log缓冲区中有数据才会执行，并且只会执行到Log条目对应的指令序号。在Primary产生的第一个Log，并且送达Backup之前，Backup甚至都不能执行指令，所以Backup总是落后于Primary至少一个Log。如果物理服务器的资源占用过多，导致Backup执行变慢，那么Backup可能落后于Primary多个Log条目。</p>\n</blockquote>\n<p>网络数据包送达时，有一个细节会比较复杂。当网络数据包到达网卡时，如果我们没有运行虚拟机，网卡会将网络数据包通过DMA的方式送到计算机的关联内存中。现在我们有了虚拟机，并且这个网络数据包是发送给虚拟机的，在虚拟机内的操作系统可能会监听DMA并将数据拷贝到虚拟机的内存中。因为VMware的虚拟机设计成可以支持任何操作系统，我们并不知道网络数据包到达时操作系统会执行什么样的操作，有的操作系统或许会真的监听网络数据包拷贝到内存的操作。</p>\n<p>我们不能允许这种情况发生。如果我们允许网卡直接将网络数据包DMA到Primary虚机中，我们就失去了对于Primary虚机的时序控制，因为我们也不知道什么时候Primary会收到网络数据包。所以，实际中，物理服务器的网卡会将网络数据包拷贝给VMM的内存，之后，网卡中断会送给VMM，并说，一个网络数据包送达了。这时，VMM会暂停Primary虚机，记住当前的指令序号，将整个网络数据包拷贝给Primary虚机的内存，之后模拟一个网卡中断发送给Primary虚机。同时，将网络数据包和指令序号发送给Backup。Backup虚机的VMM也会在对应的指令序号暂停Backup虚机，将网络数据包拷贝给Backup虚机，之后在相同的指令序号位置模拟一个网卡中断发送给Backup虚机。这就是论文中介绍的Bounce Buffer机制。</p>\n<h4 id=\"输出控制-output-rule\"><a class=\"markdownIt-Anchor\" href=\"#输出控制-output-rule\"></a> 输出控制 Output Rule</h4>\n<p>对于VMware FT系统的输出，也是值得说一下的。在这个系统中，唯一的输出就是对于客户端请求的响应。客户端通过网络数据包将数据送入，服务器的回复也会以网络数据包的形式送出。我之前说过，Primary和Backup虚机都会生成回复报文，之后通过模拟的网卡送出，但是<strong>只有Primary虚机才会真正的将回复送出</strong>，而Backup虚机只是将回复简单的<strong>丢弃</strong>掉。</p>\n<p>好吧，真实情况会复杂一些。假设我们正在跑一个简单的数据库服务器，这个服务器支持一个计数器自增操作，工作模式是这样，客户端发送了一个自增的请求，服务器端对计数器加1，并返回新的数值。假设最开始一切正常，在Primary和Backup中的计数器都存了10。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201227.png\" width=\"500px\"> </div>\n<p>现在，局域网的一个客户端发送了一个自增的请求给Primary。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201309.png\" width=\"500px\"> </div>\n<p>这个请求在Primary虚机的软件中执行，Primary会发现，现在的数据是10，我要将它变成11，并回复客户端说，现在的数值是11。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201348.png\" width=\"500px\"> </div>\n<p>这个请求也会发送给Backup虚机，并将它的数值从10改到11。Backup也会产生一个回复，但是这个回复会被<strong>丢弃</strong>，这是我们期望发生的。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201418.png\" width=\"500px\"> </div>\n<p>但是，你需要考虑，如果在一个不恰当的时间，出现了故障会怎样？在这门课程中，你需要始终考虑，故障的最坏场景是什么，故障会导致什么结果？在这个例子中，假设Primary确实生成了回复给客户端，但是之后立马崩溃了。更糟糕的是，现在网络不可靠，Primary发送给Backup的Log条目在Primary崩溃时也丢包了。那么现在的状态是，客户端收到了回复说现在的数据是11，但是Backup虚机因为没有看到客户端请求，所以它保存的数据还是10。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201524.png\" width=\"500px\"> </div>\n<p>现在，因为察觉到Primary崩溃了，Backup接管服务。这时，客户端再次发送一个自增的请求，这个请求发送到了原来的Backup虚机，它会将自身的数值从10增加到11，并产生第二个数据是11的回复给客户端。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201559.png\" width=\"500px\"> </div>\n<p>如果客户端比较前后两次的回复，会发现一个明显不可能的场景（两次自增的结果都是11）。</p>\n<p>因为VMware FT的优势就是在不修改软件，甚至软件都不需要知道复制的存在的前提下，就能支持容错，所以我们也不能修改客户端让它知道因为容错导致的副本切换触发了一些奇怪的事情。在VMware FT场景里，我们没有修改客户端这个选项，因为整个系统只有在不修改服务软件的前提下才有意义。所以，前面的例子是个大问题，我们不能让它实际发生。有人还记得论文里面是如何防止它发生的吗？</p>\n<p>论文里的解决方法就是控制输出（Output Rule）。直到Backup虚机确认收到了相应的Log条目，Primary虚机不允许生成任何输出。让我们回到Primary崩溃前，并且计数器的内容还是10，Primary上的正确的流程是这样的：</p>\n<ol>\n<li>客户端输入到达Primary。</li>\n<li>Primary的VMM将输入的拷贝发送给Backup虚机的VMM。所以有关输入的Log条目在Primary虚机生成输出之前，就发往了Backup。之后，这条Log条目通过网络发往Backup，但是过程中有可能丢失。</li>\n<li>Primary的VMM将输入发送给Primary虚机，Primary虚机生成了输出。现在Primary虚机的里的数据已经变成了11，生成的输出也包含了11。但是VMM不会无条件转发这个输出给客户端。</li>\n<li>Primary的VMM会等到之前的Log条目都被Backup虚机确认收到了才将输出转发给客户端。所以，包含了客户端输入的Log条目，会从Primary的VMM送到Backup的VMM，Backup的VMM不用等到Backup虚机实际执行这个输入，就会发送一个表明收到了这条Log的ACK报文给Primary的VMM。当Primary的VMM收到了这个ACK，才会将Primary虚机生成的输出转发到网络中。</li>\n</ol>\n<p>所以，这里的核心思想是，确保在客户端看到对于请求的响应时，Backup虚机一定也看到了对应的请求，或者说至少在Backup的VMM中缓存了这个请求。这样，我们就不会陷入到这个奇怪的场景：客户端已经收到了回复，但是因为有故障发生和副本切换，新接手的副本完全不知道客户端之前收到了对应的回复。</p>\n<p>如果在上面的步骤2中，Log条目通过网络发送给Backup虚机时丢失了，然后Primary虚机崩溃了。因为Log条目丢失了， 所以Backup节点也不会发送ACK消息。所以，如果Log条目的丢失与Primary的崩溃同一时间发生，那么Primary必然在VMM将回复转发到网络之前就崩溃了，所以客户端也就不会收到任何回复，所以客户端就不会观察到任何异常。这就是输出控制（Output rule）。</p>\n<p>所以，Primary会等到Backup已经有了最新的数据，才会将回复返回给客户端。这几乎是所有的复制方案中对于性能产生伤害的地方。这里的同步等待使得Primary不能超前Backup太多，因为如果Primary超前了并且又故障了，对应的就是Backup的状态落后于客户端的状态。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201957.png\" width=\"500px\"> </div>\n<p>所以，几乎每一个复制系统都有这个问题，在某个时间点，Primary必须要停下来等待Backup，这对于性能是实打实的限制。即使副本机器在相邻的机架上，Primary节点发送消息并收到回复仍然需要0.5毫秒的延时。如果我们想要能承受类似于地震或者城市范围内的断电等问题，Primary和Backup需要在不同的城市，之间可能有5毫秒的差距。如果我们将两个副本放置在不同的城市，每次生成一个输出时，都需要至少等待5毫秒，等Backup确认收到了前一个Log条目，然后VMM才能将输出发送到网络。对于一些低请求量的服务，这不是问题。但是如果我们的服务要能够每秒处理数百万个请求，那就会对我们的性能产生巨大的伤害。</p>\n<p>所以如果条件允许，人们会更喜欢使用在更高层级做复制的系统（详见4.2 最后两段）。这样的复制系统可以理解操作的含义，这样的话Primary虚机就不必在每个网络数据包暂停同步一下，而是可以在一个更高层级的操作层面暂停来做同步，甚至可以对一些只读操作不做暂停。但是这就需要一些特殊的应用程序层面的复制机制。</p>\n<blockquote>\n<p>学生提问：其实不用暂停Primary虚机的执行，只需要阻止Primary虚机的输出就行吧？<br />\nRobert教授：你是对的。所以，这里的同步等待或许没有那么糟糕。但是不管怎么样，在一个系统中，本来可以几微秒响应一个客户端请求，而现在我们需要先更新另一个城市的副本，这可能会将一个10微秒的操作变成10毫秒。<br />\n学生提问：这里虽然等待时间比较长，如果提高请求的并发度，是不是还是可以有高性能？<br />\nRobert教授：如果你有大量的客户端并发的发送请求，那么你或许还是可以在高延时的情况下获得高的吞吐量，但是就需要你有足够聪明的设计和足够的幸运。<br />\n学生提问：可以不可以将Log保留在Primary虚机对应的物理服务器内存中，这样就不用长时间的等待了。<br />\nRobert教授：这是一个很好的想法。但是如果你这么做的话，物理服务器宕机，Log就丢失了。通常，如果服务器故障，就认为服务器中的所有数据都没了，其中包括内存的内容。如果故障是某人不小心将服务器的电源拔了，即使Primary对应的物理服务器有电池供电的RAM，Backup也没办法从其获取Log。实际上，系统会在Backup的内存中记录Log。为了保证系统的可靠性，Primary必须等待Backup的ACK才真正输出。你这里的想法很好，但是我们还是不能使用Primary的内存来存Log。<br />\n学生提问：能不能输入送到Primary，输出从Backup送出？<br />\nRobert教授：这是个很聪明的想法。我之前完全没有想到过这点。它或许可以工作，我不确定，但是这很有意思。</p>\n</blockquote>\n<h4 id=\"重复输出-duplicated-output\"><a class=\"markdownIt-Anchor\" href=\"#重复输出-duplicated-output\"></a> 重复输出 Duplicated Output</h4>\n<p>还有一种可能的情况是，回复报文已经从VMM发往客户端了，所以客户端收到了回复，但是这时Primary虚机崩溃了。而在Backup侧，客户端请求还堆积在Backup对应的VMM的Log等待缓冲区（详见4.4倒数第二个学生提问），也就是说客户端请求还没有真正发送到Backup虚机中。当Primary崩溃之后，Backup接管服务，Backup首先需要消费所有在等待缓冲区中的Log，以保持与Primay在相同的状态，这样Backup才能以与Primary相同的状态接管服务。假设最后一条Log条目对应来自客户端的请求，那么Backup会在处理完客户端请求对应的中断之后，再上线接管服务。这意味着，Backup会将自己的计数器增加到11（原来是10，处理完客户端的自增请求变成11），并生成一个输出报文。因为这时，Backup已经上线接管服务，它生成的输出报文会被它的VMM发往客户端。这样客户端会收到两个内容是11的回复。如果这里的情况真的发生了，那么明显这也是一个异常行为，因为不可能在运行在单个服务器的服务上发生这种行为。</p>\n<p>好消息是，几乎可以肯定，客户端通过TCP与服务进行交互，也就是说客户端请求和回复都通过TCP Channel收发。当Backup接管服务时，因为它的状态与Primary相同，所以它知道TCP连接的状态和TCP传输的序列号。当Backup生成回复报文时，这个报文的TCP序列号与之前Primary生成报文的TCP序列号是一样的，这样客户端的TCP栈会发现这是一个重复的报文，它会在TCP层面丢弃这个重复的报文，用户层的软件永远也看不到这里的重复。</p>\n<p>这里可以认为是异常的场景，并且被意外的解决了。但是事实上，对于任何有主从切换的复制系统，基本上不可能将系统设计成不产生重复输出。为了避免重复输出，有一个选项是在两边都不生成输出，但这是一个非常糟糕的做法（因为对于客户端来说就是一次失败的请求）。当出现主从切换时，切换的两边都有可能生成重复的输出，这意味着，某种程度上来说，所有复制系统的客户端需要一种重复检测机制。这里我们使用的是TCP来完成重复检测，如果我们没有TCP，那就需要另一种其他机制，或许是应用程序级别的序列号。</p>\n<p>在lab2和lab3中，基本上可以看到我们前面介绍的所有内容，例如输出控制，你会设计你的复制状态机。</p>\n<blockquote>\n<p>学生提问：太长了，听不太清，直接看回答吧。<br />\nRobert教授：第一部分是对的。当Backup虚机消费了最后一条Log条目，这条Log包含了客户端的请求，并且Backup上线了。从这个时间点开始，我们不需要复制任何东西，因为Primary已经挂了，现在没有任何其他副本。<br />\n如果Primary向客户端发送了一个回复报文，之后，Primary或者客户端关闭了TCP连接，所以现在客户端侧是没有TCP连接的。Primary挂了之后，Backup虚机还是有TCP连接的信息。Backup执行最后一条Log，Backup会生成一个回复报文，但是这个报文送到客户端时，客户端并没有相应的TCP连接信息。客户端会直接丢弃报文，就像这个报文不存在一样。哦不！这里客户端实际会发送一个TCP Reset，这是一个类似于TCP error的东西给Backup虚机，Backup会处理这里的TCP Reset，但是没关系，因为现在只有一个副本，Backup可以任意处理，而不用担心与其他副本有差异。实际上，Backup会直接忽略这个报文。现在Backup上线了，在这个复制系统里面，它不受任何人任何事的限制。<br />\n学生提问：Backup接手服务之后，对于之前的TCP连接，还能用相同的TCP源端口来发送数据吗（因为源端口一般是随机的）？<br />\nRobert教授：你可以这么认为。因为Backup的内存镜像与Primary的完全一致，所以它们会以相同的TCP源端口来发送数据，它们在每一件事情上都是一样的。它们发送的报文每一bit都是一样的。<br />\n学生提问：甚至对于IP地址都会是一样的吗，毕竟这里涉及两个物理服务器？<br />\nRobert教授：在这个层面，物理服务器并没有IP地址。在我们的例子中，Primary虚机和Backup虚机都有IP地址，但是物理服务器和VMM在网络上基本是透明的。物理服务器上的VMM在网络上并没有自己的唯一标识。虚拟机有自己独立的操作系统和独立的TCP栈，但是对于IP地址和其他的关联数据，Primary和Backup是一样的（类似于HA VIP）。当虚机发送一个网络报文，它会以虚机的IP地址和MAC地址来发送，这些信息是直接透传到局域网的，而这正是我们想要的。所以Backup会生成与Primary完全一样的报文。这里有一些tricky，因为如果物理服务器都接在一个以太网交换机上，那么它们必然在交换机的不同端口上，在发生切换时，我们希望以太网交换机能够知道当前主节点在哪，这样才能正常的转发报文，这会有一些额外的有意思的事情。大部分时候，Primary和Backup都是生成相同的报文，并送出。<br />\n（注：早期的VMware虚机都是直接以VLAN或者Flat形式，通过DVS接入到物理网络，所以虚拟机的报文与物理机无关，可以直接在局域网发送。以太网交换机会维护MAC地址表，表明MAC地址与交换机端口的对应，因为Primary和Backup虚机的MAC地址一样，当主从切换时，这个表需要更新，这样同一个目的MAC地址，切换前是发往了Primary虚机所在的物理服务器对应的交换机端口，切换之后是发往了Backup虚机所在的物理服务器对应的交换机端口。交换机MAC地址表的切换通常通过虚机主动发起GARP来更新。）</p>\n</blockquote>\n<h4 id=\"test-and-set-服务\"><a class=\"markdownIt-Anchor\" href=\"#test-and-set-服务\"></a> Test-and-Set 服务</h4>\n<p>最后还有一个细节。我一直都假设Primary出现的是fail-stop故障（详见4.1最开始），但是这不是所有的情况。一个非常常见的场景就是，Primary和Backup都在运行，但是它们之间的网络出现了问题，同时它们各自又能够与一些客户端通信。这时，它们都会以为对方挂了，自己需要上线并接管服务。所以现在，我们对于同一个服务，有两个机器是在线的。因为现在它们都不向彼此发送Log条目，它们自然就出现了分歧。它们或许会因为接收了不同的客户端请求，而变得不一样。</p>\n<p>因为涉及到了计算机网络，那就可能出现上面的问题，而不仅仅是机器故障。如果我们同时让Primary和Backup都在线，那么我们现在就有了脑裂（Split Brain）。这篇论文解决这个问题的方法是，向一个外部的第三方权威机构求证，来决定Primary还是Backup允许上线。这里的第三方就是Test-and-Set服务。</p>\n<p>Test-and-Set服务不运行在Primary和Backup的物理服务器上，VMware FT需要通过网络支持Test-and-Set服务。这个服务会在内存中保留一些标志位，当你向它发送一个Test-and-Set请求，它会设置标志位，并且返回旧的值。Primary和Backup都需要获取Test-and-Set标志位，这有点像一个锁。为了能够上线，它们或许会同时发送一个Test-and-Set请求，给Test-and-Set服务。当第一个请求送达时，Test-and-Set服务会说，这个标志位之前是0，现在是1。第二个请求送达时，Test-and-Set服务会说，标志位已经是1了，你不允许成为Primary。对于这个Test-and-Set服务，我们可以认为运行在单台服务器。当网络出现故障，并且两个副本都认为对方已经挂了时，Test-and-Set服务就是一个仲裁官，决定了两个副本中哪一个应该上线。</p>\n<p>对于这种机制有什么问题吗？</p>\n<blockquote>\n<p>学生提问：只有在网络故障的时候才需要询问Test-and-Set服务吗？<br />\nRobert教授：即使没有网络分区，在所有情况下，两个副本中任意一个觉得对方挂了，哪怕对方真的挂了，想要上线的那个副本仍然需要获得Test-and-Set服务的锁。在6.824这门课程中，有个核心的规则就是，你无法判断另一个计算机是否真的挂了，你所知道的就是，你无法从那台计算机收到网络报文，你无法判断是因为那台计算机挂了，还是因为网络出问题了导致的。所以，Backup看到的是，我收不到来自Primary的网络报文，或许Primary挂了，或许还活着。Primary或许也同时看不到Backup的报文。所以，如果存在网络分区，那么必然要询问Test-and-Set服务。但是实际上没人知道现在是不是网络分区，所以每次涉及到主从切换，都需要向Test-and-Set服务进行查询。所以，当副本想要上线的时候，Test-and-Set服务必须要在线，因为副本需要获取这里的Test-and-Set锁。现在Test-and-Set看起来像是个单点故障（Single-Point-of-Failure）。虽然VMware FT尝试构建一个复制的容错的系统，但是最后，主从切换还是依赖于Test-and-Set服务在线，这有点让人失望。我强烈的认为，Test-and-Set服务本身也是个复制的服务，并且是容错的。几乎可以肯定的是，VMware非常乐意向你售卖价值百万的高可用存储系统，系统内使用大量的复制服务。因为这里用到了Test-and-Set服务，我猜它也是复制的。</p>\n</blockquote>\n<p>你们将要在Lab2和Lab3构建的系统，会帮助你们构建容错的Test-and-Set服务，所以这个问题可以轻易被解决。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"mit-6824-分布式系统笔记\"><a class=\"markdownIt-Anchor\" href=\"#mit-6824-分布式系统笔记\"></a> MIT 6.824 分布式系统笔记</h2>\n<h3 id=\"l3-gfs\"><a class=\"markdownIt-Anchor\" href=\"#l3-gfs\"></a> L3 GFS</h3>\n<h4 id=\"分布式的难点\"><a class=\"markdownIt-Anchor\" href=\"#分布式的难点\"></a> 分布式的难点</h4>\n<p>人们设计大型分布式系统或大型存储系统出发点通常是，他们想获取巨大的性能加成，进而利用数百台计算机的资源来同时完成大量工作。因此，性能问题就成为了最初的诉求。 之后，很自然的想法就是将数据分割放到大量的服务器上，这样就可以并行的从多台服务器读取数据。我们将这种方式称之为分片（Sharding）。</p>\n<p>如果你在成百上千台服务器进行分片，你将会看见常态的故障。如果你有数千台服务器，那么总是会有一台服务器宕机，每天甚至每个小时都可能会发生错误。所以，我们需要自动化的方法而不是人工介入来修复错误。我们需要一个自动的容错系统，这就引出了容错这个话题（fault tolerance）。</p>\n<p>实现容错最有用的一种方法是使用复制，只需要维护2-3个数据的副本，当其中一个故障了，你就可以使用另一个。所以，如果想要容错能力，就得有复制（replication）。</p>\n<p>如果有复制，那就有了两份数据的副本。可以确定的是，如果你不小心，它们就会不一致。所以，你本来设想的是，有了两个数据副本，你可以任意使用其中一个副本来容错。但是如果你不够小心，两个数据的副本就不是完全一致，严格来说，它们就不再互为副本了。而你获取到的数据内容也将取决于你向哪个副本请求数据。这对于应用程序来说就有些麻烦了。所以，如果我们有了复制，我们就有不一致的问题（inconsistency）。</p>\n<p>通过聪明的设计，你可以避免不一致的问题，并且让数据看起来也表现的符合预期。但是为了达到这样的效果，你总是需要额外的工作，需要不同服务器之间通过网络额外的交互，而这样的交互会降低性能。所以如果你想要一致性，你的代价就是低性能。但这明显不是我们最开始所希望的。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111174832.png\" width=\"500px\"> </div>\n<h4 id=\"一种分布式存储错误的设计\"><a class=\"markdownIt-Anchor\" href=\"#一种分布式存储错误的设计\"></a> 一种分布式存储错误的设计</h4>\n<p>对于强一致性或者好的一致性的设备，从应用程序或者客户端来看就像是在和一台服务器在通信。对于一个理想的强一致性模型，你看到的就像是只有一台服务器，一份数据，并且系统一次只做一件事情。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111211740.png\" width=\"500px\"> </div>\n<p>上图表示了一个因服务端接收数据顺序不一样而可能出问题的系统。</p>\n<h4 id=\"gfs的设计目标\"><a class=\"markdownIt-Anchor\" href=\"#gfs的设计目标\"></a> GFS的设计目标</h4>\n<p>GFS的目标是构建一个大型的，快速的文件系统。并且这个文件系统是全局有效的，这样各种不同的应用程序都可以从中读取数据。</p>\n<p>GFS在各个方面对大型的顺序文件读写进行了定制。GFS只会顺序处理，不支持随机访问。</p>\n<h4 id=\"gfs-master节点\"><a class=\"markdownIt-Anchor\" href=\"#gfs-master节点\"></a> GFS Master节点</h4>\n<p>接下来是GFS的大致架构。</p>\n<p>GFS中只有一个Master节点在工作，Master节点保存了文件名和存储位置的对应关系。除此之外，还有大量的Chunk服务器。Master用来管理文件和Chunk的信息，而Chunk服务器用来存储实际的数据。Master节点知道每一个文件对应的Chunk的ID，这些Chunk是64MB大小，它们共同构成了一个文件。如果我有一个1GB的文件，那么Master节点就知道文件的第一个Chunk存储在哪，第二个Chunk存储在哪，等等。当我想读取这个文件中的任意一个部分时，我需要向Master节点查询对应的Chunk在哪个服务器上，之后我可以直接从Chunk服务器读取对应的Chunk数据。</p>\n<p>Master节点内保存的数据内容，主要关心两个表单：</p>\n<ol>\n<li>\n<p>文件名 -&gt; Chunk ID 或者 Chunk Handle数组的对应。这个表单告诉你，文件对应了哪些Chunk</p>\n</li>\n<li>\n<p>Chunk ID -&gt; Chunk 数据 对应关系，包括了：</p>\n<ul>\n<li>每个Chunk存储在哪些服务器上，所以这部分是Chunk服务器的列表</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>每个Chunk当前的版本号，所以Master节点必须记住每个Chunk对应的版本号。\n<ul>\n<li>所有对于Chunk的写操作都必须在主Chunk（Primary Chunk）上顺序处理，主Chunk是Chunk的多个副本之一。所以，Master节点必须记住哪个Chunk服务器持有主Chunk。</li>\n</ul>\n</li>\n<li>并且，主Chunk只能在特定的租约时间内担任主Chunk，所以，Master节点要记住主Chunk的租约过期时间</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111213312.png\" width=\"500px\"> </div>\n<p>以上数据都在内存中，如果Master故障了，这些数据就都丢失了。为了能让Master重启而不丢失数据，Master节点会同时将数据存储在磁盘上。Master会在磁盘上存储Log，每次有数据变更时，Master会在磁盘的Log中追加一条记录，并生成CheckPoint（备份点）。</p>\n<ol>\n<li>\n<p>Chunk Handle的数组（第一个表单）要保存在磁盘上。标记为NV（non-volatile 非易失）这个标记的数据会写到磁盘上</p>\n</li>\n<li>\n<p>Chunk服务器列表不用保存到磁盘上。因为Master节点重启之后可以与所有的Chunk服务器通信，并查询每个Chunk服务器存储了哪些Chunk，标记为V（volatile）</p>\n</li>\n<li>\n<p>版本号要不要写入磁盘取决于GFS如何工作，我认为需要写入磁盘。之后讨论，先标记为NV</p>\n</li>\n<li>\n<p>主Chunk的ID，可以确定不用写入磁盘，因为Master节点重启之后会忘记谁是主Chunk，这个时候，Master节点可以安全指定一个新的主Chunk。所以这里标记成V</p>\n</li>\n<li>\n<p>类似的，租约过期时间也不用写入磁盘，标记成V</p>\n</li>\n</ol>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201111215459.png\" width=\"500px\"> </div>\n<p>任何时候，如果文件扩展到达了一个新的64MB，需要新增一个Chunk或者由于指定了新的主Chunk而导致版本号更新了，Master节点需要向磁盘中的Log追加一条记录，我刚刚向这个文件添加了一个新的Chunk或者我刚刚修改了Chunk的版本号。</p>\n<blockquote>\n<p>这里在磁盘中维护Log而不是数据库的原因是，数据库本质上来说是某种B树（B-tree）或者Hash table，相比之下，追加Log会非常的高效，因为你可以将最近的多个Log记录一次性的写入磁盘。因为这些数据都是向同一个地址追加，这样只需要等待磁盘的磁碟旋转一次。而对于B树来说，每一份数据都需要在磁盘中随机找个位置写入。所以使用Log可以使得磁盘写入更快一些。</p>\n</blockquote>\n<p>当Master节点故障重启，并重建状态，你不会想要从Log的最开始重建状态，因为Log的最开始可能是很久以前。重启时，Master节点会从Log中的最近一个CheckPoint开始恢复，并逐条执行从CheckPoint开始的Log记录。</p>\n<h4 id=\"gfs读文件-read-file\"><a class=\"markdownIt-Anchor\" href=\"#gfs读文件-read-file\"></a> GFS读文件 Read file</h4>\n<p>有了之前的基础，接下来会列出GFS读和写的步骤，最后，介绍出现故障之后，系统是如何保持正确的行为。</p>\n<p>对于读请求来说，意味着应用或者GFS客户端有一个文件名和它想从文件的某个位置读取的偏移量（offset），应用程序会将这些信息发送给Master节点。Master节点会从自己的File表单中查询文件名，得到Chunk ID的数组。因为每个Chunk都是64MB，所以偏移量除以64MB就可以从数组中得到对应的Chunk ID。之后Master再从Chunk表单中找到存有Chunk的服务器列表，并将列表返回给客户端。所以分两步：</p>\n<ol>\n<li>客户端-&gt; 文件名 + 偏移量 -&gt; Master</li>\n<li>Master-&gt; Chunk handle + 服务器列表 -&gt; 客户端</li>\n</ol>\n<p>现在客户端从服务器列表中挑选一个来读取数据。（论文中说客户端会选择一个网络上最近的服务器）客户端可能会连续多次读取同一个Chunk的不同位置。所以，客户端会缓存Chunk和服务器的对应关系，这样不用向Master一次次去请求相同的信息。</p>\n<p>接下来，客户端和Chunk通信，将Chunk Handle和偏移量发送给那个Chunk服务器。服务器找到数据，将数据返回给客户端。</p>\n<h4 id=\"gfs写文件-write-file-1\"><a class=\"markdownIt-Anchor\" href=\"#gfs写文件-write-file-1\"></a> GFS写文件 Write File 1</h4>\n<p>GFS写文件的过程更加复杂。我们只讨论客户端的记录追加（Record Append），想把buffer中的数据，追加到这个文件名对应的文件中。对于写文件，客户端会向Master节点发送请求说：我想向这个文件名对应的文件追加数据，请告诉我文件中最后一个Chunk的位置。</p>\n<p>当有多个客户端同时写同一个文件时，一个客户端并不能知道文件究竟有多长。这个时候，客户端可以向Master节点查询哪个Chunk服务器保存了文件的最后一个Chunk。对于读文件来说，可以从任何最新的Chunk副本读取数据，但是对于写文件来说，必须要通过Chunk的主副本（Primary Chunk）来写入。对于某个特定的Chunk来说，在某一个时间点，Master不一定指定了Chunk的主副本。所以，写文件的时候，需要考虑Chunk的主副本不存在的情况。</p>\n<p>对于Master节点来说，如果发现Chunk的主副本不存在，Master会找出所有存有Chunk最新副本的Chunk服务器。Master节点的工作就是弄清楚在追加文件时，客户端应该与哪个Chunk服务器进行通信。</p>\n<p>每个Chunk可能同时有多个副本，最新的副本是指，副本中保存的版本号与Master中记录的Chunk的版本号一致。Chunk副本中的版本号是由Master节点下发的，所以Master节点知道，对于一个特定的Chunk，哪个版本号是最新的。所以Chunk的版本号在Master节点上需要保存在磁盘这种非易失的存储中。如果版本号在故障中丢失，这时，Master无法区分Chunk服务器的数据是旧的或者是新的。</p>\n<p>回到之前讲的，当客户端想要对文件进行追加，但是Master又不知道文件尾的Chunk对应的Primary在哪时，Master会等所有存储了最新Chunk版本的服务器集合完成，然后挑选一个作为Primary，其他的作为Secondary。之后，Master会增加版本号，并将版本号写入磁盘，这样就不会丢失这个版本号数据。接下来，Master节点会向Primary和Secondary副本对应的服务器发送消息并告诉它们，谁是Primary，谁是Secondary，Chunk的新版本是什么。Primary和Secondary服务器都会将版本号存储在本地的磁盘中。这样，当它们因为故障重启时，它们可以向Master报告本地保存的Chunk的实际版本号。</p>\n<p>所以，现在我们有了一个Primary，它可以接收来自客户端的请求，并将写请求应用到多个Chunk服务器中。之所以要管理Chunk的版本号，是因为这样Master可以将实际更新Chunk的能力转移给Primary服务器。并且在将版本号更新到Primary和Secondary服务器之后，如果Master节点故障重启，还是可以在相同的Primary和Secondary服务器上继续更新Chunk。</p>\n<p>现在，Master节点通知Primary和Secondary服务器，你们可以修改这个Chunk。它还给Primary一个租约，这个租约告诉Primary说，在接下来的60秒中，你将是Primary，60秒之后你必须停止成为Primary。这种机制可以确保我们不会同时有两个Primary，我们之后会再做讨论（之后的问答中有一个专门的问题讨论）。</p>\n<p>现在来看GFS论文的图2。假设现在Master节点告诉客户端谁是Primary，谁是Secondary，GFS提出了一种聪明的方法来实现写请求的执行序列。客户端会将要追加的数据发送给Primary和Secondary服务器，这些服务器会将数据写入到一个临时位置。所以最开始，这些数据不会追加到文件中。当所有的服务器都返回确认消息说，已经有了要追加的数据，客户端会向Primary服务器发送一条消息说，你和所有的Secondary服务器都有了要追加的数据，现在我想将这个数据追加到这个文件中。Primary服务器或许会从大量客户端收到大量的并发请求，Primary服务器会以某种顺序，一次只执行一个请求。对于每个客户端的追加数据请求（也就是写请求），Primary会查看当前文件结尾的Chunk，并确保Chunk中有足够的剩余空间，然后将客户端要追加的数据写入Chunk的末尾。并且，Primary会通知所有的Secondary服务器也将客户端要追加的数据写入在它们自己存储的Chunk末尾。这样，包括Primary在内的所有副本，都会收到通知将数据追加在Chunk的末尾。</p>\n<p>但是对于Secondary服务器来说，它们可能可以执行成功，也可能会执行失败，比如说磁盘空间不足，比如说故障了，比如说Primary发出的消息网络丢包了。如果Secondary实际真的将数据写入到了本地磁盘存储的Chunk中，它会回复“yes”给Primary。如果所有的Secondary服务器都成功将数据写入，并将“yes”回复给了Primary，并且Primary也收到了这些回复。Primary会向客户端返回写入成功。如果至少一个Secondary服务器没有回复Primary，或者回复了，但是内容却是：抱歉，一些不好的事情发生了，比如说磁盘空间不够，或者磁盘故障了，Primary会向客户端返回写入失败。</p>\n<p>GFS论文说，如果客户端从Primary得到写入失败，那么客户端应该重新发起整个追加过程。客户端首先会重新与Master交互，找到文件末尾的Chunk；之后，客户端需要重新发起对于Primary和Secondary的数据追加操作。</p>\n<h4 id=\"gfs写文件-write-file-2\"><a class=\"markdownIt-Anchor\" href=\"#gfs写文件-write-file-2\"></a> GFS写文件 Write File 2</h4>\n<p>这部分主要是写文件操作的问答</p>\n<blockquote>\n<p>待续</p>\n</blockquote>\n<h4 id=\"gfs的一致性\"><a class=\"markdownIt-Anchor\" href=\"#gfs的一致性\"></a> GFS的一致性</h4>\n<p>这里最重要的部分就是重复我们刚刚讨论过的内容。</p>\n<p>当我们追加数据时，面对Chunk的三个副本，当客户端发送了一个追加数据的请求，要将数据A追加到文件末尾，所有的三个副本，包括一个Primary和两个Secondary，都成功的将数据追加到了Chunk，所以Chunk中的第一个记录是A。</p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimages%5C%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201114161415.png\" alt=\"微信截图_20201114161415\" /></p>\n<p>假设第二个客户端加入进来，想要追加数据B，但是由于网络问题发送给某个副本的消息丢失了。所以，追加数据B的消息只被两个副本收到，一个是Primary，一个是Secondary。这两个副本都在文件中追加了数据B，所以，现在我们有两个副本有数据B，另一个没有。</p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimages%5C%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201114161458.png\" alt=\"微信截图_20201114161458\" /></p>\n<p>之后，第三个客户端想要追加数据C，并且第三个客户端记得下图中左边第一个副本是Primary。Primary选择了偏移量，并将偏移量告诉Secondary，将数据C写在Chunk的这个位置。三个副本都将数据C写在这个位置。</p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimages%5C%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201114161601.png\" alt=\"微信截图_20201114161601\" /></p>\n<p>对于数据B来说，客户端会收到写入失败的回复，客户端会重发写入数据B的请求。所以，第二个客户端会再次请求追加数据B，或许这次数据没有在网络中丢包，并且所有的三个副本都成功追加了数据B。现在三个副本都在线，并且都有最新的版本号。</p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimages%5C%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201114161638.png\" alt=\"微信截图_20201114161638\" /></p>\n<p>之后，如果一个客户端读文件，则读取到的内容取决于读取的是Chunk的哪个副本。客户端总共可以看到三条数据，但是取决于不同的副本，读取数据的顺序是不一样的。</p>\n<p>或许最坏的情况是，一些客户端写文件时，因为其中一个Secondary未能成功执行数据追加操作，客户端从Primary收到写入失败的回复。在客户端重新发送写文件请求之前，客户端就故障了。所以，你有可能进入这种情形：数据D出现在某些副本中，而其他副本则完全没有。</p>\n<p>在GFS的这种工作方式下，如果Primary返回写入成功，那么一切都还好，如果Primary返回写入失败，就不是那么好了。Primary返回写入失败会导致不同的副本有完全不同的数据。</p>\n<blockquote>\n<p>提问：为什么GFS要设计成多个副本不一致？</p>\n<p>Robert教授：不明白GFS设计者为什么这么做。GFS可以设计成多个副本完全精确同步的，在lab2和lab3中设计的系统，其中的副本是同步的。你们也会知道，为了保持同步，你们要使用各种各样的技术。</p>\n</blockquote>\n<p>GFS这样设计的理由是足够的简单，但是同时也给应用程序暴露了一些奇怪的数据。这里希望为应用程序提供一个相对简单的写入接口，但应用程序需要容忍读取数据的乱序。如果应用程序不能容忍乱序，应用程序要么可以通过在文件中写入序列号，这样读取的时候能自己识别顺序。</p>\n<p>最后，让我花一分钟来介绍GFS在它生涯的前5-10年在Google的出色表现，总的来说，它取得了巨大的成功，许多许多Google的应用都使用了它，许多Google的基础架构，例如BigTable和MapReduce是构建在GFS之上，所以GFS在Google内部广泛被应用。它最严重的局限可能在于，它只有一个Master节点，会带来以下问题：</p>\n<ul>\n<li>Master节点必须为每个文件，每个Chunk维护表单，随着GFS的应用越来越多，这意味着涉及的文件也越来越多，最终Master会耗尽内存来存储文件表单。你可以增加内存，但是单台计算机的内存也是有上限的。所以，这是人们遇到的最早的问题。</li>\n<li>除此之外，单个Master节点要承载数千个客户端的请求，而Master节点的CPU每秒只能处理数百个请求，尤其Master还需要将部分数据写入磁盘，很快，客户端数量超过了单个Master的能力。</li>\n<li>另一个问题是，应用程序发现很难处理GFS奇怪的语义（本节最开始介绍的GFS的副本数据的同步，或者可以说不同步）。</li>\n<li>最后一个问题是，从我们读到的GFS论文中，Master节点的故障切换不是自动的。GFS需要人工干预来处理已经永久故障的Master节点，并更换新的服务器，这可能需要几十分钟甚至更长的而时间来处理。对于某些应用程序来说，这个时间太长了。</li>\n</ul>\n<h3 id=\"l4-primary-backup-replication\"><a class=\"markdownIt-Anchor\" href=\"#l4-primary-backup-replication\"></a> L4 Primary-Backup Replication</h3>\n<h4 id=\"复制-replication\"><a class=\"markdownIt-Anchor\" href=\"#复制-replication\"></a> 复制 Replication</h4>\n<p>这节主要讲了关于容错（Fault-Tolerance）和复制（Replication）的内容。</p>\n<p>容错是为了用来提高可用性。当服务出现故障，例如硬件和网路故障，我们仍然想提供服务，这时候就需要用到复制这个工具。但是，复制也不是万能的，复制能解决什么呢？</p>\n<p>复制能解决单台计算机的故障，指单台计算机的fail-stop。例如单纯的停止运行，电源或者网络失效。</p>\n<p>但是复制不能处理软件中的bug和硬件中的缺陷。如果软件或者硬件有bug，那么复制对我们没有任何帮助。</p>\n<p>当然，足够幸运的话，复制也可以处理一些硬件和软件的bug。总的来说，我们还是只能期望复制能处理fail-stop错误。</p>\n<p>另一个关于复制的问题：复制所需的资源消耗是否值得？</p>\n<h4 id=\"状态转移和复制状态机\"><a class=\"markdownIt-Anchor\" href=\"#状态转移和复制状态机\"></a> 状态转移和复制状态机</h4>\n<p>复制有两种方法：<strong>状态转移</strong>（State Transfer）和<strong>复制状态机</strong>（Replicated State Machine），这门课中我们主要介绍后者。</p>\n<p>如果有一个服务器的两个副本，让其保持同步，这样Primary出现故障的时候，Backup有所有的信息，就可以接管服务。状态转移的思想：Primary将自己完整的状态（比如内存中的内容），拷贝并发送给Backup。当Primary故障了，Backup就从保存的最新的状态开始运行。VMware FT没有采用这种方法，因为需要通过网络发送的数据量太多。为了提升效率，只发送上次同步后变更的内容就行了。</p>\n<p>复制状态机基于：我们想复制的大部分的服务或者计算机软件都有一些确定的内部操作，不确定的部分是外部的输入。通常情况下，如果一台计算机没有外部影响，它只是一个接一个的执行指令，每条指令执行的是计算机中内存和寄存器上确定的函数，只有当外部事件干预时，才会发生一些预期外的事。</p>\n<p>所以，复制状态机不会在不同的副本之间发送状态，相应的，它只会从Primary将这些外部事件发送给Backup。通常来说，如果有两台计算机，如果它们从相同的状态开始，并且它们以相同的顺序，在相同的时间，看到了相同的输入，那么它们会一直互为副本，并且一直保持一致。</p>\n<p>状态转移传输的是可能是内存，而复制状态机会将来自客户端的操作或者其他外部事件，从Primary传输到Backup。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115154354.png\" width=\"500px\"> </div>\n<p>人们倾向于使用复制状态机的原因是，通常来说，外部操作或者事件比服务的状态要小。</p>\n<p>有趣的是，或许你已经注意到了，VMware FT论文讨论的都是复制状态机，并且只涉及了单核CPU，目前还不确定文中的方案如何扩展到多核处理器中。在多核的机器中，两个核交互处理指令的行为是不确定的，所以就算Primary和Backup执行相同的指令，在多核的机器中，它们也不一定产生相同的结果。</p>\n<p>回到什么样的状态需要被复制这个话题。VMware FT论文对这个问题有一个非常有趣的回答。它会复制机器的完整状态，这包括了所有的内存，所有的寄存器。这是一个非常详细的复制方案，Primary和Backup，即使在最底层也是完全一样的。对于复制方案来说，这种类型是非常少见的。总的来说，大部分场景都是应用程序级别的复制，就像GFS和其他这门课程中会学习的其他论文一样。</p>\n<p>VMware FT的独特之处在于，它从机器级别实现复制，因此它不关心你在机器上运行什么样的软件，它就是复制底层的寄存器和内存。</p>\n<h4 id=\"vmware-ft工作原理\"><a class=\"markdownIt-Anchor\" href=\"#vmware-ft工作原理\"></a> VMware FT工作原理</h4>\n<p>VMware FT需要两个物理服务器。将Primary和Backup运行在一台服务器的两个虚拟机里面毫无意义，因为容错本来就是为了能够抵御硬件故障。所以，你至少需要两个物理服务器运行VMM，Primary在其中一个物理服务器上，Backup在另一个物理服务器上。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115161607.png\" width=\"500px\"> </div>\n<p>两个物理服务器上的VMM会为每个虚拟机分配一段内存，这两段内存的镜像需要完全一致，或者我们的目的就是让Primary和Backup的内存镜像完全一致。所以现在，我们有两个物理服务器，它们每一个都运行了一个虚拟机，每个虚拟机里面都有我们关心的服务的一个拷贝。我们假设有一个网络连接了这两个物理服务器。</p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimages%5C%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201115161820.png\" alt=\"微信截图_20201115161820\" /></p>\n<p>此外，在这个LAN上，还有一些客户端。所以，基本的工作流程是，我们假设这两个副本，或者说这两个虚拟机：Primary和Backup，互为副本。某些我们服务的客户端，向Primary发送了一个请求，这个请求以网络数据包的形式发出。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115162121.png\" width=\"500px\"> </div>\n<p>这个网络数据包产生一个中断，之后这个中断送到了VMM。VMM可以发现这是一个发给我们的多副本服务的一个输入，所以这里VMM会做两件事情：</p>\n<ul>\n<li>在虚拟机的Guest操作系统中，模拟网络数据包到达的中断，以将相应的数据送给应用程序的Primary副本。</li>\n<li>除此之外，因为这是一个多副本虚拟机的输入，VMM会将网络数据包拷贝一份，并通过网络送给Backup虚机所在的VMM。</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115162252.png\" width=\"500px\"> </div>\n<p>Backup虚机所在的VMM知道这是发送给Backup虚机的网络数据包，它也会在Backup虚机中模拟网络数据包到达的中断，以将数据发送给应用程序的Backup。所以现在，Primary和Backup都有了这个网络数据包，它们有了相同的输入，再加上许多细节，它们将会以相同的方式处理这个输入，并保持同步。</p>\n<p>当然，虚机内的服务会回复客户端的请求。在Primary虚机里面，服务会生成一个回复报文，并通过VMM在虚机内模拟的虚拟网卡发出。之后VMM可以看到这个报文，它会实际的将这个报文发送给客户端。</p>\n<p>另一方面，由于Backup虚机运行了相同顺序的指令，它也会生成一个回复报文给客户端，并将这个报文通过它的VMM模拟出来的虚拟网卡发出。但是它的VMM知道这是Backup虚机，会丢弃这里的回复报文。所以这里，Primary和Backup都看见了相同的输入，但是只有Primary虚机实际生成了回复报文给客户端。</p>\n<p>这里有一个术语，VMware FT论文中将Primary到Backup之间同步的数据流的通道称之为Log Channel。虽然都运行在一个网络上，但是这些从Primary发往Backup的事件被称为Log Channel上的Log Event/Entry。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201115162450.png\" width=\"500px\"> </div>\n<p>当Primary因为故障停止运行时，FT（Fault-Tolerance）就开始工作了。从Backup的角度来说，它将不再收到来自于Log Channel上的Log条目。实际中，Backup每秒可以收到很多条Log，其中一个来源就是来自于Primary的定时器中断。每个Primary的定时器中断都会生成一条Log条目并发送给Backup，这些定时器中断每秒大概会有100次。所以，如果Primary虚机还在运行，Backup必然可以期望从Log Channel收到很多消息。如果Primary虚机停止运行了，那么Backup的VMM就会说：天，我都有1秒没有从Log Channel收到任何消息了，Primary一定是挂了或者出什么问题了。当Backup不再从Primary收到消息，VMware FT论文的描述是，Backup虚机会上线（Go Alive）。这意味着，Backup不会再等待来自于Primary的Log Channel的事件，Backup的VMM会让Backup自由执行，而不是受来自于Primary的事件驱动。Backup的VMM会在网络中做一些处理（猜测是发GARP），让后续的客户端请求发往Backup虚机，而不是Primary虚机。同时，Backup的VMM不再会丢弃Backup虚机的输出。当然，它现在已经不再是Backup，而是Primary。所以现在，左边的虚机直接接收输入，直接产生输出。到此为止，Backup虚机接管了服务。</p>\n<p>类似的一个场景，虽然没那么有趣，但是也需要能正确工作。如果Backup虚机停止运行，Primary也需要用一个类似的流程来抛弃Backup，停止向它发送事件，并且表现的就像是一个单点的服务，而不是一个多副本服务一样。所以，只要有一个因为故障停止运行，并且不再产生网络流量时，Primary和Backup中的另一个都可以上线继续工作。</p>\n<h4 id=\"非确定性事件-non-deterministic-events\"><a class=\"markdownIt-Anchor\" href=\"#非确定性事件-non-deterministic-events\"></a> 非确定性事件 Non-Deterministic Events</h4>\n<p>目前为止，我们都假设只要Backup虚机也看到了来自客户端的请求，经过同样的执行过程，那么它就会与Primary保持一致，但是这背后其实有很多很重要的细节。就如其他同学之前指出的一样，其中一个问题是存在非确定性（Non-Deterministic）的事件。虽然通常情况下，代码执行都是直接明了的，但并不是说计算机中每一个指令都是由计算机内存的内容而确定的行为。这一节，我们来看一下不由当前内存直接决定的指令。如果我们不够小心，这些指令在Primary和Backup的运行结果可能会不一样。这些指令就是所谓的非确定性事件。所以，设计者们需要弄明白怎么让这一类事件能在Primary和Backup之间同步。</p>\n<p>非确定性事件可以分成几类:</p>\n<ul>\n<li>客户端的输入。假设有一个来自客户端的输入，这个输入随时可能会送法，所以它是不可预期的。客户端请求何时送达， 会有什么样的内容，并不取决于服务当前的状态。我们讨论的系统专注于通过网络来进行交互，所以这里的系统输入的唯一格式就是网络数据包。所以当我们说输入的时候，我们实际上是指接收到了一个网络数据包。而一个网络数据包对于我们来说有两部分，一个是数据包中的数据，另一个是提示数据包送达了的中断。当网络数据包送达时，通常网卡的DMA（Direct Memory Access）会将网络数据包的内容拷贝到内存，之后触发一个中断。操作系统会在处理指令的过程中消费这个中断。对于Primary和Backup来说，这里的步骤必须看起来是一样的，否则它们在执行指令的时候就会出现不一致。所以，这里的问题是，中断在什么时候，具体在指令流中的哪个位置触发？对于Primary和Backup，最好要在相同的时间，相同的位置触发，否则执行过程就是不一样的，进而会导致它们的状态产生偏差。所以，我们不仅关心网络数据包的内容，还关心中断的时间。</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116163150.png\" width=\"500px\"> </div>\n<ul>\n<li>另外，有一些指令在不同的计算机上的行为是不一样的，这一类指令称为怪异指令，比如：\n<ul>\n<li>随机数生成器</li>\n<li>获取当前时间的指令，在不同时间调用会得到不同的结果</li>\n<li>获取计算机的唯一ID</li>\n</ul>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116163420.png\" width=\"500px\"> </div>\n<ul>\n<li>另外一个常见的非确定事件，在VMware FT论文中没有讨论，就是多CPU的并发。我们现在讨论的都是一个单进程系统，没有多CPU多核这种事情。之所以多核会导致非确定性事件，是因为当服务运行在多CPU上时，指令在不同的CPU上会交织在一起运行，进而产生的指令顺序是不可预期的。所以如果我们在Backup上运行相同的代码，并且代码并行运行在多核CPU上，硬件会使得指令以不同（于Primary）的方式交织在一起，而这会引起不同的运行结果。假设两个核同时向同一份数据请求锁，在Primary上，核1得到了锁；在Backup上，由于细微的时间差别核2得到了锁，那么执行结果极有可能完全不一样，这里其实说的就是（在两个副本上）不同的线程获得了锁。所以，多核是一个巨大的非确定性事件来源，VMware FT论文完全没有讨论它，并且它也不适用与我们这节课的讨论。</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116163754.png\" width=\"500px\"> </div>\n<blockquote>\n<p>学生提问：如何确保VMware FT管理的服务只使用单核？<br />\nRobert教授：服务不能使用多核并行计算。硬件几乎可以肯定是多核并行的，但是这些硬件在VMM之下。在这篇论文中，VMM暴露给运行了Primary和Backup虚机操作系统的硬件是单核的。我猜他们也没有一种简单的方法可以将这里的内容应用到一个多核的虚拟机中。</p>\n</blockquote>\n<p>所有的事件都需要通过Log Channel，从Primary同步到Backup。有关日志条目的格式在论文中没有怎么描述，但是我（Robert教授）猜日志条目中有三样东西：</p>\n<ol>\n<li>事件发生时的指令序号。因为如果要同步中断或者客户端输入数据，最好是Primary和Backup在相同的指令位置看到数据，所以我们需要知道指令序号。这里的指令号是自机器启动以来指令的相对序号，而不是指令在内存中的地址。比如说，我们正在执行第40亿零79条指令。所以日志条目需要有指令序号。对于中断和输入来说，指令序号就是指令或者中断在Primary中执行的位置。对于怪异的指令（Weird instructions），比如说获取当前的时间来说，这个序号就是获取时间这条指令执行的序号。这样，Backup虚机就知道在哪个指令位置让相应的事件发生。</li>\n<li>日志条目的类型，可能是普通的网络数据输入，也可能是怪异指令。</li>\n<li>最后是数据。如果是一个网络数据包，那么数据就是网络数据包的内容。如果是一个怪异指令，数据将会是这些怪异指令在Primary上执行的结果。这样Backup虚机就可以伪造指令，并提供与Primary相同的结果。</li>\n</ol>\n<p>举个例子，Primary和Backup两个虚机内部的guest操作系统需要在模拟的硬件里有一个定时器，能够每秒触发100次中断，这样操作系统才可以通过对这些中断进行计数来跟踪时间。因此，这里的定时器必须在Primary和Backup虚机的完全相同位置产生中断，否则这两个虚机不会以相同的顺序执行指令，进而可能会产生分歧。所以，在运行了Primary虚机的物理服务器上，有一个定时器，这个定时器会计时，生成定时器中断并发送给VMM。在适当的时候，VMM会停止Primary虚机的指令执行，并记下当前的指令序号，然后在指令序号的位置插入伪造的模拟定时器中断，并恢复Primary虚机的运行。之后，VMM将指令序号和定时器中断再发送给Backup虚机。虽然Backup虚机的VMM也可以从自己的物理定时器接收中断，但是它并没有将这些物理定时器中断传递给Backup虚机的guest操作系统，而是直接忽略它们。当来自于Primary虚机的Log条目到达时，Backup虚机的VMM配合特殊的CPU特性支持，会使得物理服务器在相同的指令序号处产生一个定时器中断，之后VMM获取到这个中断，并伪造一个假的定时器中断，并将其送入Backup虚机的guest操作系统，并且这个定时器中断会出现在与Primary相同的指令序号位置。</p>\n<blockquote>\n<p>学生提问：这里的操作依赖硬件的定制吗？（实际上我听不清，猜的）<br />\nRobert教授：是的，这里依赖于CPU的一些特殊的定制，这样VMM就可以告诉CPU，执行1000条指令之后暂停一下，方便VMM将伪造的中断注入，这样Backup虚机就可以与Primary虚机在相同的指令位置触发相同的中断，执行相同的指令。之后，VMM会告诉CPU恢复执行。这里需要一些特殊的硬件，但是现在看起来所有的Intel芯片上都有这个功能，所以也不是那么的特殊。或许15年前，这个功能还是比较新鲜的，但是现在来说就比较正常了。现在这个功能还有很多其他用途，比如说做CPU时间性能分析，可以让处理器每1000条指令中断一次，这里用的是相同的硬件让微处理器每1000条指令产生一个中断。所以现在，这是CPU中非常常见的一个小工具。<br />\n学生提问：如果Backup领先了Primary会怎么样？<br />\nRobert教授： 场景可能是这样，Primary即将在第100万条指令处中断，但是Backup已经执行了100万零1条指令了。如果我们让这种场景发生，那么Primary的中断传输就太晚了。如果我们允许Backup执行领先Primary，就会使得中断在Backup中执行位置落后于Primary。所以我们不能允许这种情况发生，我们不能允许Backup在执行指令时领先于Primary。<br />\nVMware FT是这么做的。它会维护一个来自于Primary的Log条目的等待缓冲区，如果缓冲区为空，Backup是不允许执行指令的。如果缓冲区不为空，那么它可以根据Log的信息知道Primary对应的指令序号，并且会强制Backup虚机最多执行指令到这个位置。所以，Backup虚机的CPU总是会被通知执行到特定的位置就停止。Backup虚机只有在Log缓冲区中有数据才会执行，并且只会执行到Log条目对应的指令序号。在Primary产生的第一个Log，并且送达Backup之前，Backup甚至都不能执行指令，所以Backup总是落后于Primary至少一个Log。如果物理服务器的资源占用过多，导致Backup执行变慢，那么Backup可能落后于Primary多个Log条目。</p>\n</blockquote>\n<p>网络数据包送达时，有一个细节会比较复杂。当网络数据包到达网卡时，如果我们没有运行虚拟机，网卡会将网络数据包通过DMA的方式送到计算机的关联内存中。现在我们有了虚拟机，并且这个网络数据包是发送给虚拟机的，在虚拟机内的操作系统可能会监听DMA并将数据拷贝到虚拟机的内存中。因为VMware的虚拟机设计成可以支持任何操作系统，我们并不知道网络数据包到达时操作系统会执行什么样的操作，有的操作系统或许会真的监听网络数据包拷贝到内存的操作。</p>\n<p>我们不能允许这种情况发生。如果我们允许网卡直接将网络数据包DMA到Primary虚机中，我们就失去了对于Primary虚机的时序控制，因为我们也不知道什么时候Primary会收到网络数据包。所以，实际中，物理服务器的网卡会将网络数据包拷贝给VMM的内存，之后，网卡中断会送给VMM，并说，一个网络数据包送达了。这时，VMM会暂停Primary虚机，记住当前的指令序号，将整个网络数据包拷贝给Primary虚机的内存，之后模拟一个网卡中断发送给Primary虚机。同时，将网络数据包和指令序号发送给Backup。Backup虚机的VMM也会在对应的指令序号暂停Backup虚机，将网络数据包拷贝给Backup虚机，之后在相同的指令序号位置模拟一个网卡中断发送给Backup虚机。这就是论文中介绍的Bounce Buffer机制。</p>\n<h4 id=\"输出控制-output-rule\"><a class=\"markdownIt-Anchor\" href=\"#输出控制-output-rule\"></a> 输出控制 Output Rule</h4>\n<p>对于VMware FT系统的输出，也是值得说一下的。在这个系统中，唯一的输出就是对于客户端请求的响应。客户端通过网络数据包将数据送入，服务器的回复也会以网络数据包的形式送出。我之前说过，Primary和Backup虚机都会生成回复报文，之后通过模拟的网卡送出，但是<strong>只有Primary虚机才会真正的将回复送出</strong>，而Backup虚机只是将回复简单的<strong>丢弃</strong>掉。</p>\n<p>好吧，真实情况会复杂一些。假设我们正在跑一个简单的数据库服务器，这个服务器支持一个计数器自增操作，工作模式是这样，客户端发送了一个自增的请求，服务器端对计数器加1，并返回新的数值。假设最开始一切正常，在Primary和Backup中的计数器都存了10。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201227.png\" width=\"500px\"> </div>\n<p>现在，局域网的一个客户端发送了一个自增的请求给Primary。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201309.png\" width=\"500px\"> </div>\n<p>这个请求在Primary虚机的软件中执行，Primary会发现，现在的数据是10，我要将它变成11，并回复客户端说，现在的数值是11。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201348.png\" width=\"500px\"> </div>\n<p>这个请求也会发送给Backup虚机，并将它的数值从10改到11。Backup也会产生一个回复，但是这个回复会被<strong>丢弃</strong>，这是我们期望发生的。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201418.png\" width=\"500px\"> </div>\n<p>但是，你需要考虑，如果在一个不恰当的时间，出现了故障会怎样？在这门课程中，你需要始终考虑，故障的最坏场景是什么，故障会导致什么结果？在这个例子中，假设Primary确实生成了回复给客户端，但是之后立马崩溃了。更糟糕的是，现在网络不可靠，Primary发送给Backup的Log条目在Primary崩溃时也丢包了。那么现在的状态是，客户端收到了回复说现在的数据是11，但是Backup虚机因为没有看到客户端请求，所以它保存的数据还是10。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201524.png\" width=\"500px\"> </div>\n<p>现在，因为察觉到Primary崩溃了，Backup接管服务。这时，客户端再次发送一个自增的请求，这个请求发送到了原来的Backup虚机，它会将自身的数值从10增加到11，并产生第二个数据是11的回复给客户端。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201559.png\" width=\"500px\"> </div>\n<p>如果客户端比较前后两次的回复，会发现一个明显不可能的场景（两次自增的结果都是11）。</p>\n<p>因为VMware FT的优势就是在不修改软件，甚至软件都不需要知道复制的存在的前提下，就能支持容错，所以我们也不能修改客户端让它知道因为容错导致的副本切换触发了一些奇怪的事情。在VMware FT场景里，我们没有修改客户端这个选项，因为整个系统只有在不修改服务软件的前提下才有意义。所以，前面的例子是个大问题，我们不能让它实际发生。有人还记得论文里面是如何防止它发生的吗？</p>\n<p>论文里的解决方法就是控制输出（Output Rule）。直到Backup虚机确认收到了相应的Log条目，Primary虚机不允许生成任何输出。让我们回到Primary崩溃前，并且计数器的内容还是10，Primary上的正确的流程是这样的：</p>\n<ol>\n<li>客户端输入到达Primary。</li>\n<li>Primary的VMM将输入的拷贝发送给Backup虚机的VMM。所以有关输入的Log条目在Primary虚机生成输出之前，就发往了Backup。之后，这条Log条目通过网络发往Backup，但是过程中有可能丢失。</li>\n<li>Primary的VMM将输入发送给Primary虚机，Primary虚机生成了输出。现在Primary虚机的里的数据已经变成了11，生成的输出也包含了11。但是VMM不会无条件转发这个输出给客户端。</li>\n<li>Primary的VMM会等到之前的Log条目都被Backup虚机确认收到了才将输出转发给客户端。所以，包含了客户端输入的Log条目，会从Primary的VMM送到Backup的VMM，Backup的VMM不用等到Backup虚机实际执行这个输入，就会发送一个表明收到了这条Log的ACK报文给Primary的VMM。当Primary的VMM收到了这个ACK，才会将Primary虚机生成的输出转发到网络中。</li>\n</ol>\n<p>所以，这里的核心思想是，确保在客户端看到对于请求的响应时，Backup虚机一定也看到了对应的请求，或者说至少在Backup的VMM中缓存了这个请求。这样，我们就不会陷入到这个奇怪的场景：客户端已经收到了回复，但是因为有故障发生和副本切换，新接手的副本完全不知道客户端之前收到了对应的回复。</p>\n<p>如果在上面的步骤2中，Log条目通过网络发送给Backup虚机时丢失了，然后Primary虚机崩溃了。因为Log条目丢失了， 所以Backup节点也不会发送ACK消息。所以，如果Log条目的丢失与Primary的崩溃同一时间发生，那么Primary必然在VMM将回复转发到网络之前就崩溃了，所以客户端也就不会收到任何回复，所以客户端就不会观察到任何异常。这就是输出控制（Output rule）。</p>\n<p>所以，Primary会等到Backup已经有了最新的数据，才会将回复返回给客户端。这几乎是所有的复制方案中对于性能产生伤害的地方。这里的同步等待使得Primary不能超前Backup太多，因为如果Primary超前了并且又故障了，对应的就是Backup的状态落后于客户端的状态。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/6.824/20201116201957.png\" width=\"500px\"> </div>\n<p>所以，几乎每一个复制系统都有这个问题，在某个时间点，Primary必须要停下来等待Backup，这对于性能是实打实的限制。即使副本机器在相邻的机架上，Primary节点发送消息并收到回复仍然需要0.5毫秒的延时。如果我们想要能承受类似于地震或者城市范围内的断电等问题，Primary和Backup需要在不同的城市，之间可能有5毫秒的差距。如果我们将两个副本放置在不同的城市，每次生成一个输出时，都需要至少等待5毫秒，等Backup确认收到了前一个Log条目，然后VMM才能将输出发送到网络。对于一些低请求量的服务，这不是问题。但是如果我们的服务要能够每秒处理数百万个请求，那就会对我们的性能产生巨大的伤害。</p>\n<p>所以如果条件允许，人们会更喜欢使用在更高层级做复制的系统（详见4.2 最后两段）。这样的复制系统可以理解操作的含义，这样的话Primary虚机就不必在每个网络数据包暂停同步一下，而是可以在一个更高层级的操作层面暂停来做同步，甚至可以对一些只读操作不做暂停。但是这就需要一些特殊的应用程序层面的复制机制。</p>\n<blockquote>\n<p>学生提问：其实不用暂停Primary虚机的执行，只需要阻止Primary虚机的输出就行吧？<br />\nRobert教授：你是对的。所以，这里的同步等待或许没有那么糟糕。但是不管怎么样，在一个系统中，本来可以几微秒响应一个客户端请求，而现在我们需要先更新另一个城市的副本，这可能会将一个10微秒的操作变成10毫秒。<br />\n学生提问：这里虽然等待时间比较长，如果提高请求的并发度，是不是还是可以有高性能？<br />\nRobert教授：如果你有大量的客户端并发的发送请求，那么你或许还是可以在高延时的情况下获得高的吞吐量，但是就需要你有足够聪明的设计和足够的幸运。<br />\n学生提问：可以不可以将Log保留在Primary虚机对应的物理服务器内存中，这样就不用长时间的等待了。<br />\nRobert教授：这是一个很好的想法。但是如果你这么做的话，物理服务器宕机，Log就丢失了。通常，如果服务器故障，就认为服务器中的所有数据都没了，其中包括内存的内容。如果故障是某人不小心将服务器的电源拔了，即使Primary对应的物理服务器有电池供电的RAM，Backup也没办法从其获取Log。实际上，系统会在Backup的内存中记录Log。为了保证系统的可靠性，Primary必须等待Backup的ACK才真正输出。你这里的想法很好，但是我们还是不能使用Primary的内存来存Log。<br />\n学生提问：能不能输入送到Primary，输出从Backup送出？<br />\nRobert教授：这是个很聪明的想法。我之前完全没有想到过这点。它或许可以工作，我不确定，但是这很有意思。</p>\n</blockquote>\n<h4 id=\"重复输出-duplicated-output\"><a class=\"markdownIt-Anchor\" href=\"#重复输出-duplicated-output\"></a> 重复输出 Duplicated Output</h4>\n<p>还有一种可能的情况是，回复报文已经从VMM发往客户端了，所以客户端收到了回复，但是这时Primary虚机崩溃了。而在Backup侧，客户端请求还堆积在Backup对应的VMM的Log等待缓冲区（详见4.4倒数第二个学生提问），也就是说客户端请求还没有真正发送到Backup虚机中。当Primary崩溃之后，Backup接管服务，Backup首先需要消费所有在等待缓冲区中的Log，以保持与Primay在相同的状态，这样Backup才能以与Primary相同的状态接管服务。假设最后一条Log条目对应来自客户端的请求，那么Backup会在处理完客户端请求对应的中断之后，再上线接管服务。这意味着，Backup会将自己的计数器增加到11（原来是10，处理完客户端的自增请求变成11），并生成一个输出报文。因为这时，Backup已经上线接管服务，它生成的输出报文会被它的VMM发往客户端。这样客户端会收到两个内容是11的回复。如果这里的情况真的发生了，那么明显这也是一个异常行为，因为不可能在运行在单个服务器的服务上发生这种行为。</p>\n<p>好消息是，几乎可以肯定，客户端通过TCP与服务进行交互，也就是说客户端请求和回复都通过TCP Channel收发。当Backup接管服务时，因为它的状态与Primary相同，所以它知道TCP连接的状态和TCP传输的序列号。当Backup生成回复报文时，这个报文的TCP序列号与之前Primary生成报文的TCP序列号是一样的，这样客户端的TCP栈会发现这是一个重复的报文，它会在TCP层面丢弃这个重复的报文，用户层的软件永远也看不到这里的重复。</p>\n<p>这里可以认为是异常的场景，并且被意外的解决了。但是事实上，对于任何有主从切换的复制系统，基本上不可能将系统设计成不产生重复输出。为了避免重复输出，有一个选项是在两边都不生成输出，但这是一个非常糟糕的做法（因为对于客户端来说就是一次失败的请求）。当出现主从切换时，切换的两边都有可能生成重复的输出，这意味着，某种程度上来说，所有复制系统的客户端需要一种重复检测机制。这里我们使用的是TCP来完成重复检测，如果我们没有TCP，那就需要另一种其他机制，或许是应用程序级别的序列号。</p>\n<p>在lab2和lab3中，基本上可以看到我们前面介绍的所有内容，例如输出控制，你会设计你的复制状态机。</p>\n<blockquote>\n<p>学生提问：太长了，听不太清，直接看回答吧。<br />\nRobert教授：第一部分是对的。当Backup虚机消费了最后一条Log条目，这条Log包含了客户端的请求，并且Backup上线了。从这个时间点开始，我们不需要复制任何东西，因为Primary已经挂了，现在没有任何其他副本。<br />\n如果Primary向客户端发送了一个回复报文，之后，Primary或者客户端关闭了TCP连接，所以现在客户端侧是没有TCP连接的。Primary挂了之后，Backup虚机还是有TCP连接的信息。Backup执行最后一条Log，Backup会生成一个回复报文，但是这个报文送到客户端时，客户端并没有相应的TCP连接信息。客户端会直接丢弃报文，就像这个报文不存在一样。哦不！这里客户端实际会发送一个TCP Reset，这是一个类似于TCP error的东西给Backup虚机，Backup会处理这里的TCP Reset，但是没关系，因为现在只有一个副本，Backup可以任意处理，而不用担心与其他副本有差异。实际上，Backup会直接忽略这个报文。现在Backup上线了，在这个复制系统里面，它不受任何人任何事的限制。<br />\n学生提问：Backup接手服务之后，对于之前的TCP连接，还能用相同的TCP源端口来发送数据吗（因为源端口一般是随机的）？<br />\nRobert教授：你可以这么认为。因为Backup的内存镜像与Primary的完全一致，所以它们会以相同的TCP源端口来发送数据，它们在每一件事情上都是一样的。它们发送的报文每一bit都是一样的。<br />\n学生提问：甚至对于IP地址都会是一样的吗，毕竟这里涉及两个物理服务器？<br />\nRobert教授：在这个层面，物理服务器并没有IP地址。在我们的例子中，Primary虚机和Backup虚机都有IP地址，但是物理服务器和VMM在网络上基本是透明的。物理服务器上的VMM在网络上并没有自己的唯一标识。虚拟机有自己独立的操作系统和独立的TCP栈，但是对于IP地址和其他的关联数据，Primary和Backup是一样的（类似于HA VIP）。当虚机发送一个网络报文，它会以虚机的IP地址和MAC地址来发送，这些信息是直接透传到局域网的，而这正是我们想要的。所以Backup会生成与Primary完全一样的报文。这里有一些tricky，因为如果物理服务器都接在一个以太网交换机上，那么它们必然在交换机的不同端口上，在发生切换时，我们希望以太网交换机能够知道当前主节点在哪，这样才能正常的转发报文，这会有一些额外的有意思的事情。大部分时候，Primary和Backup都是生成相同的报文，并送出。<br />\n（注：早期的VMware虚机都是直接以VLAN或者Flat形式，通过DVS接入到物理网络，所以虚拟机的报文与物理机无关，可以直接在局域网发送。以太网交换机会维护MAC地址表，表明MAC地址与交换机端口的对应，因为Primary和Backup虚机的MAC地址一样，当主从切换时，这个表需要更新，这样同一个目的MAC地址，切换前是发往了Primary虚机所在的物理服务器对应的交换机端口，切换之后是发往了Backup虚机所在的物理服务器对应的交换机端口。交换机MAC地址表的切换通常通过虚机主动发起GARP来更新。）</p>\n</blockquote>\n<h4 id=\"test-and-set-服务\"><a class=\"markdownIt-Anchor\" href=\"#test-and-set-服务\"></a> Test-and-Set 服务</h4>\n<p>最后还有一个细节。我一直都假设Primary出现的是fail-stop故障（详见4.1最开始），但是这不是所有的情况。一个非常常见的场景就是，Primary和Backup都在运行，但是它们之间的网络出现了问题，同时它们各自又能够与一些客户端通信。这时，它们都会以为对方挂了，自己需要上线并接管服务。所以现在，我们对于同一个服务，有两个机器是在线的。因为现在它们都不向彼此发送Log条目，它们自然就出现了分歧。它们或许会因为接收了不同的客户端请求，而变得不一样。</p>\n<p>因为涉及到了计算机网络，那就可能出现上面的问题，而不仅仅是机器故障。如果我们同时让Primary和Backup都在线，那么我们现在就有了脑裂（Split Brain）。这篇论文解决这个问题的方法是，向一个外部的第三方权威机构求证，来决定Primary还是Backup允许上线。这里的第三方就是Test-and-Set服务。</p>\n<p>Test-and-Set服务不运行在Primary和Backup的物理服务器上，VMware FT需要通过网络支持Test-and-Set服务。这个服务会在内存中保留一些标志位，当你向它发送一个Test-and-Set请求，它会设置标志位，并且返回旧的值。Primary和Backup都需要获取Test-and-Set标志位，这有点像一个锁。为了能够上线，它们或许会同时发送一个Test-and-Set请求，给Test-and-Set服务。当第一个请求送达时，Test-and-Set服务会说，这个标志位之前是0，现在是1。第二个请求送达时，Test-and-Set服务会说，标志位已经是1了，你不允许成为Primary。对于这个Test-and-Set服务，我们可以认为运行在单台服务器。当网络出现故障，并且两个副本都认为对方已经挂了时，Test-and-Set服务就是一个仲裁官，决定了两个副本中哪一个应该上线。</p>\n<p>对于这种机制有什么问题吗？</p>\n<blockquote>\n<p>学生提问：只有在网络故障的时候才需要询问Test-and-Set服务吗？<br />\nRobert教授：即使没有网络分区，在所有情况下，两个副本中任意一个觉得对方挂了，哪怕对方真的挂了，想要上线的那个副本仍然需要获得Test-and-Set服务的锁。在6.824这门课程中，有个核心的规则就是，你无法判断另一个计算机是否真的挂了，你所知道的就是，你无法从那台计算机收到网络报文，你无法判断是因为那台计算机挂了，还是因为网络出问题了导致的。所以，Backup看到的是，我收不到来自Primary的网络报文，或许Primary挂了，或许还活着。Primary或许也同时看不到Backup的报文。所以，如果存在网络分区，那么必然要询问Test-and-Set服务。但是实际上没人知道现在是不是网络分区，所以每次涉及到主从切换，都需要向Test-and-Set服务进行查询。所以，当副本想要上线的时候，Test-and-Set服务必须要在线，因为副本需要获取这里的Test-and-Set锁。现在Test-and-Set看起来像是个单点故障（Single-Point-of-Failure）。虽然VMware FT尝试构建一个复制的容错的系统，但是最后，主从切换还是依赖于Test-and-Set服务在线，这有点让人失望。我强烈的认为，Test-and-Set服务本身也是个复制的服务，并且是容错的。几乎可以肯定的是，VMware非常乐意向你售卖价值百万的高可用存储系统，系统内使用大量的复制服务。因为这里用到了Test-and-Set服务，我猜它也是复制的。</p>\n</blockquote>\n<p>你们将要在Lab2和Lab3构建的系统，会帮助你们构建容错的Test-and-Set服务，所以这个问题可以轻易被解决。</p>\n"},{"_content":"title: '[C++] Condition_variable'\ndate: 2020-12-6 17:01\ntags:\n- condition_variable\n- mutex\ncategories:\n- C++\n\n## Condition_variable\n\n```c++\n#include <iostream>                // std::cout\n#include <thread>                // std::thread\n#include <mutex>                // std::mutex, std::unique_lock\n#include <condition_variable>    // std::condition_variable\nstd::mutex mtx; // 全局互斥锁.\nstd::condition_variable cv; // 全局条件变量.\nbool ready = false; // 全局标志位.\nvoid do_print_id(int id)\n{\n\tstd::unique_lock <std::mutex> lck(mtx);\n\twhile (!ready) // 如果标志位不为 true, 则等待...\n\t\tcv.wait(lck); // 当前线程被阻塞, 当全局标志位变为 true 之后,\n\t// 线程被唤醒, 继续往下执行打印线程编号id.\n\tstd::cout << \"thread \" << id << '\\n';\n}\nvoid go()\n{\n\tstd::unique_lock <std::mutex> lck(mtx);\n\tready = true; // 设置全局标志位为 true.\n\tcv.notify_all(); // 唤醒所有线程.\n}\nint main()\n{\n\tstd::thread threads[10];\n\t// spawn 10 threads:\n\tfor (int i = 0; i < 10; ++i)\n\t\tthreads[i] = std::thread(do_print_id, i);\n\tstd::cout << \"10 threads ready to race...\\n\";\n\tgo(); // go!\n\tfor (auto& th : threads)\n\t\tth.join();\n\treturn 0;\n}\n```\n\n- notify_one\n- notify_all","source":"_posts/C++/condition_variable.md","raw":"title: '[C++] Condition_variable'\ndate: 2020-12-6 17:01\ntags:\n- condition_variable\n- mutex\ncategories:\n- C++\n\n## Condition_variable\n\n```c++\n#include <iostream>                // std::cout\n#include <thread>                // std::thread\n#include <mutex>                // std::mutex, std::unique_lock\n#include <condition_variable>    // std::condition_variable\nstd::mutex mtx; // 全局互斥锁.\nstd::condition_variable cv; // 全局条件变量.\nbool ready = false; // 全局标志位.\nvoid do_print_id(int id)\n{\n\tstd::unique_lock <std::mutex> lck(mtx);\n\twhile (!ready) // 如果标志位不为 true, 则等待...\n\t\tcv.wait(lck); // 当前线程被阻塞, 当全局标志位变为 true 之后,\n\t// 线程被唤醒, 继续往下执行打印线程编号id.\n\tstd::cout << \"thread \" << id << '\\n';\n}\nvoid go()\n{\n\tstd::unique_lock <std::mutex> lck(mtx);\n\tready = true; // 设置全局标志位为 true.\n\tcv.notify_all(); // 唤醒所有线程.\n}\nint main()\n{\n\tstd::thread threads[10];\n\t// spawn 10 threads:\n\tfor (int i = 0; i < 10; ++i)\n\t\tthreads[i] = std::thread(do_print_id, i);\n\tstd::cout << \"10 threads ready to race...\\n\";\n\tgo(); // go!\n\tfor (auto& th : threads)\n\t\tth.join();\n\treturn 0;\n}\n```\n\n- notify_one\n- notify_all","slug":"C++/condition_variable","published":1,"date":"2020-11-07T15:26:42.033Z","updated":"2020-12-06T09:01:46.749Z","title":"C++/condition_variable","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtu9g00042kwj24u40b13","content":"<p>title: ‘[C++] Condition_variable’<br />\ndate: 2020-12-6 17:01<br />\ntags:</p>\n<ul>\n<li>condition_variable</li>\n<li>mutex<br />\ncategories:</li>\n<li>C++</li>\n</ul>\n<h2 id=\"condition_variable\"><a class=\"markdownIt-Anchor\" href=\"#condition_variable\"></a> Condition_variable</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;                // std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;                // std::thread</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;                // std::mutex, std::unique_lock</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;condition_variable&gt;    // std::condition_variable</span></span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::mutex mtx; <span class=\"comment\">// 全局互斥锁.</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::condition_variable cv; <span class=\"comment\">// 全局条件变量.</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"built_in\">ready</span> = <span class=\"literal\">false</span>; <span class=\"comment\">// 全局标志位.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">do_print_id</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::unique_lock &lt;<span class=\"built_in\">std</span>::mutex&gt; lck(mtx);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!<span class=\"built_in\">ready</span>) <span class=\"comment\">// 如果标志位不为 true, 则等待...</span></span><br><span class=\"line\">\t\tcv.wait(lck); <span class=\"comment\">// 当前线程被阻塞, 当全局标志位变为 true 之后,</span></span><br><span class=\"line\">\t<span class=\"comment\">// 线程被唤醒, 继续往下执行打印线程编号id.</span></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"thread \"</span> &lt;&lt; id &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::unique_lock &lt;<span class=\"built_in\">std</span>::mutex&gt; lck(mtx);</span><br><span class=\"line\">\t<span class=\"built_in\">ready</span> = <span class=\"literal\">true</span>; <span class=\"comment\">// 设置全局标志位为 true.</span></span><br><span class=\"line\">\tcv.notify_all(); <span class=\"comment\">// 唤醒所有线程.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::thread threads[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"comment\">// spawn 10 threads:</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">\t\tthreads[i] = <span class=\"built_in\">std</span>::thread(do_print_id, i);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"10 threads ready to race...\\n\"</span>;</span><br><span class=\"line\">\tgo(); <span class=\"comment\">// go!</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; th : threads)</span><br><span class=\"line\">\t\tth.join();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>notify_one</li>\n<li>notify_all</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<p>title: ‘[C++] Condition_variable’<br />\ndate: 2020-12-6 17:01<br />\ntags:</p>\n<ul>\n<li>condition_variable</li>\n<li>mutex<br />\ncategories:</li>\n<li>C++</li>\n</ul>\n<h2 id=\"condition_variable\"><a class=\"markdownIt-Anchor\" href=\"#condition_variable\"></a> Condition_variable</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;                // std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;                // std::thread</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;mutex&gt;                // std::mutex, std::unique_lock</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;condition_variable&gt;    // std::condition_variable</span></span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::mutex mtx; <span class=\"comment\">// 全局互斥锁.</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::condition_variable cv; <span class=\"comment\">// 全局条件变量.</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"built_in\">ready</span> = <span class=\"literal\">false</span>; <span class=\"comment\">// 全局标志位.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">do_print_id</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::unique_lock &lt;<span class=\"built_in\">std</span>::mutex&gt; lck(mtx);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!<span class=\"built_in\">ready</span>) <span class=\"comment\">// 如果标志位不为 true, 则等待...</span></span><br><span class=\"line\">\t\tcv.wait(lck); <span class=\"comment\">// 当前线程被阻塞, 当全局标志位变为 true 之后,</span></span><br><span class=\"line\">\t<span class=\"comment\">// 线程被唤醒, 继续往下执行打印线程编号id.</span></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"thread \"</span> &lt;&lt; id &lt;&lt; <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::unique_lock &lt;<span class=\"built_in\">std</span>::mutex&gt; lck(mtx);</span><br><span class=\"line\">\t<span class=\"built_in\">ready</span> = <span class=\"literal\">true</span>; <span class=\"comment\">// 设置全局标志位为 true.</span></span><br><span class=\"line\">\tcv.notify_all(); <span class=\"comment\">// 唤醒所有线程.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::thread threads[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"comment\">// spawn 10 threads:</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">\t\tthreads[i] = <span class=\"built_in\">std</span>::thread(do_print_id, i);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"10 threads ready to race...\\n\"</span>;</span><br><span class=\"line\">\tgo(); <span class=\"comment\">// go!</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; th : threads)</span><br><span class=\"line\">\t\tth.join();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>notify_one</li>\n<li>notify_all</li>\n</ul>\n"},{"_content":"title: '[C++] Eventfd & Epoll'\ndate: 2020-12-6 17:02\ntags:\n- eventfd\n- epoll\ncategories:\n- C++\n\n## eventfd & epoll\n\n实现跨线程的唤醒。一个线程往fd中写入uint64_t的数据唤醒另一个epoll_wait上的线程\n\n```c++\n#include <iostream>\n#include <assert.h>\n#include <poll.h>\n#include <signal.h>\n#include <sys/eventfd.h>\n#include <unistd.h>\n#include <string.h>\n#include <thread>\n\nstatic int s_efd = 0;\n\nint createEventfd()\n{\n  int evtfd = eventfd(0, EFD_NONBLOCK | EFD_CLOEXEC);\n\n  std::cout << \"createEventfd() fd : \" << evtfd << std::endl;\n\n  if (evtfd < 0)\n  {\n    std::cout << \"Failed in eventfd\\n\";\n    abort();\n  }\n\n  return evtfd;\n}\n\nvoid testThread()\n{\n  int timeout = 0;\n  while(timeout < 3) {\n    sleep(1);\n    timeout++;\n  }\n\n  uint64_t one = 1;\n  ssize_t n = write(s_efd, &one, sizeof one);\n  if(n != sizeof one)\n  {\n    std::cout << \" writes \" << n << \" bytes instead of 8\\n\";\n  }\n}\n\nint main()\n{\n  s_efd = createEventfd();\n\n  fd_set rdset;\n  FD_ZERO(&rdset);\n  FD_SET(s_efd, &rdset);\n\n  struct timeval timeout;\n  timeout.tv_sec = 0;\n  timeout.tv_usec = 500000;\n\n  std::thread t(testThread);\n\n  while(1)\n  {\n    if(select(s_efd + 1, &rdset, NULL, NULL, &timeout) == 0)\n    {\n      std::cout << \"tick!!!!\\n\";\n      timeout.tv_sec = 0;\n      timeout.tv_usec = 500000;\n      FD_SET(s_efd, &rdset);\n        continue;\n    }\n\n    uint64_t one = 0;\n\n    ssize_t n = read(s_efd, &one, sizeof one);\n    if(n != sizeof one)\n    {\n      std::cout << \" read \" << n << \" bytes instead of 8\\n\";\n    }\n\n    std::cout << \" wakeup ！\\n\";\n\n    break;\n  }\n\n  t.join();\n  close(s_efd);\n\n  return 0;\n}\n```\n\n","source":"_posts/C++/eventfd.md","raw":"title: '[C++] Eventfd & Epoll'\ndate: 2020-12-6 17:02\ntags:\n- eventfd\n- epoll\ncategories:\n- C++\n\n## eventfd & epoll\n\n实现跨线程的唤醒。一个线程往fd中写入uint64_t的数据唤醒另一个epoll_wait上的线程\n\n```c++\n#include <iostream>\n#include <assert.h>\n#include <poll.h>\n#include <signal.h>\n#include <sys/eventfd.h>\n#include <unistd.h>\n#include <string.h>\n#include <thread>\n\nstatic int s_efd = 0;\n\nint createEventfd()\n{\n  int evtfd = eventfd(0, EFD_NONBLOCK | EFD_CLOEXEC);\n\n  std::cout << \"createEventfd() fd : \" << evtfd << std::endl;\n\n  if (evtfd < 0)\n  {\n    std::cout << \"Failed in eventfd\\n\";\n    abort();\n  }\n\n  return evtfd;\n}\n\nvoid testThread()\n{\n  int timeout = 0;\n  while(timeout < 3) {\n    sleep(1);\n    timeout++;\n  }\n\n  uint64_t one = 1;\n  ssize_t n = write(s_efd, &one, sizeof one);\n  if(n != sizeof one)\n  {\n    std::cout << \" writes \" << n << \" bytes instead of 8\\n\";\n  }\n}\n\nint main()\n{\n  s_efd = createEventfd();\n\n  fd_set rdset;\n  FD_ZERO(&rdset);\n  FD_SET(s_efd, &rdset);\n\n  struct timeval timeout;\n  timeout.tv_sec = 0;\n  timeout.tv_usec = 500000;\n\n  std::thread t(testThread);\n\n  while(1)\n  {\n    if(select(s_efd + 1, &rdset, NULL, NULL, &timeout) == 0)\n    {\n      std::cout << \"tick!!!!\\n\";\n      timeout.tv_sec = 0;\n      timeout.tv_usec = 500000;\n      FD_SET(s_efd, &rdset);\n        continue;\n    }\n\n    uint64_t one = 0;\n\n    ssize_t n = read(s_efd, &one, sizeof one);\n    if(n != sizeof one)\n    {\n      std::cout << \" read \" << n << \" bytes instead of 8\\n\";\n    }\n\n    std::cout << \" wakeup ！\\n\";\n\n    break;\n  }\n\n  t.join();\n  close(s_efd);\n\n  return 0;\n}\n```\n\n","slug":"C++/eventfd","published":1,"date":"2020-11-06T15:49:17.307Z","updated":"2020-12-06T09:02:44.342Z","title":"C++/eventfd","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtu9k00052kwje48lh639","content":"<p>title: ‘[C++] Eventfd &amp; Epoll’<br />\ndate: 2020-12-6 17:02<br />\ntags:</p>\n<ul>\n<li>eventfd</li>\n<li>epoll<br />\ncategories:</li>\n<li>C++</li>\n</ul>\n<h2 id=\"eventfd-epoll\"><a class=\"markdownIt-Anchor\" href=\"#eventfd-epoll\"></a> eventfd &amp; epoll</h2>\n<p>实现跨线程的唤醒。一个线程往fd中写入uint64_t的数据唤醒另一个epoll_wait上的线程</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/eventfd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> s_efd = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">createEventfd</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> evtfd = eventfd(<span class=\"number\">0</span>, EFD_NONBLOCK | EFD_CLOEXEC);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"createEventfd() fd : \"</span> &lt;&lt; evtfd &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (evtfd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Failed in eventfd\\n\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">abort</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> evtfd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testThread</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(timeout &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    timeout++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> one = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">ssize_t</span> n = <span class=\"built_in\">write</span>(s_efd, &amp;one, <span class=\"keyword\">sizeof</span> one);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n != <span class=\"keyword\">sizeof</span> one)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" writes \"</span> &lt;&lt; n &lt;&lt; <span class=\"string\">\" bytes instead of 8\\n\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  s_efd = createEventfd();</span><br><span class=\"line\"></span><br><span class=\"line\">  fd_set rdset;</span><br><span class=\"line\">  FD_ZERO(&amp;rdset);</span><br><span class=\"line\">  FD_SET(s_efd, &amp;rdset);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">timeout</span>;</span></span><br><span class=\"line\">  timeout.tv_sec = <span class=\"number\">0</span>;</span><br><span class=\"line\">  timeout.tv_usec = <span class=\"number\">500000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::thread <span class=\"title\">t</span><span class=\"params\">(testThread)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(select(s_efd + <span class=\"number\">1</span>, &amp;rdset, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;timeout) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"tick!!!!\\n\"</span>;</span><br><span class=\"line\">      timeout.tv_sec = <span class=\"number\">0</span>;</span><br><span class=\"line\">      timeout.tv_usec = <span class=\"number\">500000</span>;</span><br><span class=\"line\">      FD_SET(s_efd, &amp;rdset);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> one = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">ssize_t</span> n = <span class=\"built_in\">read</span>(s_efd, &amp;one, <span class=\"keyword\">sizeof</span> one);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n != <span class=\"keyword\">sizeof</span> one)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" read \"</span> &lt;&lt; n &lt;&lt; <span class=\"string\">\" bytes instead of 8\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" wakeup ！\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  t.join();</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(s_efd);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<p>title: ‘[C++] Eventfd &amp; Epoll’<br />\ndate: 2020-12-6 17:02<br />\ntags:</p>\n<ul>\n<li>eventfd</li>\n<li>epoll<br />\ncategories:</li>\n<li>C++</li>\n</ul>\n<h2 id=\"eventfd-epoll\"><a class=\"markdownIt-Anchor\" href=\"#eventfd-epoll\"></a> eventfd &amp; epoll</h2>\n<p>实现跨线程的唤醒。一个线程往fd中写入uint64_t的数据唤醒另一个epoll_wait上的线程</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/eventfd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;thread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> s_efd = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">createEventfd</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> evtfd = eventfd(<span class=\"number\">0</span>, EFD_NONBLOCK | EFD_CLOEXEC);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"createEventfd() fd : \"</span> &lt;&lt; evtfd &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (evtfd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Failed in eventfd\\n\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">abort</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> evtfd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testThread</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(timeout &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    timeout++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> one = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">ssize_t</span> n = <span class=\"built_in\">write</span>(s_efd, &amp;one, <span class=\"keyword\">sizeof</span> one);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n != <span class=\"keyword\">sizeof</span> one)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" writes \"</span> &lt;&lt; n &lt;&lt; <span class=\"string\">\" bytes instead of 8\\n\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  s_efd = createEventfd();</span><br><span class=\"line\"></span><br><span class=\"line\">  fd_set rdset;</span><br><span class=\"line\">  FD_ZERO(&amp;rdset);</span><br><span class=\"line\">  FD_SET(s_efd, &amp;rdset);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">timeout</span>;</span></span><br><span class=\"line\">  timeout.tv_sec = <span class=\"number\">0</span>;</span><br><span class=\"line\">  timeout.tv_usec = <span class=\"number\">500000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">std</span>::thread <span class=\"title\">t</span><span class=\"params\">(testThread)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(select(s_efd + <span class=\"number\">1</span>, &amp;rdset, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;timeout) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"tick!!!!\\n\"</span>;</span><br><span class=\"line\">      timeout.tv_sec = <span class=\"number\">0</span>;</span><br><span class=\"line\">      timeout.tv_usec = <span class=\"number\">500000</span>;</span><br><span class=\"line\">      FD_SET(s_efd, &amp;rdset);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> one = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">ssize_t</span> n = <span class=\"built_in\">read</span>(s_efd, &amp;one, <span class=\"keyword\">sizeof</span> one);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n != <span class=\"keyword\">sizeof</span> one)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" read \"</span> &lt;&lt; n &lt;&lt; <span class=\"string\">\" bytes instead of 8\\n\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" wakeup ！\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  t.join();</span><br><span class=\"line\">  <span class=\"built_in\">close</span>(s_efd);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"title: '[C++] Timefd'\ndate: 2020-12-6 17:03\ntags:\n- timefd\ncategories:\n- C++\n\n## timefd\n\n```c++\n#include <sys/timerfd.h>\n#include <time.h>\n#include <unistd.h>\n#include <inttypes.h>      /* Definition of PRIu64 */\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdint.h>        /* Definition of uint64_t */\n\n#define handle_error(msg) \\\n        do { perror(msg); exit(EXIT_FAILURE); } while (0)\n\nstatic void\nprint_elapsed_time(void)\n{\n    static struct timespec start;\n    struct timespec curr;\n    static int first_call = 1;\n    int secs, nsecs;\n\n    if (first_call) {\n        first_call = 0;\n        if (clock_gettime(CLOCK_MONOTONIC, &start) == -1)\n            handle_error(\"clock_gettime\");\n    }\n\n    if (clock_gettime(CLOCK_MONOTONIC, &curr) == -1)\n        handle_error(\"clock_gettime\");\n\n    secs = curr.tv_sec - start.tv_sec;\n    nsecs = curr.tv_nsec - start.tv_nsec;\n    if (nsecs < 0) {\n        secs--;\n        nsecs += 1000000000;\n    }\n    printf(\"%d.%03d: \", secs, (nsecs + 500000) / 1000000);\n}\n\nint\nmain(int argc, char *argv[])\n{\n    struct itimerspec new_value;\n    int max_exp, fd;\n    struct timespec now;\n    uint64_t exp, tot_exp;\n    ssize_t s;\n\n    if ((argc != 2) && (argc != 4)) {\n        fprintf(stderr, \"%s init-secs [interval-secs max-exp]\\n\",\n                argv[0]);\n        exit(EXIT_FAILURE);\n    }\n\n    if (clock_gettime(CLOCK_REALTIME, &now) == -1)\n        handle_error(\"clock_gettime\");\n\n    /* Create a CLOCK_REALTIME absolute timer with initial\n        expiration and interval as specified in command line */\n\n    new_value.it_value.tv_sec = now.tv_sec + atoi(argv[1]);\n    new_value.it_value.tv_nsec = now.tv_nsec;\n    if (argc == 2) {\n        new_value.it_interval.tv_sec = 0;\n        max_exp = 1;\n    } else {\n        new_value.it_interval.tv_sec = atoi(argv[2]);\n        max_exp = atoi(argv[3]);\n    }\n    new_value.it_interval.tv_nsec = 0;\n\n    fd = timerfd_create(CLOCK_REALTIME, 0);\n    if (fd == -1)\n        handle_error(\"timerfd_create\");\n\n    if (timerfd_settime(fd, TFD_TIMER_ABSTIME, &new_value, NULL) == -1)\n        handle_error(\"timerfd_settime\");\n\n    print_elapsed_time();\n    printf(\"timer started\\n\");\n\n    for (tot_exp = 0; tot_exp < max_exp;) {\n        s = read(fd, &exp, sizeof(uint64_t));\n        if (s != sizeof(uint64_t))\n            handle_error(\"read\");\n\n        tot_exp += exp;\n        print_elapsed_time();\n        printf(\"read: %\" PRIu64 \"; total=%\" PRIu64 \"\\n\", exp, tot_exp);\n    }\n\n    exit(EXIT_SUCCESS);\n}\n```\n\n","source":"_posts/C++/timefd.md","raw":"title: '[C++] Timefd'\ndate: 2020-12-6 17:03\ntags:\n- timefd\ncategories:\n- C++\n\n## timefd\n\n```c++\n#include <sys/timerfd.h>\n#include <time.h>\n#include <unistd.h>\n#include <inttypes.h>      /* Definition of PRIu64 */\n#include <stdlib.h>\n#include <stdio.h>\n#include <stdint.h>        /* Definition of uint64_t */\n\n#define handle_error(msg) \\\n        do { perror(msg); exit(EXIT_FAILURE); } while (0)\n\nstatic void\nprint_elapsed_time(void)\n{\n    static struct timespec start;\n    struct timespec curr;\n    static int first_call = 1;\n    int secs, nsecs;\n\n    if (first_call) {\n        first_call = 0;\n        if (clock_gettime(CLOCK_MONOTONIC, &start) == -1)\n            handle_error(\"clock_gettime\");\n    }\n\n    if (clock_gettime(CLOCK_MONOTONIC, &curr) == -1)\n        handle_error(\"clock_gettime\");\n\n    secs = curr.tv_sec - start.tv_sec;\n    nsecs = curr.tv_nsec - start.tv_nsec;\n    if (nsecs < 0) {\n        secs--;\n        nsecs += 1000000000;\n    }\n    printf(\"%d.%03d: \", secs, (nsecs + 500000) / 1000000);\n}\n\nint\nmain(int argc, char *argv[])\n{\n    struct itimerspec new_value;\n    int max_exp, fd;\n    struct timespec now;\n    uint64_t exp, tot_exp;\n    ssize_t s;\n\n    if ((argc != 2) && (argc != 4)) {\n        fprintf(stderr, \"%s init-secs [interval-secs max-exp]\\n\",\n                argv[0]);\n        exit(EXIT_FAILURE);\n    }\n\n    if (clock_gettime(CLOCK_REALTIME, &now) == -1)\n        handle_error(\"clock_gettime\");\n\n    /* Create a CLOCK_REALTIME absolute timer with initial\n        expiration and interval as specified in command line */\n\n    new_value.it_value.tv_sec = now.tv_sec + atoi(argv[1]);\n    new_value.it_value.tv_nsec = now.tv_nsec;\n    if (argc == 2) {\n        new_value.it_interval.tv_sec = 0;\n        max_exp = 1;\n    } else {\n        new_value.it_interval.tv_sec = atoi(argv[2]);\n        max_exp = atoi(argv[3]);\n    }\n    new_value.it_interval.tv_nsec = 0;\n\n    fd = timerfd_create(CLOCK_REALTIME, 0);\n    if (fd == -1)\n        handle_error(\"timerfd_create\");\n\n    if (timerfd_settime(fd, TFD_TIMER_ABSTIME, &new_value, NULL) == -1)\n        handle_error(\"timerfd_settime\");\n\n    print_elapsed_time();\n    printf(\"timer started\\n\");\n\n    for (tot_exp = 0; tot_exp < max_exp;) {\n        s = read(fd, &exp, sizeof(uint64_t));\n        if (s != sizeof(uint64_t))\n            handle_error(\"read\");\n\n        tot_exp += exp;\n        print_elapsed_time();\n        printf(\"read: %\" PRIu64 \"; total=%\" PRIu64 \"\\n\", exp, tot_exp);\n    }\n\n    exit(EXIT_SUCCESS);\n}\n```\n\n","slug":"C++/timefd","published":1,"date":"2020-11-09T07:03:32.046Z","updated":"2020-12-06T09:03:28.307Z","title":"C++/timefd","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtu9m00062kwj7dh1asyz","content":"<p>title: ‘[C++] Timefd’<br />\ndate: 2020-12-6 17:03<br />\ntags:</p>\n<ul>\n<li>timefd<br />\ncategories:</li>\n<li>C++</li>\n</ul>\n<h2 id=\"timefd\"><a class=\"markdownIt-Anchor\" href=\"#timefd\"></a> timefd</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/timerfd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;inttypes.h&gt;      /* Definition of PRIu64 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdint.h&gt;        /* Definition of uint64_t */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> handle_error(msg) \\</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123; perror(msg); <span class=\"built_in\">exit</span>(EXIT_FAILURE); &#125; <span class=\"keyword\">while</span> (<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">print_elapsed_time(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timespec</span> <span class=\"title\">start</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timespec</span> <span class=\"title\">curr</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> first_call = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> secs, nsecs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first_call) &#123;</span><br><span class=\"line\">        first_call = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clock_gettime(CLOCK_MONOTONIC, &amp;start) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            handle_error(<span class=\"string\">\"clock_gettime\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clock_gettime(CLOCK_MONOTONIC, &amp;curr) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        handle_error(<span class=\"string\">\"clock_gettime\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    secs = curr.tv_sec - start.tv_sec;</span><br><span class=\"line\">    nsecs = curr.tv_nsec - start.tv_nsec;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nsecs &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        secs--;</span><br><span class=\"line\">        nsecs += <span class=\"number\">1000000000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d.%03d: \"</span>, secs, (nsecs + <span class=\"number\">500000</span>) / <span class=\"number\">1000000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">itimerspec</span> <span class=\"title\">new_value</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max_exp, fd;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timespec</span> <span class=\"title\">now</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> <span class=\"built_in\">exp</span>, tot_exp;</span><br><span class=\"line\">    <span class=\"keyword\">ssize_t</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((argc != <span class=\"number\">2</span>) &amp;&amp; (argc != <span class=\"number\">4</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"%s init-secs [interval-secs max-exp]\\n\"</span>,</span><br><span class=\"line\">                argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clock_gettime(CLOCK_REALTIME, &amp;now) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        handle_error(<span class=\"string\">\"clock_gettime\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Create a CLOCK_REALTIME absolute timer with initial</span></span><br><span class=\"line\"><span class=\"comment\">        expiration and interval as specified in command line */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    new_value.it_value.tv_sec = now.tv_sec + atoi(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    new_value.it_value.tv_nsec = now.tv_nsec;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        new_value.it_interval.tv_sec = <span class=\"number\">0</span>;</span><br><span class=\"line\">        max_exp = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        new_value.it_interval.tv_sec = atoi(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">        max_exp = atoi(argv[<span class=\"number\">3</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    new_value.it_interval.tv_nsec = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    fd = timerfd_create(CLOCK_REALTIME, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        handle_error(<span class=\"string\">\"timerfd_create\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timerfd_settime(fd, TFD_TIMER_ABSTIME, &amp;new_value, <span class=\"literal\">NULL</span>) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        handle_error(<span class=\"string\">\"timerfd_settime\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    print_elapsed_time();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"timer started\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (tot_exp = <span class=\"number\">0</span>; tot_exp &lt; max_exp;) &#123;</span><br><span class=\"line\">        s = <span class=\"built_in\">read</span>(fd, &amp;<span class=\"built_in\">exp</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint64_t</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s != <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint64_t</span>))</span><br><span class=\"line\">            handle_error(<span class=\"string\">\"read\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        tot_exp += <span class=\"built_in\">exp</span>;</span><br><span class=\"line\">        print_elapsed_time();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"read: %\"</span> PRIu64 <span class=\"string\">\"; total=%\"</span> PRIu64 <span class=\"string\">\"\\n\"</span>, <span class=\"built_in\">exp</span>, tot_exp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<p>title: ‘[C++] Timefd’<br />\ndate: 2020-12-6 17:03<br />\ntags:</p>\n<ul>\n<li>timefd<br />\ncategories:</li>\n<li>C++</li>\n</ul>\n<h2 id=\"timefd\"><a class=\"markdownIt-Anchor\" href=\"#timefd\"></a> timefd</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/timerfd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;inttypes.h&gt;      /* Definition of PRIu64 */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdint.h&gt;        /* Definition of uint64_t */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> handle_error(msg) \\</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123; perror(msg); <span class=\"built_in\">exit</span>(EXIT_FAILURE); &#125; <span class=\"keyword\">while</span> (<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">print_elapsed_time(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timespec</span> <span class=\"title\">start</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timespec</span> <span class=\"title\">curr</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> first_call = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> secs, nsecs;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first_call) &#123;</span><br><span class=\"line\">        first_call = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clock_gettime(CLOCK_MONOTONIC, &amp;start) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            handle_error(<span class=\"string\">\"clock_gettime\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clock_gettime(CLOCK_MONOTONIC, &amp;curr) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        handle_error(<span class=\"string\">\"clock_gettime\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    secs = curr.tv_sec - start.tv_sec;</span><br><span class=\"line\">    nsecs = curr.tv_nsec - start.tv_nsec;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nsecs &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        secs--;</span><br><span class=\"line\">        nsecs += <span class=\"number\">1000000000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d.%03d: \"</span>, secs, (nsecs + <span class=\"number\">500000</span>) / <span class=\"number\">1000000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">itimerspec</span> <span class=\"title\">new_value</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max_exp, fd;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timespec</span> <span class=\"title\">now</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> <span class=\"built_in\">exp</span>, tot_exp;</span><br><span class=\"line\">    <span class=\"keyword\">ssize_t</span> s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((argc != <span class=\"number\">2</span>) &amp;&amp; (argc != <span class=\"number\">4</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"%s init-secs [interval-secs max-exp]\\n\"</span>,</span><br><span class=\"line\">                argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clock_gettime(CLOCK_REALTIME, &amp;now) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        handle_error(<span class=\"string\">\"clock_gettime\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Create a CLOCK_REALTIME absolute timer with initial</span></span><br><span class=\"line\"><span class=\"comment\">        expiration and interval as specified in command line */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    new_value.it_value.tv_sec = now.tv_sec + atoi(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    new_value.it_value.tv_nsec = now.tv_nsec;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        new_value.it_interval.tv_sec = <span class=\"number\">0</span>;</span><br><span class=\"line\">        max_exp = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        new_value.it_interval.tv_sec = atoi(argv[<span class=\"number\">2</span>]);</span><br><span class=\"line\">        max_exp = atoi(argv[<span class=\"number\">3</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    new_value.it_interval.tv_nsec = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    fd = timerfd_create(CLOCK_REALTIME, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fd == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        handle_error(<span class=\"string\">\"timerfd_create\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timerfd_settime(fd, TFD_TIMER_ABSTIME, &amp;new_value, <span class=\"literal\">NULL</span>) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        handle_error(<span class=\"string\">\"timerfd_settime\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    print_elapsed_time();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"timer started\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (tot_exp = <span class=\"number\">0</span>; tot_exp &lt; max_exp;) &#123;</span><br><span class=\"line\">        s = <span class=\"built_in\">read</span>(fd, &amp;<span class=\"built_in\">exp</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint64_t</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s != <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint64_t</span>))</span><br><span class=\"line\">            handle_error(<span class=\"string\">\"read\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        tot_exp += <span class=\"built_in\">exp</span>;</span><br><span class=\"line\">        print_elapsed_time();</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"read: %\"</span> PRIu64 <span class=\"string\">\"; total=%\"</span> PRIu64 <span class=\"string\">\"\\n\"</span>, <span class=\"built_in\">exp</span>, tot_exp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"[C++] 遍历tuple","date":"2020-12-06T08:57:00.000Z","_content":"\n## 遍历tuple\n\n#### 常规思维错误方法\n\n```c++\ntemplate<typename... Args>\nstd::ostream& operator<<(std::ostream& os, const std::tuple<Args...>& t)\n{\n    os << \"(\" << std::get<0>(t);\n    for (size_t i = 1; i < sizeof...(Args) << ++i)\n        os << \", \" << std::get<i>(t); // i 出错\n    return os << \"]\";\n}\n\nint main(int, char**)\n{\n    cout << make_tuple(\"InsideZhang\", 23, \"HeNan\") << endl;\n            // 编译出错，局部变量i不可作为非类型模板参数\n    return 0;\n}\n```\n\n### C++11 正确方法\n\n```c++\ntemplate<typename Tuple, size_t N>\nstruct tuple_print\n{\n    static void print(const Tuple& t, std::ostream& os)\n    {\n        tuple_print<Tuple, N-1>::print(t, os);\n        os << \", \" << std::get<N-1>(t); \n    }\n};\n// 类模板的特化版本\ntemplate<typename Tuple>\nstruct tuple_print<Tuple, 1>\n{\n    static void print(const Tuple& t, std::ostream& os)\n    {\n        os << \"(\" << std::get<0>(t); \n    }\n};\n\n// operator<<\ntemplate<typename... Args>\nstd::ostream& operaotr<<(std::ostream& os, const std::tuple<Args...>& t)\n{\n    tuple_print<decltype(t), sizeof...(Args)>::print(t, os);\n    return os << \")\";\n}\n```\n\n### C++14方法\n\n通过`integer_sequence`快速实现\n\n```c++\n#include <iostream> \n#include <tuple>\n#include <string>\n#include <initializer_list>\n\ntemplate<typename Tuple, int... N>\nvoid print(const Tuple& t, std::index_sequence<N...>) {\n\tstd::initializer_list<int>{ ((std::cout << std::get<N>(t) << \" \"), 0)... };\n\t//((std::cout << std::get<N>(t) << std::endl), ...); c++17 fold表达式\n}\n\ntemplate<typename... Args>\nvoid fun(const std::tuple<Args...>& t) {\n\tprint(t, std::index_sequence_for<Args...>{});\n}\n\nint main() {\n\tint i = 3;\n\tauto t = std::make_tuple(\"hello\", 1, \"world\", 2, \"!\", i);\n\tfun(t);\n\treturn 0;\n}\n```\n\n库中辅助函数：\n\n```c++\ntemplate <size_t... _Vals>\nusing index_sequence = integer_sequence<size_t, _Vals...>;\n\ntemplate <size_t _Size>\nusing make_index_sequence = make_integer_sequence<size_t, _Size>;\n\ntemplate <class... _Types>\nusing index_sequence_for = make_index_sequence<sizeof...(_Types)>;\n```\n\n\n\n","source":"_posts/C++/traversal-tuple.md","raw":"---\ntitle: '[C++] 遍历tuple'\ndate: 2020-12-6 16:57\ntags:\n- tuple\n- STL\ncategories:\n- C++\n---\n\n## 遍历tuple\n\n#### 常规思维错误方法\n\n```c++\ntemplate<typename... Args>\nstd::ostream& operator<<(std::ostream& os, const std::tuple<Args...>& t)\n{\n    os << \"(\" << std::get<0>(t);\n    for (size_t i = 1; i < sizeof...(Args) << ++i)\n        os << \", \" << std::get<i>(t); // i 出错\n    return os << \"]\";\n}\n\nint main(int, char**)\n{\n    cout << make_tuple(\"InsideZhang\", 23, \"HeNan\") << endl;\n            // 编译出错，局部变量i不可作为非类型模板参数\n    return 0;\n}\n```\n\n### C++11 正确方法\n\n```c++\ntemplate<typename Tuple, size_t N>\nstruct tuple_print\n{\n    static void print(const Tuple& t, std::ostream& os)\n    {\n        tuple_print<Tuple, N-1>::print(t, os);\n        os << \", \" << std::get<N-1>(t); \n    }\n};\n// 类模板的特化版本\ntemplate<typename Tuple>\nstruct tuple_print<Tuple, 1>\n{\n    static void print(const Tuple& t, std::ostream& os)\n    {\n        os << \"(\" << std::get<0>(t); \n    }\n};\n\n// operator<<\ntemplate<typename... Args>\nstd::ostream& operaotr<<(std::ostream& os, const std::tuple<Args...>& t)\n{\n    tuple_print<decltype(t), sizeof...(Args)>::print(t, os);\n    return os << \")\";\n}\n```\n\n### C++14方法\n\n通过`integer_sequence`快速实现\n\n```c++\n#include <iostream> \n#include <tuple>\n#include <string>\n#include <initializer_list>\n\ntemplate<typename Tuple, int... N>\nvoid print(const Tuple& t, std::index_sequence<N...>) {\n\tstd::initializer_list<int>{ ((std::cout << std::get<N>(t) << \" \"), 0)... };\n\t//((std::cout << std::get<N>(t) << std::endl), ...); c++17 fold表达式\n}\n\ntemplate<typename... Args>\nvoid fun(const std::tuple<Args...>& t) {\n\tprint(t, std::index_sequence_for<Args...>{});\n}\n\nint main() {\n\tint i = 3;\n\tauto t = std::make_tuple(\"hello\", 1, \"world\", 2, \"!\", i);\n\tfun(t);\n\treturn 0;\n}\n```\n\n库中辅助函数：\n\n```c++\ntemplate <size_t... _Vals>\nusing index_sequence = integer_sequence<size_t, _Vals...>;\n\ntemplate <size_t _Size>\nusing make_index_sequence = make_integer_sequence<size_t, _Size>;\n\ntemplate <class... _Types>\nusing index_sequence_for = make_index_sequence<sizeof...(_Types)>;\n```\n\n\n\n","slug":"C++/traversal-tuple","published":1,"updated":"2020-12-06T08:58:35.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtu9r000a2kwj005t14ux","content":"<h2 id=\"遍历tuple\"><a class=\"markdownIt-Anchor\" href=\"#遍历tuple\"></a> 遍历tuple</h2>\n<h4 id=\"常规思维错误方法\"><a class=\"markdownIt-Anchor\" href=\"#常规思维错误方法\"></a> 常规思维错误方法</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span>... Args&gt;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(<span class=\"built_in\">std</span>::ostream&amp; os, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::tuple&lt;Args...&gt;&amp; t)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    os &lt;&lt; <span class=\"string\">\"(\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"keyword\">sizeof</span>...(Args) &lt;&lt; ++i)</span><br><span class=\"line\">        os &lt;&lt; <span class=\"string\">\", \"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">get</span>&lt;i&gt;(t); <span class=\"comment\">// i 出错</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> os &lt;&lt; <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">char</span>**)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; make_tuple(<span class=\"string\">\"InsideZhang\"</span>, <span class=\"number\">23</span>, <span class=\"string\">\"HeNan\"</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 编译出错，局部变量i不可作为非类型模板参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"c11-正确方法\"><a class=\"markdownIt-Anchor\" href=\"#c11-正确方法\"></a> C++11 正确方法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Tuple, <span class=\"keyword\">size_t</span> N&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tuple_print</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">const</span> Tuple&amp; t, <span class=\"built_in\">std</span>::ostream&amp; os)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tuple_print&lt;Tuple, N<span class=\"number\">-1</span>&gt;::<span class=\"built_in\">print</span>(t, os);</span><br><span class=\"line\">        os &lt;&lt; <span class=\"string\">\", \"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">get</span>&lt;N<span class=\"number\">-1</span>&gt;(t); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 类模板的特化版本</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Tuple&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tuple_print</span>&lt;Tuple, 1&gt;</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">const</span> Tuple&amp; t, <span class=\"built_in\">std</span>::ostream&amp; os)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        os &lt;&lt; <span class=\"string\">\"(\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(t); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// operator&lt;&lt;</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span>... Args&gt;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::ostream&amp; operaotr&lt;&lt;(<span class=\"built_in\">std</span>::ostream&amp; os, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::tuple&lt;Args...&gt;&amp; t)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    tuple_print&lt;<span class=\"keyword\">decltype</span>(t), <span class=\"keyword\">sizeof</span>...(Args)&gt;::<span class=\"built_in\">print</span>(t, os);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> os &lt;&lt; <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"c14方法\"><a class=\"markdownIt-Anchor\" href=\"#c14方法\"></a> C++14方法</h3>\n<p>通过<code>integer_sequence</code>快速实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tuple&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;initializer_list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Tuple, <span class=\"keyword\">int</span>... N&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">const</span> Tuple&amp; t, <span class=\"built_in\">std</span>::index_sequence&lt;N...&gt;)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">initializer_list</span>&lt;<span class=\"keyword\">int</span>&gt;&#123; ((<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">get</span>&lt;N&gt;(t) &lt;&lt; <span class=\"string\">\" \"</span>), <span class=\"number\">0</span>)... &#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//((std::cout &lt;&lt; std::get&lt;N&gt;(t) &lt;&lt; std::endl), ...); c++17 fold表达式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span>... Args&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::tuple&lt;Args...&gt;&amp; t)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(t, <span class=\"built_in\">std</span>::index_sequence_for&lt;Args...&gt;&#123;&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> t = <span class=\"built_in\">std</span>::make_tuple(<span class=\"string\">\"hello\"</span>, <span class=\"number\">1</span>, <span class=\"string\">\"world\"</span>, <span class=\"number\">2</span>, <span class=\"string\">\"!\"</span>, i);</span><br><span class=\"line\">\tfun(t);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>库中辅助函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">size_t</span>... _Vals&gt;</span><br><span class=\"line\"><span class=\"keyword\">using</span> index_sequence = integer_sequence&lt;<span class=\"keyword\">size_t</span>, _Vals...&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">size_t</span> _Size&gt;</span><br><span class=\"line\"><span class=\"keyword\">using</span> make_index_sequence = make_integer_sequence&lt;<span class=\"keyword\">size_t</span>, _Size&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... _<span class=\"title\">Types</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">using</span> <span class=\"title\">index_sequence_for</span> = <span class=\"title\">make_index_sequence</span>&lt;sizeof...(_Types)&gt;;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"遍历tuple\"><a class=\"markdownIt-Anchor\" href=\"#遍历tuple\"></a> 遍历tuple</h2>\n<h4 id=\"常规思维错误方法\"><a class=\"markdownIt-Anchor\" href=\"#常规思维错误方法\"></a> 常规思维错误方法</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span>... Args&gt;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(<span class=\"built_in\">std</span>::ostream&amp; os, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::tuple&lt;Args...&gt;&amp; t)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    os &lt;&lt; <span class=\"string\">\"(\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"keyword\">sizeof</span>...(Args) &lt;&lt; ++i)</span><br><span class=\"line\">        os &lt;&lt; <span class=\"string\">\", \"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">get</span>&lt;i&gt;(t); <span class=\"comment\">// i 出错</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> os &lt;&lt; <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">char</span>**)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; make_tuple(<span class=\"string\">\"InsideZhang\"</span>, <span class=\"number\">23</span>, <span class=\"string\">\"HeNan\"</span>) &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 编译出错，局部变量i不可作为非类型模板参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"c11-正确方法\"><a class=\"markdownIt-Anchor\" href=\"#c11-正确方法\"></a> C++11 正确方法</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Tuple, <span class=\"keyword\">size_t</span> N&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tuple_print</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">const</span> Tuple&amp; t, <span class=\"built_in\">std</span>::ostream&amp; os)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tuple_print&lt;Tuple, N<span class=\"number\">-1</span>&gt;::<span class=\"built_in\">print</span>(t, os);</span><br><span class=\"line\">        os &lt;&lt; <span class=\"string\">\", \"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">get</span>&lt;N<span class=\"number\">-1</span>&gt;(t); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 类模板的特化版本</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Tuple&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tuple_print</span>&lt;Tuple, 1&gt;</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">const</span> Tuple&amp; t, <span class=\"built_in\">std</span>::ostream&amp; os)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        os &lt;&lt; <span class=\"string\">\"(\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">get</span>&lt;<span class=\"number\">0</span>&gt;(t); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// operator&lt;&lt;</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span>... Args&gt;</span><br><span class=\"line\"><span class=\"built_in\">std</span>::ostream&amp; operaotr&lt;&lt;(<span class=\"built_in\">std</span>::ostream&amp; os, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::tuple&lt;Args...&gt;&amp; t)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    tuple_print&lt;<span class=\"keyword\">decltype</span>(t), <span class=\"keyword\">sizeof</span>...(Args)&gt;::<span class=\"built_in\">print</span>(t, os);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> os &lt;&lt; <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"c14方法\"><a class=\"markdownIt-Anchor\" href=\"#c14方法\"></a> C++14方法</h3>\n<p>通过<code>integer_sequence</code>快速实现</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;tuple&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;initializer_list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Tuple, <span class=\"keyword\">int</span>... N&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">const</span> Tuple&amp; t, <span class=\"built_in\">std</span>::index_sequence&lt;N...&gt;)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">initializer_list</span>&lt;<span class=\"keyword\">int</span>&gt;&#123; ((<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">get</span>&lt;N&gt;(t) &lt;&lt; <span class=\"string\">\" \"</span>), <span class=\"number\">0</span>)... &#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//((std::cout &lt;&lt; std::get&lt;N&gt;(t) &lt;&lt; std::endl), ...); c++17 fold表达式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span>... Args&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::tuple&lt;Args...&gt;&amp; t)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(t, <span class=\"built_in\">std</span>::index_sequence_for&lt;Args...&gt;&#123;&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> t = <span class=\"built_in\">std</span>::make_tuple(<span class=\"string\">\"hello\"</span>, <span class=\"number\">1</span>, <span class=\"string\">\"world\"</span>, <span class=\"number\">2</span>, <span class=\"string\">\"!\"</span>, i);</span><br><span class=\"line\">\tfun(t);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>库中辅助函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">size_t</span>... _Vals&gt;</span><br><span class=\"line\"><span class=\"keyword\">using</span> index_sequence = integer_sequence&lt;<span class=\"keyword\">size_t</span>, _Vals...&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">size_t</span> _Size&gt;</span><br><span class=\"line\"><span class=\"keyword\">using</span> make_index_sequence = make_integer_sequence&lt;<span class=\"keyword\">size_t</span>, _Size&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span>... _<span class=\"title\">Types</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">using</span> <span class=\"title\">index_sequence_for</span> = <span class=\"title\">make_index_sequence</span>&lt;sizeof...(_Types)&gt;;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"CS143 编译原理-3","date":"2020-10-05T16:43:00.000Z","_content":"\n## 语法分析2\n\n### First集\n\n#### 如何构建parsing table 构建LL(1)parsing table需要哪些条件\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003132022.png\" width=\"600px\"> </div>\n\n[上图解释]\n\n给定$A, \\alpha, t$ 在什么情况下$T[A, t]=\\alpha$能成立？\n\n第一种情况，$\\alpha$通过一步或多步推导能推出t，且t处在第一个位置，这时候说t属于$\\alpha$的First集；\n\n第二种情况，$\\alpha$不能直接推出t（t不属于$\\alpha$的First集），但A能推出$\\alpha$，$\\alpha$能推出$\\epsilon$，且在某个产生式中t位置在A后，则$T[A, t]=\\alpha$也能成立，且称t属于A的Follow集\n\n#### 定义\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135005.png\" width=\"300px\"> </div>\n\n一些可推规则：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135447.png\" width=\"500px\"> </div>\n\n求First集的一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003140150.png\" width=\"500px\"> </div>\n\n### Follow集\n\n#### 定义\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003162550.png\" width=\"300px\"> </div>\n\n一些可推规则：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163011.png\" width=\"400px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163151.png\" width=\"400px\"> </div>\n\n求First集的一个例子，需要用到First集：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003164657.png\" width=\"600px\"> </div>\n\n### LL(1) Pasring Tables\n\n使用First集和Follow集来构建LL(1) parsing table\n\n目的：对于CFG G，构建一个parsing table T\n\n对每一个在G中的产生式进行以下算法：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170101.png\" width=\"400px\"> </div>\n\n考虑每个生成式在右侧第一个位置能生成什么\n\n一个生成LL(1) parsing table 的例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170958.png\" width=\"550px\"> </div>\n\n如果走到了表格中的空白区域则说明解析错误\n\n如果对一个左递归的grammar构建parsing table：\n\n- $S\\rightarrow Sa|b$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003171506.png\" width=\"400px\"> </div>\n\n构建出来的parsing table中的某些单元格中可能存在多种选择，则这个语法不是LL(1)的\n\n[not left factored] [left recursive] [ambiguous] [other] 都不是LL(1)的，实际上大多数编程语言的CFG都不是LL(1)的，LL(1)语法太弱\n\n### 自下而上的解析 Bottom-Up Parsing\n\n自下而上解析比自上而下解析更加通用，且也高效，用到了自上而下的思想，是大多数编译器首选的方法\n\n- 自下而上解析不需要left-factored语法\n\n一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201004104247.png\" width=\"500px\"> </div>\n\n**reduce 规约**\n\n![20201007153346](C:\\Users\\jxhnw\\Desktop\\image\\20201007153346.png)\n\n关于bottom-up parsing的重要**Fact #1**：\n\nbottom-up parsing是最右推导的反向实现\n\n![20201007154748](C:\\Users\\jxhnw\\Desktop\\image\\20201007154748.png)\n\n### 移位规约解析 Shift Reduce Parsing\n\n![20201007155055](C:\\Users\\jxhnw\\Desktop\\image\\20201007155055.png)\n\n$\\omega$一定是终结符，才能使用$X\\rightarrow \\beta$\n\n![20201007163859](C:\\Users\\jxhnw\\Desktop\\image\\20201007163859.png)\n\n右边的substring是还未parse的，左边的substring包含终结符和非终结符","source":"_posts/cs143/cs143-3.md","raw":"---\ntitle: CS143 编译原理-3\ndate: 2020-10-6 0:43\ntags: \n- CS143\n- 词法分析\n- Lex\ncategories: \n- 编译\n- 编译原理\n---\n\n## 语法分析2\n\n### First集\n\n#### 如何构建parsing table 构建LL(1)parsing table需要哪些条件\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003132022.png\" width=\"600px\"> </div>\n\n[上图解释]\n\n给定$A, \\alpha, t$ 在什么情况下$T[A, t]=\\alpha$能成立？\n\n第一种情况，$\\alpha$通过一步或多步推导能推出t，且t处在第一个位置，这时候说t属于$\\alpha$的First集；\n\n第二种情况，$\\alpha$不能直接推出t（t不属于$\\alpha$的First集），但A能推出$\\alpha$，$\\alpha$能推出$\\epsilon$，且在某个产生式中t位置在A后，则$T[A, t]=\\alpha$也能成立，且称t属于A的Follow集\n\n#### 定义\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135005.png\" width=\"300px\"> </div>\n\n一些可推规则：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135447.png\" width=\"500px\"> </div>\n\n求First集的一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003140150.png\" width=\"500px\"> </div>\n\n### Follow集\n\n#### 定义\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003162550.png\" width=\"300px\"> </div>\n\n一些可推规则：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163011.png\" width=\"400px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163151.png\" width=\"400px\"> </div>\n\n求First集的一个例子，需要用到First集：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003164657.png\" width=\"600px\"> </div>\n\n### LL(1) Pasring Tables\n\n使用First集和Follow集来构建LL(1) parsing table\n\n目的：对于CFG G，构建一个parsing table T\n\n对每一个在G中的产生式进行以下算法：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170101.png\" width=\"400px\"> </div>\n\n考虑每个生成式在右侧第一个位置能生成什么\n\n一个生成LL(1) parsing table 的例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170958.png\" width=\"550px\"> </div>\n\n如果走到了表格中的空白区域则说明解析错误\n\n如果对一个左递归的grammar构建parsing table：\n\n- $S\\rightarrow Sa|b$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003171506.png\" width=\"400px\"> </div>\n\n构建出来的parsing table中的某些单元格中可能存在多种选择，则这个语法不是LL(1)的\n\n[not left factored] [left recursive] [ambiguous] [other] 都不是LL(1)的，实际上大多数编程语言的CFG都不是LL(1)的，LL(1)语法太弱\n\n### 自下而上的解析 Bottom-Up Parsing\n\n自下而上解析比自上而下解析更加通用，且也高效，用到了自上而下的思想，是大多数编译器首选的方法\n\n- 自下而上解析不需要left-factored语法\n\n一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201004104247.png\" width=\"500px\"> </div>\n\n**reduce 规约**\n\n![20201007153346](C:\\Users\\jxhnw\\Desktop\\image\\20201007153346.png)\n\n关于bottom-up parsing的重要**Fact #1**：\n\nbottom-up parsing是最右推导的反向实现\n\n![20201007154748](C:\\Users\\jxhnw\\Desktop\\image\\20201007154748.png)\n\n### 移位规约解析 Shift Reduce Parsing\n\n![20201007155055](C:\\Users\\jxhnw\\Desktop\\image\\20201007155055.png)\n\n$\\omega$一定是终结符，才能使用$X\\rightarrow \\beta$\n\n![20201007163859](C:\\Users\\jxhnw\\Desktop\\image\\20201007163859.png)\n\n右边的substring是还未parse的，左边的substring包含终结符和非终结符","slug":"cs143/cs143-3","published":1,"updated":"2020-10-19T13:04:31.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtu9t000c2kwj1gue85ao","content":"<h2 id=\"语法分析2\"><a class=\"markdownIt-Anchor\" href=\"#语法分析2\"></a> 语法分析2</h2>\n<h3 id=\"first集\"><a class=\"markdownIt-Anchor\" href=\"#first集\"></a> First集</h3>\n<h4 id=\"如何构建parsing-table-构建ll1parsing-table需要哪些条件\"><a class=\"markdownIt-Anchor\" href=\"#如何构建parsing-table-构建ll1parsing-table需要哪些条件\"></a> 如何构建parsing table 构建LL(1)parsing table需要哪些条件</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003132022.png\" width=\"600px\"> </div>\n<p>[上图解释]</p>\n<p>给定<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>α</mi><mo separator=\"true\">,</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">A, \\alpha, t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span> 在什么情况下<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo stretchy=\"false\">[</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">T[A, t]=\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>能成立？</p>\n<p>第一种情况，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>通过一步或多步推导能推出t，且t处在第一个位置，这时候说t属于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>的First集；</p>\n<p>第二种情况，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>不能直接推出t（t不属于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>的First集），但A能推出<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>能推出<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ϵ</span></span></span></span>，且在某个产生式中t位置在A后，则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo stretchy=\"false\">[</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">T[A, t]=\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>也能成立，且称t属于A的Follow集</p>\n<h4 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\"></a> 定义</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135005.png\" width=\"300px\"> </div>\n<p>一些可推规则：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135447.png\" width=\"500px\"> </div>\n<p>求First集的一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003140150.png\" width=\"500px\"> </div>\n<h3 id=\"follow集\"><a class=\"markdownIt-Anchor\" href=\"#follow集\"></a> Follow集</h3>\n<h4 id=\"定义-2\"><a class=\"markdownIt-Anchor\" href=\"#定义-2\"></a> 定义</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003162550.png\" width=\"300px\"> </div>\n<p>一些可推规则：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163011.png\" width=\"400px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163151.png\" width=\"400px\"> </div>\n<p>求First集的一个例子，需要用到First集：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003164657.png\" width=\"600px\"> </div>\n<h3 id=\"ll1-pasring-tables\"><a class=\"markdownIt-Anchor\" href=\"#ll1-pasring-tables\"></a> LL(1) Pasring Tables</h3>\n<p>使用First集和Follow集来构建LL(1) parsing table</p>\n<p>目的：对于CFG G，构建一个parsing table T</p>\n<p>对每一个在G中的产生式进行以下算法：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170101.png\" width=\"400px\"> </div>\n<p>考虑每个生成式在右侧第一个位置能生成什么</p>\n<p>一个生成LL(1) parsing table 的例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170958.png\" width=\"550px\"> </div>\n<p>如果走到了表格中的空白区域则说明解析错误</p>\n<p>如果对一个左递归的grammar构建parsing table：</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>→</mo><mi>S</mi><mi>a</mi><mi mathvariant=\"normal\">∣</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">S\\rightarrow Sa|b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">b</span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003171506.png\" width=\"400px\"> </div>\n<p>构建出来的parsing table中的某些单元格中可能存在多种选择，则这个语法不是LL(1)的</p>\n<p>[not left factored] [left recursive] [ambiguous] [other] 都不是LL(1)的，实际上大多数编程语言的CFG都不是LL(1)的，LL(1)语法太弱</p>\n<h3 id=\"自下而上的解析-bottom-up-parsing\"><a class=\"markdownIt-Anchor\" href=\"#自下而上的解析-bottom-up-parsing\"></a> 自下而上的解析 Bottom-Up Parsing</h3>\n<p>自下而上解析比自上而下解析更加通用，且也高效，用到了自上而下的思想，是大多数编译器首选的方法</p>\n<ul>\n<li>自下而上解析不需要left-factored语法</li>\n</ul>\n<p>一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201004104247.png\" width=\"500px\"> </div>\n<p><strong>reduce 规约</strong></p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007153346.png\" alt=\"20201007153346\" /></p>\n<p>关于bottom-up parsing的重要<strong>Fact #1</strong>：</p>\n<p>bottom-up parsing是最右推导的反向实现</p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007154748.png\" alt=\"20201007154748\" /></p>\n<h3 id=\"移位规约解析-shift-reduce-parsing\"><a class=\"markdownIt-Anchor\" href=\"#移位规约解析-shift-reduce-parsing\"></a> 移位规约解析 Shift Reduce Parsing</h3>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007155055.png\" alt=\"20201007155055\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span>一定是终结符，才能使用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">X\\rightarrow \\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span></p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007163859.png\" alt=\"20201007163859\" /></p>\n<p>右边的substring是还未parse的，左边的substring包含终结符和非终结符</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"语法分析2\"><a class=\"markdownIt-Anchor\" href=\"#语法分析2\"></a> 语法分析2</h2>\n<h3 id=\"first集\"><a class=\"markdownIt-Anchor\" href=\"#first集\"></a> First集</h3>\n<h4 id=\"如何构建parsing-table-构建ll1parsing-table需要哪些条件\"><a class=\"markdownIt-Anchor\" href=\"#如何构建parsing-table-构建ll1parsing-table需要哪些条件\"></a> 如何构建parsing table 构建LL(1)parsing table需要哪些条件</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003132022.png\" width=\"600px\"> </div>\n<p>[上图解释]</p>\n<p>给定<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>α</mi><mo separator=\"true\">,</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">A, \\alpha, t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span> 在什么情况下<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo stretchy=\"false\">[</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">T[A, t]=\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>能成立？</p>\n<p>第一种情况，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>通过一步或多步推导能推出t，且t处在第一个位置，这时候说t属于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>的First集；</p>\n<p>第二种情况，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>不能直接推出t（t不属于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>的First集），但A能推出<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>能推出<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ϵ</span></span></span></span>，且在某个产生式中t位置在A后，则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo stretchy=\"false\">[</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">T[A, t]=\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>也能成立，且称t属于A的Follow集</p>\n<h4 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\"></a> 定义</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135005.png\" width=\"300px\"> </div>\n<p>一些可推规则：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135447.png\" width=\"500px\"> </div>\n<p>求First集的一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003140150.png\" width=\"500px\"> </div>\n<h3 id=\"follow集\"><a class=\"markdownIt-Anchor\" href=\"#follow集\"></a> Follow集</h3>\n<h4 id=\"定义-2\"><a class=\"markdownIt-Anchor\" href=\"#定义-2\"></a> 定义</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003162550.png\" width=\"300px\"> </div>\n<p>一些可推规则：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163011.png\" width=\"400px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163151.png\" width=\"400px\"> </div>\n<p>求First集的一个例子，需要用到First集：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003164657.png\" width=\"600px\"> </div>\n<h3 id=\"ll1-pasring-tables\"><a class=\"markdownIt-Anchor\" href=\"#ll1-pasring-tables\"></a> LL(1) Pasring Tables</h3>\n<p>使用First集和Follow集来构建LL(1) parsing table</p>\n<p>目的：对于CFG G，构建一个parsing table T</p>\n<p>对每一个在G中的产生式进行以下算法：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170101.png\" width=\"400px\"> </div>\n<p>考虑每个生成式在右侧第一个位置能生成什么</p>\n<p>一个生成LL(1) parsing table 的例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170958.png\" width=\"550px\"> </div>\n<p>如果走到了表格中的空白区域则说明解析错误</p>\n<p>如果对一个左递归的grammar构建parsing table：</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>→</mo><mi>S</mi><mi>a</mi><mi mathvariant=\"normal\">∣</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">S\\rightarrow Sa|b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">b</span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003171506.png\" width=\"400px\"> </div>\n<p>构建出来的parsing table中的某些单元格中可能存在多种选择，则这个语法不是LL(1)的</p>\n<p>[not left factored] [left recursive] [ambiguous] [other] 都不是LL(1)的，实际上大多数编程语言的CFG都不是LL(1)的，LL(1)语法太弱</p>\n<h3 id=\"自下而上的解析-bottom-up-parsing\"><a class=\"markdownIt-Anchor\" href=\"#自下而上的解析-bottom-up-parsing\"></a> 自下而上的解析 Bottom-Up Parsing</h3>\n<p>自下而上解析比自上而下解析更加通用，且也高效，用到了自上而下的思想，是大多数编译器首选的方法</p>\n<ul>\n<li>自下而上解析不需要left-factored语法</li>\n</ul>\n<p>一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201004104247.png\" width=\"500px\"> </div>\n<p><strong>reduce 规约</strong></p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007153346.png\" alt=\"20201007153346\" /></p>\n<p>关于bottom-up parsing的重要<strong>Fact #1</strong>：</p>\n<p>bottom-up parsing是最右推导的反向实现</p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007154748.png\" alt=\"20201007154748\" /></p>\n<h3 id=\"移位规约解析-shift-reduce-parsing\"><a class=\"markdownIt-Anchor\" href=\"#移位规约解析-shift-reduce-parsing\"></a> 移位规约解析 Shift Reduce Parsing</h3>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007155055.png\" alt=\"20201007155055\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span>一定是终结符，才能使用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">X\\rightarrow \\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span></p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007163859.png\" alt=\"20201007163859\" /></p>\n<p>右边的substring是还未parse的，左边的substring包含终结符和非终结符</p>\n"},{"title":"CS143 编译原理-1","date":"2020-09-28T08:41:00.000Z","_content":"\n- 编译器结构\n  1. 词法分析 (Lexical Analysis)\n  2. 语法分析 (Parsing)\n  3. 语义分析 (Semantic Analysis)\n  4. 优化 (Optimization)\n  5. 代码生成 (Code Generation)\n\n早期的编译器和现在的编译器的对比：\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927155639.png\" width=\"500px\"> </div>\n\n\n现在的编译器花了更多的时间在优化上面\n\n## 词法分析\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160531.png\" width=\"500px\"> </div>\n\n\n\"Words\" => \"Tokens Class\": **Identifier**, **keywords**, '**(**', '**)**', **numbers**, ...\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160906.png\" width=\"500px\"> </div>\n\n\n词法分析器将字符子串分类成Tokens，传递给**Parser**\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927161438.png\" width=\"500px\"> </div>\n\n\n- Left-to-right scan => lookahead sometimes required 有时候需要向前几个字符参考，来确定当前的token\n\n### 正则语言 Regular Languages\n\n- Regular expressions\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164524.png\" width=\"280px\"> </div>\n\n\n\n**Epsilon**不是空集，是一个只包含空字符的集合\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164758.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927165627.png\" width=\"500px\"> </div>\n\ngrammar: 文法\n\n- Regular expressions (syntax) specify regular languages (set of strings)\n\n### 形式化语言 Formal Languages\n\n- **Def.** Let $\\sum$ be a set of characters (an alphabet). \n\n  A **language** over $\\sum$ is a set of strings of characters drawn from $\\sum$\n\n- Meaning function $L$ maps **syntax** to **semantics** $L: Exp\\rightarrow Sets\\ of\\ Strings$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927172527.png\" width=\"500px\"> </div>\n\n- Meaning is many to one\n  - Never one to many!\n\n### Lexical Specifications\n\n- $AA^*=A^+$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232010.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232447.png\" width=\"500px\"> </div>\n\n最后一个表示补集\n\n- 如何预测一个s是不是属于L(R)\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232857.png\" width=\"500px\"> </div>\n\n写出所有类型token的正则表达式\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232923.png\" width=\"500px\"> </div>\n\n\n构建R，R能匹配所有类型的token\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927234514.png\" width=\"500px\"> </div>\n\n\n检查前缀是不是属于R，如果属于R，则一定属于R中的某个token类Rj，删除匹配完成的前缀接着进行第三步\n\n**一些问题**：\n\n1. 当较短和较长的字符串都匹配时，选较长的  \"Maximal Match\"\n\n2. 当同一个字符串和多个正则表达式匹配时，根据优先级\n\n3. What if no rule matches? 添加一个错误类，优先级设置成最低\n\n### 有限自动机\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928001815.png\" width=\"450px\"> </div>\n\n\n有限自动机是一种算法的实现\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928002027.png\" width=\"450px\"> </div>\n\n- 在一个状态，读取一些输入，变成另一个状态\n- 如果读完输入，最后处于接受状态，则accept，否则就reject\n\n#### DFA (Deterministic Finite Automata) 确定的有限状态自动机\n\n- 对于一个input，只能有一个转换\n- NO $\\epsilon$-moves\n- 执行更快，因为每一步都没有选择\n\n#### NFA (Nondeterministic Finite Automata) 不确定的优先状态自动机\n\n- 对于一个input，可以有多个转换\n- have $\\epsilon$-moves\n- smaller\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928153706.png\" width=\"250px\"> </div>\n\n\n### 正则表达式 => NFAs\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161156.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154159.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154222.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160059.png\" width=\"500px\"> </div>\n\n一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160203.png\" width=\"500px\"> </div>\n\n### NFA to DFA\n\n- $\\epsilon -closure$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160434.png\" width=\"500px\"> </div>\n\n相应的**DFA**：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161008.png\" width=\"500px\"> </div>\n\n### Implementing Finite Automata\n\nDFA可以用一张二维的表来表示：\n\n1. 一维是states\n2. 一维是输入符号\n3. 表中是转换的下一个states\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161404.png\" width=\"250px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161500.png\" width=\"500px\"> </div>\n\n一种更加节省空间的做法：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161534.png\" width=\"500px\"> </div>\n\nNFA直接转换成table：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161835.png\" width=\"500px\"> </div>\n\n节省空间，但是这样比NFA=>DFA=>table慢","source":"_posts/cs143/cs143-1.md","raw":"---\ntitle: CS143 编译原理-1\ndate: 2020-9-28 16:41\ntags: \n- CS143\n- 词法分析\n- Lex\ncategories: \n- 编译\n- 编译原理\n---\n\n- 编译器结构\n  1. 词法分析 (Lexical Analysis)\n  2. 语法分析 (Parsing)\n  3. 语义分析 (Semantic Analysis)\n  4. 优化 (Optimization)\n  5. 代码生成 (Code Generation)\n\n早期的编译器和现在的编译器的对比：\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927155639.png\" width=\"500px\"> </div>\n\n\n现在的编译器花了更多的时间在优化上面\n\n## 词法分析\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160531.png\" width=\"500px\"> </div>\n\n\n\"Words\" => \"Tokens Class\": **Identifier**, **keywords**, '**(**', '**)**', **numbers**, ...\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160906.png\" width=\"500px\"> </div>\n\n\n词法分析器将字符子串分类成Tokens，传递给**Parser**\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927161438.png\" width=\"500px\"> </div>\n\n\n- Left-to-right scan => lookahead sometimes required 有时候需要向前几个字符参考，来确定当前的token\n\n### 正则语言 Regular Languages\n\n- Regular expressions\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164524.png\" width=\"280px\"> </div>\n\n\n\n**Epsilon**不是空集，是一个只包含空字符的集合\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164758.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927165627.png\" width=\"500px\"> </div>\n\ngrammar: 文法\n\n- Regular expressions (syntax) specify regular languages (set of strings)\n\n### 形式化语言 Formal Languages\n\n- **Def.** Let $\\sum$ be a set of characters (an alphabet). \n\n  A **language** over $\\sum$ is a set of strings of characters drawn from $\\sum$\n\n- Meaning function $L$ maps **syntax** to **semantics** $L: Exp\\rightarrow Sets\\ of\\ Strings$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927172527.png\" width=\"500px\"> </div>\n\n- Meaning is many to one\n  - Never one to many!\n\n### Lexical Specifications\n\n- $AA^*=A^+$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232010.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232447.png\" width=\"500px\"> </div>\n\n最后一个表示补集\n\n- 如何预测一个s是不是属于L(R)\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232857.png\" width=\"500px\"> </div>\n\n写出所有类型token的正则表达式\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232923.png\" width=\"500px\"> </div>\n\n\n构建R，R能匹配所有类型的token\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927234514.png\" width=\"500px\"> </div>\n\n\n检查前缀是不是属于R，如果属于R，则一定属于R中的某个token类Rj，删除匹配完成的前缀接着进行第三步\n\n**一些问题**：\n\n1. 当较短和较长的字符串都匹配时，选较长的  \"Maximal Match\"\n\n2. 当同一个字符串和多个正则表达式匹配时，根据优先级\n\n3. What if no rule matches? 添加一个错误类，优先级设置成最低\n\n### 有限自动机\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928001815.png\" width=\"450px\"> </div>\n\n\n有限自动机是一种算法的实现\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928002027.png\" width=\"450px\"> </div>\n\n- 在一个状态，读取一些输入，变成另一个状态\n- 如果读完输入，最后处于接受状态，则accept，否则就reject\n\n#### DFA (Deterministic Finite Automata) 确定的有限状态自动机\n\n- 对于一个input，只能有一个转换\n- NO $\\epsilon$-moves\n- 执行更快，因为每一步都没有选择\n\n#### NFA (Nondeterministic Finite Automata) 不确定的优先状态自动机\n\n- 对于一个input，可以有多个转换\n- have $\\epsilon$-moves\n- smaller\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928153706.png\" width=\"250px\"> </div>\n\n\n### 正则表达式 => NFAs\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161156.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154159.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154222.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160059.png\" width=\"500px\"> </div>\n\n一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160203.png\" width=\"500px\"> </div>\n\n### NFA to DFA\n\n- $\\epsilon -closure$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160434.png\" width=\"500px\"> </div>\n\n相应的**DFA**：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161008.png\" width=\"500px\"> </div>\n\n### Implementing Finite Automata\n\nDFA可以用一张二维的表来表示：\n\n1. 一维是states\n2. 一维是输入符号\n3. 表中是转换的下一个states\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161404.png\" width=\"250px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161500.png\" width=\"500px\"> </div>\n\n一种更加节省空间的做法：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161534.png\" width=\"500px\"> </div>\n\nNFA直接转换成table：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161835.png\" width=\"500px\"> </div>\n\n节省空间，但是这样比NFA=>DFA=>table慢","slug":"cs143/cs143-1","published":1,"updated":"2020-10-06T11:39:24.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtu9w000h2kwj0t2x5eub","content":"<ul>\n<li>编译器结构\n<ol>\n<li>词法分析 (Lexical Analysis)</li>\n<li>语法分析 (Parsing)</li>\n<li>语义分析 (Semantic Analysis)</li>\n<li>优化 (Optimization)</li>\n<li>代码生成 (Code Generation)</li>\n</ol>\n</li>\n</ul>\n<p>早期的编译器和现在的编译器的对比：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927155639.png\" width=\"500px\"> </div>\n<p>现在的编译器花了更多的时间在优化上面</p>\n<h2 id=\"词法分析\"><a class=\"markdownIt-Anchor\" href=\"#词法分析\"></a> 词法分析</h2>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160531.png\" width=\"500px\"> </div>\n<p>“Words” =&gt; “Tokens Class”: <strong>Identifier</strong>, <strong>keywords</strong>, ‘<strong>(</strong>’, ‘<strong>)</strong>’, <strong>numbers</strong>, …</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160906.png\" width=\"500px\"> </div>\n<p>词法分析器将字符子串分类成Tokens，传递给<strong>Parser</strong></p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927161438.png\" width=\"500px\"> </div>\n<ul>\n<li>Left-to-right scan =&gt; lookahead sometimes required 有时候需要向前几个字符参考，来确定当前的token</li>\n</ul>\n<h3 id=\"正则语言-regular-languages\"><a class=\"markdownIt-Anchor\" href=\"#正则语言-regular-languages\"></a> 正则语言 Regular Languages</h3>\n<ul>\n<li>Regular expressions</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164524.png\" width=\"280px\"> </div>\n<p><strong>Epsilon</strong>不是空集，是一个只包含空字符的集合</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164758.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927165627.png\" width=\"500px\"> </div>\n<p>grammar: 文法</p>\n<ul>\n<li>Regular expressions (syntax) specify regular languages (set of strings)</li>\n</ul>\n<h3 id=\"形式化语言-formal-languages\"><a class=\"markdownIt-Anchor\" href=\"#形式化语言-formal-languages\"></a> 形式化语言 Formal Languages</h3>\n<ul>\n<li>\n<p><strong>Def.</strong> Let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> be a set of characters (an alphabet).</p>\n<p>A <strong>language</strong> over <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> is a set of strings of characters drawn from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span></p>\n</li>\n<li>\n<p>Meaning function <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span></span></span></span> maps <strong>syntax</strong> to <strong>semantics</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo>:</mo><mi>E</mi><mi>x</mi><mi>p</mi><mo>→</mo><mi>S</mi><mi>e</mi><mi>t</mi><mi>s</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">L: Exp\\rightarrow Sets\\ of\\ Strings</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">s</span></span></span></span></p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927172527.png\" width=\"500px\"> </div>\n<ul>\n<li>Meaning is many to one\n<ul>\n<li>Never one to many!</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"lexical-specifications\"><a class=\"markdownIt-Anchor\" href=\"#lexical-specifications\"></a> Lexical Specifications</h3>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><msup><mi>A</mi><mo>∗</mo></msup><mo>=</mo><msup><mi>A</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">AA^*=A^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.688696em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232010.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232447.png\" width=\"500px\"> </div>\n<p>最后一个表示补集</p>\n<ul>\n<li>如何预测一个s是不是属于L®</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232857.png\" width=\"500px\"> </div>\n<p>写出所有类型token的正则表达式</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232923.png\" width=\"500px\"> </div>\n<p>构建R，R能匹配所有类型的token</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927234514.png\" width=\"500px\"> </div>\n<p>检查前缀是不是属于R，如果属于R，则一定属于R中的某个token类Rj，删除匹配完成的前缀接着进行第三步</p>\n<p><strong>一些问题</strong>：</p>\n<ol>\n<li>\n<p>当较短和较长的字符串都匹配时，选较长的  “Maximal Match”</p>\n</li>\n<li>\n<p>当同一个字符串和多个正则表达式匹配时，根据优先级</p>\n</li>\n<li>\n<p>What if no rule matches? 添加一个错误类，优先级设置成最低</p>\n</li>\n</ol>\n<h3 id=\"有限自动机\"><a class=\"markdownIt-Anchor\" href=\"#有限自动机\"></a> 有限自动机</h3>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928001815.png\" width=\"450px\"> </div>\n<p>有限自动机是一种算法的实现</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928002027.png\" width=\"450px\"> </div>\n<ul>\n<li>在一个状态，读取一些输入，变成另一个状态</li>\n<li>如果读完输入，最后处于接受状态，则accept，否则就reject</li>\n</ul>\n<h4 id=\"dfa-deterministic-finite-automata-确定的有限状态自动机\"><a class=\"markdownIt-Anchor\" href=\"#dfa-deterministic-finite-automata-确定的有限状态自动机\"></a> DFA (Deterministic Finite Automata) 确定的有限状态自动机</h4>\n<ul>\n<li>对于一个input，只能有一个转换</li>\n<li>NO <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ϵ</span></span></span></span>-moves</li>\n<li>执行更快，因为每一步都没有选择</li>\n</ul>\n<h4 id=\"nfa-nondeterministic-finite-automata-不确定的优先状态自动机\"><a class=\"markdownIt-Anchor\" href=\"#nfa-nondeterministic-finite-automata-不确定的优先状态自动机\"></a> NFA (Nondeterministic Finite Automata) 不确定的优先状态自动机</h4>\n<ul>\n<li>对于一个input，可以有多个转换</li>\n<li>have <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ϵ</span></span></span></span>-moves</li>\n<li>smaller</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928153706.png\" width=\"250px\"> </div>\n<h3 id=\"正则表达式-nfas\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式-nfas\"></a> 正则表达式 =&gt; NFAs</h3>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161156.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154159.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154222.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160059.png\" width=\"500px\"> </div>\n<p>一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160203.png\" width=\"500px\"> </div>\n<h3 id=\"nfa-to-dfa\"><a class=\"markdownIt-Anchor\" href=\"#nfa-to-dfa\"></a> NFA to DFA</h3>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi><mo>−</mo><mi>c</mi><mi>l</mi><mi>o</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon -closure</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">ϵ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160434.png\" width=\"500px\"> </div>\n<p>相应的<strong>DFA</strong>：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161008.png\" width=\"500px\"> </div>\n<h3 id=\"implementing-finite-automata\"><a class=\"markdownIt-Anchor\" href=\"#implementing-finite-automata\"></a> Implementing Finite Automata</h3>\n<p>DFA可以用一张二维的表来表示：</p>\n<ol>\n<li>一维是states</li>\n<li>一维是输入符号</li>\n<li>表中是转换的下一个states</li>\n</ol>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161404.png\" width=\"250px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161500.png\" width=\"500px\"> </div>\n<p>一种更加节省空间的做法：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161534.png\" width=\"500px\"> </div>\n<p>NFA直接转换成table：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161835.png\" width=\"500px\"> </div>\n<p>节省空间，但是这样比NFA=&gt;DFA=&gt;table慢</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<ul>\n<li>编译器结构\n<ol>\n<li>词法分析 (Lexical Analysis)</li>\n<li>语法分析 (Parsing)</li>\n<li>语义分析 (Semantic Analysis)</li>\n<li>优化 (Optimization)</li>\n<li>代码生成 (Code Generation)</li>\n</ol>\n</li>\n</ul>\n<p>早期的编译器和现在的编译器的对比：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927155639.png\" width=\"500px\"> </div>\n<p>现在的编译器花了更多的时间在优化上面</p>\n<h2 id=\"词法分析\"><a class=\"markdownIt-Anchor\" href=\"#词法分析\"></a> 词法分析</h2>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160531.png\" width=\"500px\"> </div>\n<p>“Words” =&gt; “Tokens Class”: <strong>Identifier</strong>, <strong>keywords</strong>, ‘<strong>(</strong>’, ‘<strong>)</strong>’, <strong>numbers</strong>, …</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160906.png\" width=\"500px\"> </div>\n<p>词法分析器将字符子串分类成Tokens，传递给<strong>Parser</strong></p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927161438.png\" width=\"500px\"> </div>\n<ul>\n<li>Left-to-right scan =&gt; lookahead sometimes required 有时候需要向前几个字符参考，来确定当前的token</li>\n</ul>\n<h3 id=\"正则语言-regular-languages\"><a class=\"markdownIt-Anchor\" href=\"#正则语言-regular-languages\"></a> 正则语言 Regular Languages</h3>\n<ul>\n<li>Regular expressions</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164524.png\" width=\"280px\"> </div>\n<p><strong>Epsilon</strong>不是空集，是一个只包含空字符的集合</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164758.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927165627.png\" width=\"500px\"> </div>\n<p>grammar: 文法</p>\n<ul>\n<li>Regular expressions (syntax) specify regular languages (set of strings)</li>\n</ul>\n<h3 id=\"形式化语言-formal-languages\"><a class=\"markdownIt-Anchor\" href=\"#形式化语言-formal-languages\"></a> 形式化语言 Formal Languages</h3>\n<ul>\n<li>\n<p><strong>Def.</strong> Let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> be a set of characters (an alphabet).</p>\n<p>A <strong>language</strong> over <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> is a set of strings of characters drawn from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span></p>\n</li>\n<li>\n<p>Meaning function <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span></span></span></span> maps <strong>syntax</strong> to <strong>semantics</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo>:</mo><mi>E</mi><mi>x</mi><mi>p</mi><mo>→</mo><mi>S</mi><mi>e</mi><mi>t</mi><mi>s</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">L: Exp\\rightarrow Sets\\ of\\ Strings</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">s</span></span></span></span></p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927172527.png\" width=\"500px\"> </div>\n<ul>\n<li>Meaning is many to one\n<ul>\n<li>Never one to many!</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"lexical-specifications\"><a class=\"markdownIt-Anchor\" href=\"#lexical-specifications\"></a> Lexical Specifications</h3>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><msup><mi>A</mi><mo>∗</mo></msup><mo>=</mo><msup><mi>A</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">AA^*=A^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.688696em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232010.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232447.png\" width=\"500px\"> </div>\n<p>最后一个表示补集</p>\n<ul>\n<li>如何预测一个s是不是属于L®</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232857.png\" width=\"500px\"> </div>\n<p>写出所有类型token的正则表达式</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232923.png\" width=\"500px\"> </div>\n<p>构建R，R能匹配所有类型的token</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927234514.png\" width=\"500px\"> </div>\n<p>检查前缀是不是属于R，如果属于R，则一定属于R中的某个token类Rj，删除匹配完成的前缀接着进行第三步</p>\n<p><strong>一些问题</strong>：</p>\n<ol>\n<li>\n<p>当较短和较长的字符串都匹配时，选较长的  “Maximal Match”</p>\n</li>\n<li>\n<p>当同一个字符串和多个正则表达式匹配时，根据优先级</p>\n</li>\n<li>\n<p>What if no rule matches? 添加一个错误类，优先级设置成最低</p>\n</li>\n</ol>\n<h3 id=\"有限自动机\"><a class=\"markdownIt-Anchor\" href=\"#有限自动机\"></a> 有限自动机</h3>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928001815.png\" width=\"450px\"> </div>\n<p>有限自动机是一种算法的实现</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928002027.png\" width=\"450px\"> </div>\n<ul>\n<li>在一个状态，读取一些输入，变成另一个状态</li>\n<li>如果读完输入，最后处于接受状态，则accept，否则就reject</li>\n</ul>\n<h4 id=\"dfa-deterministic-finite-automata-确定的有限状态自动机\"><a class=\"markdownIt-Anchor\" href=\"#dfa-deterministic-finite-automata-确定的有限状态自动机\"></a> DFA (Deterministic Finite Automata) 确定的有限状态自动机</h4>\n<ul>\n<li>对于一个input，只能有一个转换</li>\n<li>NO <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ϵ</span></span></span></span>-moves</li>\n<li>执行更快，因为每一步都没有选择</li>\n</ul>\n<h4 id=\"nfa-nondeterministic-finite-automata-不确定的优先状态自动机\"><a class=\"markdownIt-Anchor\" href=\"#nfa-nondeterministic-finite-automata-不确定的优先状态自动机\"></a> NFA (Nondeterministic Finite Automata) 不确定的优先状态自动机</h4>\n<ul>\n<li>对于一个input，可以有多个转换</li>\n<li>have <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ϵ</span></span></span></span>-moves</li>\n<li>smaller</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928153706.png\" width=\"250px\"> </div>\n<h3 id=\"正则表达式-nfas\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式-nfas\"></a> 正则表达式 =&gt; NFAs</h3>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161156.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154159.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154222.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160059.png\" width=\"500px\"> </div>\n<p>一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160203.png\" width=\"500px\"> </div>\n<h3 id=\"nfa-to-dfa\"><a class=\"markdownIt-Anchor\" href=\"#nfa-to-dfa\"></a> NFA to DFA</h3>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi><mo>−</mo><mi>c</mi><mi>l</mi><mi>o</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon -closure</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">ϵ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160434.png\" width=\"500px\"> </div>\n<p>相应的<strong>DFA</strong>：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161008.png\" width=\"500px\"> </div>\n<h3 id=\"implementing-finite-automata\"><a class=\"markdownIt-Anchor\" href=\"#implementing-finite-automata\"></a> Implementing Finite Automata</h3>\n<p>DFA可以用一张二维的表来表示：</p>\n<ol>\n<li>一维是states</li>\n<li>一维是输入符号</li>\n<li>表中是转换的下一个states</li>\n</ol>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161404.png\" width=\"250px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161500.png\" width=\"500px\"> </div>\n<p>一种更加节省空间的做法：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161534.png\" width=\"500px\"> </div>\n<p>NFA直接转换成table：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161835.png\" width=\"500px\"> </div>\n<p>节省空间，但是这样比NFA=&gt;DFA=&gt;table慢</p>\n"},{"title":"CS143 编译原理-2","date":"2020-10-03T05:02:00.000Z","_content":"\n## 语法分析1\n\n有些语法（比如**括号嵌套匹配**无法使用正则表达式来表示）\n\n**Paring**:\n\n- **Input**: sequence of tokens from lexer （token序列）\n- **Output**: parse tree of the program （语法树）\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225221.png\" width=\"500px\"> </div> \n\n### 上下文无关文法 (Context-Free Grammers CFGs)\n\n- 不是所有的strings都是合法的程序，所以需要Language来描述有效的strings，需要一个方法来区分有效和无效的strings\n\n- 编程语言通常具有递归形式，CFGs可以是递归结构的一种自然标记\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225954.png\" width=\"350px\"> </div>\n\n终结符T 非终结符N 一个产生式集合\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928235823.png\" width=\"400px\"> </div>\n\n从一个符号S开始，不断用产生式替换右边，直到右边没有非终结符为止\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000352.png\" width=\"400px\"> </div>\n\n一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000519.png\" width=\"400px\"> </div>\n\nCFG的目标：\n\n1. 输出\"yes\" or \"no\"；并且输出语法树\n2. 处理error\n3. CFG的实现（e.g., bison）\n\n### 推导\n\n- Grammar $E\\rightarrow E+E|E*E|(E)|id$\n- String $id*id+id$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929203505.png\" width=\"500px\"> </div>\n\n这个例子的是left-most derivation，在每一步替换最左的non-terminal\n\nright-most 和 left-most derivations 形成相同的parse tree\n\n**A parse tree has**:\n\n1. Terminals at the leaves\n2. Non-terminals at the interior nodes\n\n一个derivation定义了一颗parse tree\n\n### 二义性 Ambiguity\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929205102.png\" width=\"500px\"> </div>\n\n一个grammer是ambiguity的如果有超过一颗parse tree\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201001113537.png\" width=\"500px\"> </div>\n\n解决ambiguity的方法是重写grammer，改变优先级；或者可以通过定义优先级\n\n### Error Handing\n\n- Panic mode\n- Error productions\n- Automatic local or global correction\n\n### AST 抽象语法树\n\n像parse trees但是忽略了一些细节\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002144333.png\" width=\"300px\"> </div>\n\n- 从具体的语义抽象 => 更加紧凑 & 简单\n\n- 编译器中重要的数据结构\n\n### 递归下降解析 Recursive Descent Parsing\n\n(第一个parsing算法)\n\n一个top-down parsing算法\n\n- The parse tree is constructed \n  - From the top\n  - From left to right\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002152907.png\" width=\"500px\"> </div>\n\n#### 递归下降算法的一般描述\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200003.png\" width=\"400px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200134.png\" width=\"400px\"> </div>\n\n- check TOKEN和当前输入流中所指的对象是否相等\n\n- 检查和S的某一个产生式是否匹配\n\n- 检查和S的任何产生式是否匹配\n\n一个编码的例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201258.png\" width=\"400px\"> </div>\n\n(PLUS: ' + ')\n\n- save保存初始指针\n- 第一个产生式返回false则尝试第二个\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201618.png\" width=\"500px\"> </div>\n\n#### Limitations 递归下降的局限性\n\n一旦找到一个能够用在非终结符元素的产生式的话，那么就没有回滚操作\n\n- If a production for non-terminal X succeeds\n  - Cannot backtrack to try a different production for X later\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002204605.png\" width=\"800px\"> </div>\n\n- 这边所讲的递归下降并不通用，但是容易实现\n- 通过提取左因子 left factoring，可以对这个算法进行rewrite\n\n### 左递归 Left Recursion\n\n递归下降算法中的主要难点\n\n左递归的例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205539.png\" width=\"300px\"> </div>\n\n**Left Recursion 左递归**:\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205631.png\" width=\"500px\"> </div>\n\n$$S\\rightarrow Sa \\rightarrow Saa \\rightarrow Saaa \\dots$$\n\n**递归下降算法**不适用于**左递归**情形\n\n左递归语法的一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210207.png\" width=\"500px\"> </div>\n\n主要原因是$\\beta$是最后的推导产生的，却在第一个位置，这不符合从左到右解析的原则\n\n**可以使用右递归语法 right-recursion 进行重写**\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210454.png\" width=\"500px\"> </div>\n\n*Dragon Book*中有消除左递归的具体算法\n\n小结：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002211241.png\" width=\"350px\"> </div>\n\n一般编译器中都会采取手写praser的做法，如gcc\n\n### 预测解析 Predictive Parsing\n\n- 类似递归下降，但是praser能预测使用哪个产生式\n  - looking at the next few tokens\n  - 不回滚\n\n- 预测praser能接受LL(k)语法 (left-to-right, left-most derivation, look forward k tokens)\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003003010.png\" width=\"350px\"> </div>\n\n在递归下降算法中，每一步都有许多产生式选择，如果选择错了就回滚\n\n在LL(1)中，每一步都只有一种选择\n\n#### We need to left-factor the grammar 提取左公因子\n\n**目的**：消除一个非终结符的多个产生式的公共前缀\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003111250.png\" width=\"250px\"> </div>\n\n通过提取左公因式，可以将产生式的执行推迟进行，先prase公共的非终结符\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113332.png\" width=\"500px\"> </div>\n\n通过grammar生成parsing table\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113423.png\" width=\"500px\"> </div>\n\n- 方法与递归下降类似，除了\n  - 对于最左的非终结符S\n  - look at下一个token\n  - 在表中找到对应的产生式\n\n- 用一个栈来存放之前的parse tree，栈顶是当前要parse的非终结符或者终结符\n\n算法：\n\n($符号表示end of input)\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113459.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113532.png\" width=\"500px\"> </div>\n\n","source":"_posts/cs143/cs143-2.md","raw":"---\ntitle: CS143 编译原理-2\ndate: 2020-10-3 13:02\ntags: \n- CS143\n- 词法分析\n- Lex\ncategories: \n- 编译\n- 编译原理\n---\n\n## 语法分析1\n\n有些语法（比如**括号嵌套匹配**无法使用正则表达式来表示）\n\n**Paring**:\n\n- **Input**: sequence of tokens from lexer （token序列）\n- **Output**: parse tree of the program （语法树）\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225221.png\" width=\"500px\"> </div> \n\n### 上下文无关文法 (Context-Free Grammers CFGs)\n\n- 不是所有的strings都是合法的程序，所以需要Language来描述有效的strings，需要一个方法来区分有效和无效的strings\n\n- 编程语言通常具有递归形式，CFGs可以是递归结构的一种自然标记\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225954.png\" width=\"350px\"> </div>\n\n终结符T 非终结符N 一个产生式集合\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928235823.png\" width=\"400px\"> </div>\n\n从一个符号S开始，不断用产生式替换右边，直到右边没有非终结符为止\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000352.png\" width=\"400px\"> </div>\n\n一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000519.png\" width=\"400px\"> </div>\n\nCFG的目标：\n\n1. 输出\"yes\" or \"no\"；并且输出语法树\n2. 处理error\n3. CFG的实现（e.g., bison）\n\n### 推导\n\n- Grammar $E\\rightarrow E+E|E*E|(E)|id$\n- String $id*id+id$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929203505.png\" width=\"500px\"> </div>\n\n这个例子的是left-most derivation，在每一步替换最左的non-terminal\n\nright-most 和 left-most derivations 形成相同的parse tree\n\n**A parse tree has**:\n\n1. Terminals at the leaves\n2. Non-terminals at the interior nodes\n\n一个derivation定义了一颗parse tree\n\n### 二义性 Ambiguity\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929205102.png\" width=\"500px\"> </div>\n\n一个grammer是ambiguity的如果有超过一颗parse tree\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201001113537.png\" width=\"500px\"> </div>\n\n解决ambiguity的方法是重写grammer，改变优先级；或者可以通过定义优先级\n\n### Error Handing\n\n- Panic mode\n- Error productions\n- Automatic local or global correction\n\n### AST 抽象语法树\n\n像parse trees但是忽略了一些细节\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002144333.png\" width=\"300px\"> </div>\n\n- 从具体的语义抽象 => 更加紧凑 & 简单\n\n- 编译器中重要的数据结构\n\n### 递归下降解析 Recursive Descent Parsing\n\n(第一个parsing算法)\n\n一个top-down parsing算法\n\n- The parse tree is constructed \n  - From the top\n  - From left to right\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002152907.png\" width=\"500px\"> </div>\n\n#### 递归下降算法的一般描述\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200003.png\" width=\"400px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200134.png\" width=\"400px\"> </div>\n\n- check TOKEN和当前输入流中所指的对象是否相等\n\n- 检查和S的某一个产生式是否匹配\n\n- 检查和S的任何产生式是否匹配\n\n一个编码的例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201258.png\" width=\"400px\"> </div>\n\n(PLUS: ' + ')\n\n- save保存初始指针\n- 第一个产生式返回false则尝试第二个\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201618.png\" width=\"500px\"> </div>\n\n#### Limitations 递归下降的局限性\n\n一旦找到一个能够用在非终结符元素的产生式的话，那么就没有回滚操作\n\n- If a production for non-terminal X succeeds\n  - Cannot backtrack to try a different production for X later\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002204605.png\" width=\"800px\"> </div>\n\n- 这边所讲的递归下降并不通用，但是容易实现\n- 通过提取左因子 left factoring，可以对这个算法进行rewrite\n\n### 左递归 Left Recursion\n\n递归下降算法中的主要难点\n\n左递归的例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205539.png\" width=\"300px\"> </div>\n\n**Left Recursion 左递归**:\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205631.png\" width=\"500px\"> </div>\n\n$$S\\rightarrow Sa \\rightarrow Saa \\rightarrow Saaa \\dots$$\n\n**递归下降算法**不适用于**左递归**情形\n\n左递归语法的一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210207.png\" width=\"500px\"> </div>\n\n主要原因是$\\beta$是最后的推导产生的，却在第一个位置，这不符合从左到右解析的原则\n\n**可以使用右递归语法 right-recursion 进行重写**\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210454.png\" width=\"500px\"> </div>\n\n*Dragon Book*中有消除左递归的具体算法\n\n小结：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002211241.png\" width=\"350px\"> </div>\n\n一般编译器中都会采取手写praser的做法，如gcc\n\n### 预测解析 Predictive Parsing\n\n- 类似递归下降，但是praser能预测使用哪个产生式\n  - looking at the next few tokens\n  - 不回滚\n\n- 预测praser能接受LL(k)语法 (left-to-right, left-most derivation, look forward k tokens)\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003003010.png\" width=\"350px\"> </div>\n\n在递归下降算法中，每一步都有许多产生式选择，如果选择错了就回滚\n\n在LL(1)中，每一步都只有一种选择\n\n#### We need to left-factor the grammar 提取左公因子\n\n**目的**：消除一个非终结符的多个产生式的公共前缀\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003111250.png\" width=\"250px\"> </div>\n\n通过提取左公因式，可以将产生式的执行推迟进行，先prase公共的非终结符\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113332.png\" width=\"500px\"> </div>\n\n通过grammar生成parsing table\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113423.png\" width=\"500px\"> </div>\n\n- 方法与递归下降类似，除了\n  - 对于最左的非终结符S\n  - look at下一个token\n  - 在表中找到对应的产生式\n\n- 用一个栈来存放之前的parse tree，栈顶是当前要parse的非终结符或者终结符\n\n算法：\n\n($符号表示end of input)\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113459.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113532.png\" width=\"500px\"> </div>\n\n","slug":"cs143/cs143-2","published":1,"updated":"2020-10-06T11:39:24.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtu9y000j2kwj32l18stz","content":"<h2 id=\"语法分析1\"><a class=\"markdownIt-Anchor\" href=\"#语法分析1\"></a> 语法分析1</h2>\n<p>有些语法（比如<strong>括号嵌套匹配</strong>无法使用正则表达式来表示）</p>\n<p><strong>Paring</strong>:</p>\n<ul>\n<li><strong>Input</strong>: sequence of tokens from lexer （token序列）</li>\n<li><strong>Output</strong>: parse tree of the program （语法树）</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225221.png\" width=\"500px\"> </div> \n<h3 id=\"上下文无关文法-context-free-grammers-cfgs\"><a class=\"markdownIt-Anchor\" href=\"#上下文无关文法-context-free-grammers-cfgs\"></a> 上下文无关文法 (Context-Free Grammers CFGs)</h3>\n<ul>\n<li>\n<p>不是所有的strings都是合法的程序，所以需要Language来描述有效的strings，需要一个方法来区分有效和无效的strings</p>\n</li>\n<li>\n<p>编程语言通常具有递归形式，CFGs可以是递归结构的一种自然标记</p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225954.png\" width=\"350px\"> </div>\n<p>终结符T 非终结符N 一个产生式集合</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928235823.png\" width=\"400px\"> </div>\n<p>从一个符号S开始，不断用产生式替换右边，直到右边没有非终结符为止</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000352.png\" width=\"400px\"> </div>\n<p>一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000519.png\" width=\"400px\"> </div>\n<p>CFG的目标：</p>\n<ol>\n<li>输出&quot;yes&quot; or “no”；并且输出语法树</li>\n<li>处理error</li>\n<li>CFG的实现（e.g., bison）</li>\n</ol>\n<h3 id=\"推导\"><a class=\"markdownIt-Anchor\" href=\"#推导\"></a> 推导</h3>\n<ul>\n<li>Grammar <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mo>→</mo><mi>E</mi><mo>+</mo><mi>E</mi><mi mathvariant=\"normal\">∣</mi><mi>E</mi><mo>∗</mo><mi>E</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">E\\rightarrow E+E|E*E|(E)|id</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">∣</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span></span></span></span></li>\n<li>String <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>d</mi><mo>∗</mo><mi>i</mi><mi>d</mi><mo>+</mo><mi>i</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">id*id+id</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929203505.png\" width=\"500px\"> </div>\n<p>这个例子的是left-most derivation，在每一步替换最左的non-terminal</p>\n<p>right-most 和 left-most derivations 形成相同的parse tree</p>\n<p><strong>A parse tree has</strong>:</p>\n<ol>\n<li>Terminals at the leaves</li>\n<li>Non-terminals at the interior nodes</li>\n</ol>\n<p>一个derivation定义了一颗parse tree</p>\n<h3 id=\"二义性-ambiguity\"><a class=\"markdownIt-Anchor\" href=\"#二义性-ambiguity\"></a> 二义性 Ambiguity</h3>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929205102.png\" width=\"500px\"> </div>\n<p>一个grammer是ambiguity的如果有超过一颗parse tree</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201001113537.png\" width=\"500px\"> </div>\n<p>解决ambiguity的方法是重写grammer，改变优先级；或者可以通过定义优先级</p>\n<h3 id=\"error-handing\"><a class=\"markdownIt-Anchor\" href=\"#error-handing\"></a> Error Handing</h3>\n<ul>\n<li>Panic mode</li>\n<li>Error productions</li>\n<li>Automatic local or global correction</li>\n</ul>\n<h3 id=\"ast-抽象语法树\"><a class=\"markdownIt-Anchor\" href=\"#ast-抽象语法树\"></a> AST 抽象语法树</h3>\n<p>像parse trees但是忽略了一些细节</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002144333.png\" width=\"300px\"> </div>\n<ul>\n<li>\n<p>从具体的语义抽象 =&gt; 更加紧凑 &amp; 简单</p>\n</li>\n<li>\n<p>编译器中重要的数据结构</p>\n</li>\n</ul>\n<h3 id=\"递归下降解析-recursive-descent-parsing\"><a class=\"markdownIt-Anchor\" href=\"#递归下降解析-recursive-descent-parsing\"></a> 递归下降解析 Recursive Descent Parsing</h3>\n<p>(第一个parsing算法)</p>\n<p>一个top-down parsing算法</p>\n<ul>\n<li>The parse tree is constructed\n<ul>\n<li>From the top</li>\n<li>From left to right</li>\n</ul>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002152907.png\" width=\"500px\"> </div>\n<h4 id=\"递归下降算法的一般描述\"><a class=\"markdownIt-Anchor\" href=\"#递归下降算法的一般描述\"></a> 递归下降算法的一般描述</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200003.png\" width=\"400px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200134.png\" width=\"400px\"> </div>\n<ul>\n<li>\n<p>check TOKEN和当前输入流中所指的对象是否相等</p>\n</li>\n<li>\n<p>检查和S的某一个产生式是否匹配</p>\n</li>\n<li>\n<p>检查和S的任何产生式是否匹配</p>\n</li>\n</ul>\n<p>一个编码的例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201258.png\" width=\"400px\"> </div>\n<p>(PLUS: ’ + ')</p>\n<ul>\n<li>save保存初始指针</li>\n<li>第一个产生式返回false则尝试第二个</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201618.png\" width=\"500px\"> </div>\n<h4 id=\"limitations-递归下降的局限性\"><a class=\"markdownIt-Anchor\" href=\"#limitations-递归下降的局限性\"></a> Limitations 递归下降的局限性</h4>\n<p>一旦找到一个能够用在非终结符元素的产生式的话，那么就没有回滚操作</p>\n<ul>\n<li>If a production for non-terminal X succeeds\n<ul>\n<li>Cannot backtrack to try a different production for X later</li>\n</ul>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002204605.png\" width=\"800px\"> </div>\n<ul>\n<li>这边所讲的递归下降并不通用，但是容易实现</li>\n<li>通过提取左因子 left factoring，可以对这个算法进行rewrite</li>\n</ul>\n<h3 id=\"左递归-left-recursion\"><a class=\"markdownIt-Anchor\" href=\"#左递归-left-recursion\"></a> 左递归 Left Recursion</h3>\n<p>递归下降算法中的主要难点</p>\n<p>左递归的例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205539.png\" width=\"300px\"> </div>\n<p><strong>Left Recursion 左递归</strong>:</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205631.png\" width=\"500px\"> </div>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>→</mo><mi>S</mi><mi>a</mi><mo>→</mo><mi>S</mi><mi>a</mi><mi>a</mi><mo>→</mo><mi>S</mi><mi>a</mi><mi>a</mi><mi>a</mi><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">S\\rightarrow Sa \\rightarrow Saa \\rightarrow Saaa \\dots\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span></span></p>\n<p><strong>递归下降算法</strong>不适用于<strong>左递归</strong>情形</p>\n<p>左递归语法的一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210207.png\" width=\"500px\"> </div>\n<p>主要原因是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span>是最后的推导产生的，却在第一个位置，这不符合从左到右解析的原则</p>\n<p><strong>可以使用右递归语法 right-recursion 进行重写</strong></p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210454.png\" width=\"500px\"> </div>\n<p><em>Dragon Book</em>中有消除左递归的具体算法</p>\n<p>小结：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002211241.png\" width=\"350px\"> </div>\n<p>一般编译器中都会采取手写praser的做法，如gcc</p>\n<h3 id=\"预测解析-predictive-parsing\"><a class=\"markdownIt-Anchor\" href=\"#预测解析-predictive-parsing\"></a> 预测解析 Predictive Parsing</h3>\n<ul>\n<li>\n<p>类似递归下降，但是praser能预测使用哪个产生式</p>\n<ul>\n<li>looking at the next few tokens</li>\n<li>不回滚</li>\n</ul>\n</li>\n<li>\n<p>预测praser能接受LL(k)语法 (left-to-right, left-most derivation, look forward k tokens)</p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003003010.png\" width=\"350px\"> </div>\n<p>在递归下降算法中，每一步都有许多产生式选择，如果选择错了就回滚</p>\n<p>在LL(1)中，每一步都只有一种选择</p>\n<h4 id=\"we-need-to-left-factor-the-grammar-提取左公因子\"><a class=\"markdownIt-Anchor\" href=\"#we-need-to-left-factor-the-grammar-提取左公因子\"></a> We need to left-factor the grammar 提取左公因子</h4>\n<p><strong>目的</strong>：消除一个非终结符的多个产生式的公共前缀</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003111250.png\" width=\"250px\"> </div>\n<p>通过提取左公因式，可以将产生式的执行推迟进行，先prase公共的非终结符</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113332.png\" width=\"500px\"> </div>\n<p>通过grammar生成parsing table</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113423.png\" width=\"500px\"> </div>\n<ul>\n<li>\n<p>方法与递归下降类似，除了</p>\n<ul>\n<li>对于最左的非终结符S</li>\n<li>look at下一个token</li>\n<li>在表中找到对应的产生式</li>\n</ul>\n</li>\n<li>\n<p>用一个栈来存放之前的parse tree，栈顶是当前要parse的非终结符或者终结符</p>\n</li>\n</ul>\n<p>算法：</p>\n<p>($符号表示end of input)</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113459.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113532.png\" width=\"500px\"> </div>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"语法分析1\"><a class=\"markdownIt-Anchor\" href=\"#语法分析1\"></a> 语法分析1</h2>\n<p>有些语法（比如<strong>括号嵌套匹配</strong>无法使用正则表达式来表示）</p>\n<p><strong>Paring</strong>:</p>\n<ul>\n<li><strong>Input</strong>: sequence of tokens from lexer （token序列）</li>\n<li><strong>Output</strong>: parse tree of the program （语法树）</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225221.png\" width=\"500px\"> </div> \n<h3 id=\"上下文无关文法-context-free-grammers-cfgs\"><a class=\"markdownIt-Anchor\" href=\"#上下文无关文法-context-free-grammers-cfgs\"></a> 上下文无关文法 (Context-Free Grammers CFGs)</h3>\n<ul>\n<li>\n<p>不是所有的strings都是合法的程序，所以需要Language来描述有效的strings，需要一个方法来区分有效和无效的strings</p>\n</li>\n<li>\n<p>编程语言通常具有递归形式，CFGs可以是递归结构的一种自然标记</p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225954.png\" width=\"350px\"> </div>\n<p>终结符T 非终结符N 一个产生式集合</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928235823.png\" width=\"400px\"> </div>\n<p>从一个符号S开始，不断用产生式替换右边，直到右边没有非终结符为止</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000352.png\" width=\"400px\"> </div>\n<p>一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000519.png\" width=\"400px\"> </div>\n<p>CFG的目标：</p>\n<ol>\n<li>输出&quot;yes&quot; or “no”；并且输出语法树</li>\n<li>处理error</li>\n<li>CFG的实现（e.g., bison）</li>\n</ol>\n<h3 id=\"推导\"><a class=\"markdownIt-Anchor\" href=\"#推导\"></a> 推导</h3>\n<ul>\n<li>Grammar <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mo>→</mo><mi>E</mi><mo>+</mo><mi>E</mi><mi mathvariant=\"normal\">∣</mi><mi>E</mi><mo>∗</mo><mi>E</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">E\\rightarrow E+E|E*E|(E)|id</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">∣</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span></span></span></span></li>\n<li>String <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>d</mi><mo>∗</mo><mi>i</mi><mi>d</mi><mo>+</mo><mi>i</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">id*id+id</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929203505.png\" width=\"500px\"> </div>\n<p>这个例子的是left-most derivation，在每一步替换最左的non-terminal</p>\n<p>right-most 和 left-most derivations 形成相同的parse tree</p>\n<p><strong>A parse tree has</strong>:</p>\n<ol>\n<li>Terminals at the leaves</li>\n<li>Non-terminals at the interior nodes</li>\n</ol>\n<p>一个derivation定义了一颗parse tree</p>\n<h3 id=\"二义性-ambiguity\"><a class=\"markdownIt-Anchor\" href=\"#二义性-ambiguity\"></a> 二义性 Ambiguity</h3>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929205102.png\" width=\"500px\"> </div>\n<p>一个grammer是ambiguity的如果有超过一颗parse tree</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201001113537.png\" width=\"500px\"> </div>\n<p>解决ambiguity的方法是重写grammer，改变优先级；或者可以通过定义优先级</p>\n<h3 id=\"error-handing\"><a class=\"markdownIt-Anchor\" href=\"#error-handing\"></a> Error Handing</h3>\n<ul>\n<li>Panic mode</li>\n<li>Error productions</li>\n<li>Automatic local or global correction</li>\n</ul>\n<h3 id=\"ast-抽象语法树\"><a class=\"markdownIt-Anchor\" href=\"#ast-抽象语法树\"></a> AST 抽象语法树</h3>\n<p>像parse trees但是忽略了一些细节</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002144333.png\" width=\"300px\"> </div>\n<ul>\n<li>\n<p>从具体的语义抽象 =&gt; 更加紧凑 &amp; 简单</p>\n</li>\n<li>\n<p>编译器中重要的数据结构</p>\n</li>\n</ul>\n<h3 id=\"递归下降解析-recursive-descent-parsing\"><a class=\"markdownIt-Anchor\" href=\"#递归下降解析-recursive-descent-parsing\"></a> 递归下降解析 Recursive Descent Parsing</h3>\n<p>(第一个parsing算法)</p>\n<p>一个top-down parsing算法</p>\n<ul>\n<li>The parse tree is constructed\n<ul>\n<li>From the top</li>\n<li>From left to right</li>\n</ul>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002152907.png\" width=\"500px\"> </div>\n<h4 id=\"递归下降算法的一般描述\"><a class=\"markdownIt-Anchor\" href=\"#递归下降算法的一般描述\"></a> 递归下降算法的一般描述</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200003.png\" width=\"400px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200134.png\" width=\"400px\"> </div>\n<ul>\n<li>\n<p>check TOKEN和当前输入流中所指的对象是否相等</p>\n</li>\n<li>\n<p>检查和S的某一个产生式是否匹配</p>\n</li>\n<li>\n<p>检查和S的任何产生式是否匹配</p>\n</li>\n</ul>\n<p>一个编码的例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201258.png\" width=\"400px\"> </div>\n<p>(PLUS: ’ + ')</p>\n<ul>\n<li>save保存初始指针</li>\n<li>第一个产生式返回false则尝试第二个</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201618.png\" width=\"500px\"> </div>\n<h4 id=\"limitations-递归下降的局限性\"><a class=\"markdownIt-Anchor\" href=\"#limitations-递归下降的局限性\"></a> Limitations 递归下降的局限性</h4>\n<p>一旦找到一个能够用在非终结符元素的产生式的话，那么就没有回滚操作</p>\n<ul>\n<li>If a production for non-terminal X succeeds\n<ul>\n<li>Cannot backtrack to try a different production for X later</li>\n</ul>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002204605.png\" width=\"800px\"> </div>\n<ul>\n<li>这边所讲的递归下降并不通用，但是容易实现</li>\n<li>通过提取左因子 left factoring，可以对这个算法进行rewrite</li>\n</ul>\n<h3 id=\"左递归-left-recursion\"><a class=\"markdownIt-Anchor\" href=\"#左递归-left-recursion\"></a> 左递归 Left Recursion</h3>\n<p>递归下降算法中的主要难点</p>\n<p>左递归的例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205539.png\" width=\"300px\"> </div>\n<p><strong>Left Recursion 左递归</strong>:</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205631.png\" width=\"500px\"> </div>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>→</mo><mi>S</mi><mi>a</mi><mo>→</mo><mi>S</mi><mi>a</mi><mi>a</mi><mo>→</mo><mi>S</mi><mi>a</mi><mi>a</mi><mi>a</mi><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">S\\rightarrow Sa \\rightarrow Saa \\rightarrow Saaa \\dots\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span></span></p>\n<p><strong>递归下降算法</strong>不适用于<strong>左递归</strong>情形</p>\n<p>左递归语法的一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210207.png\" width=\"500px\"> </div>\n<p>主要原因是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span>是最后的推导产生的，却在第一个位置，这不符合从左到右解析的原则</p>\n<p><strong>可以使用右递归语法 right-recursion 进行重写</strong></p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210454.png\" width=\"500px\"> </div>\n<p><em>Dragon Book</em>中有消除左递归的具体算法</p>\n<p>小结：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002211241.png\" width=\"350px\"> </div>\n<p>一般编译器中都会采取手写praser的做法，如gcc</p>\n<h3 id=\"预测解析-predictive-parsing\"><a class=\"markdownIt-Anchor\" href=\"#预测解析-predictive-parsing\"></a> 预测解析 Predictive Parsing</h3>\n<ul>\n<li>\n<p>类似递归下降，但是praser能预测使用哪个产生式</p>\n<ul>\n<li>looking at the next few tokens</li>\n<li>不回滚</li>\n</ul>\n</li>\n<li>\n<p>预测praser能接受LL(k)语法 (left-to-right, left-most derivation, look forward k tokens)</p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003003010.png\" width=\"350px\"> </div>\n<p>在递归下降算法中，每一步都有许多产生式选择，如果选择错了就回滚</p>\n<p>在LL(1)中，每一步都只有一种选择</p>\n<h4 id=\"we-need-to-left-factor-the-grammar-提取左公因子\"><a class=\"markdownIt-Anchor\" href=\"#we-need-to-left-factor-the-grammar-提取左公因子\"></a> We need to left-factor the grammar 提取左公因子</h4>\n<p><strong>目的</strong>：消除一个非终结符的多个产生式的公共前缀</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003111250.png\" width=\"250px\"> </div>\n<p>通过提取左公因式，可以将产生式的执行推迟进行，先prase公共的非终结符</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113332.png\" width=\"500px\"> </div>\n<p>通过grammar生成parsing table</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113423.png\" width=\"500px\"> </div>\n<ul>\n<li>\n<p>方法与递归下降类似，除了</p>\n<ul>\n<li>对于最左的非终结符S</li>\n<li>look at下一个token</li>\n<li>在表中找到对应的产生式</li>\n</ul>\n</li>\n<li>\n<p>用一个栈来存放之前的parse tree，栈顶是当前要parse的非终结符或者终结符</p>\n</li>\n</ul>\n<p>算法：</p>\n<p>($符号表示end of input)</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113459.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113532.png\" width=\"500px\"> </div>\n"},{"title":"[CSAPP] Data Lab","date":"2020-10-05T08:52:00.000Z","_content":"\n## Data Lab\n\n【踩的坑】在centos7下进行的实验，缺32位glibc, gcc库\n\n```bash\n[wangfangcao@wfcserver datalab-handout]$ make\ngcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c\nIn file included from /usr/include/features.h:399:0,\n                 from /usr/include/stdio.h:27,\n                 from btest.c:16:\n/usr/include/gnu/stubs.h:7:27: fatal error: gnu/stubs-32.h: No such file or directory\n # include <gnu/stubs-32.h>\n                           ^\ncompilation terminated.\n```\n\n解决办法\n\n```bash\nyum -y install glibc-devel.i686\n```\n\n```bash\n[wangfangcao@wfcserver datalab-handout]$ make\ngcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c\n/usr/bin/ld: skipping incompatible /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc_s.so when searching for -lgcc_s\n/usr/bin/ld: cannot find -lgcc_s\ncollect2: error: ld returned 1 exit status\nmake: *** [btest] Error 1\n```\n\n解决办法\n\n```bash\nyum install -y libgcc.i686\n```\n\n","source":"_posts/csapp-labs/csapp-datalab.md","raw":"---\ntitle: '[CSAPP] Data Lab'\ndate: 2020-10-5 16:52\ntags: \n- CSAPP\n- Labs\ncategories: \n- 编译\n---\n\n## Data Lab\n\n【踩的坑】在centos7下进行的实验，缺32位glibc, gcc库\n\n```bash\n[wangfangcao@wfcserver datalab-handout]$ make\ngcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c\nIn file included from /usr/include/features.h:399:0,\n                 from /usr/include/stdio.h:27,\n                 from btest.c:16:\n/usr/include/gnu/stubs.h:7:27: fatal error: gnu/stubs-32.h: No such file or directory\n # include <gnu/stubs-32.h>\n                           ^\ncompilation terminated.\n```\n\n解决办法\n\n```bash\nyum -y install glibc-devel.i686\n```\n\n```bash\n[wangfangcao@wfcserver datalab-handout]$ make\ngcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c\n/usr/bin/ld: skipping incompatible /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc_s.so when searching for -lgcc_s\n/usr/bin/ld: cannot find -lgcc_s\ncollect2: error: ld returned 1 exit status\nmake: *** [btest] Error 1\n```\n\n解决办法\n\n```bash\nyum install -y libgcc.i686\n```\n\n","slug":"csapp-labs/csapp-datalab","published":1,"updated":"2020-10-06T11:39:24.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtua0000m2kwjaqvcgcti","content":"<h2 id=\"data-lab\"><a class=\"markdownIt-Anchor\" href=\"#data-lab\"></a> Data Lab</h2>\n<p>【踩的坑】在centos7下进行的实验，缺32位glibc, gcc库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[wangfangcao@wfcserver datalab-handout]$ make</span><br><span class=\"line\">gcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c</span><br><span class=\"line\">In file included from /usr/include/features.h:399:0,</span><br><span class=\"line\">                 from /usr/include/stdio.h:27,</span><br><span class=\"line\">                 from btest.c:16:</span><br><span class=\"line\">/usr/include/gnu/stubs.h:7:27: fatal error: gnu/stubs-32.h: No such file or directory</span><br><span class=\"line\"> <span class=\"comment\"># include &lt;gnu/stubs-32.h&gt;</span></span><br><span class=\"line\">                           ^</span><br><span class=\"line\">compilation terminated.</span><br></pre></td></tr></table></figure>\n<p>解决办法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install glibc-devel.i686</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[wangfangcao@wfcserver datalab-handout]$ make</span><br><span class=\"line\">gcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c</span><br><span class=\"line\">/usr/bin/ld: skipping incompatible /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc_s.so when searching <span class=\"keyword\">for</span> -lgcc_s</span><br><span class=\"line\">/usr/bin/ld: cannot find -lgcc_s</span><br><span class=\"line\">collect2: error: ld returned 1 <span class=\"built_in\">exit</span> status</span><br><span class=\"line\">make: *** [btest] Error 1</span><br></pre></td></tr></table></figure>\n<p>解决办法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y libgcc.i686</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"data-lab\"><a class=\"markdownIt-Anchor\" href=\"#data-lab\"></a> Data Lab</h2>\n<p>【踩的坑】在centos7下进行的实验，缺32位glibc, gcc库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[wangfangcao@wfcserver datalab-handout]$ make</span><br><span class=\"line\">gcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c</span><br><span class=\"line\">In file included from /usr/include/features.h:399:0,</span><br><span class=\"line\">                 from /usr/include/stdio.h:27,</span><br><span class=\"line\">                 from btest.c:16:</span><br><span class=\"line\">/usr/include/gnu/stubs.h:7:27: fatal error: gnu/stubs-32.h: No such file or directory</span><br><span class=\"line\"> <span class=\"comment\"># include &lt;gnu/stubs-32.h&gt;</span></span><br><span class=\"line\">                           ^</span><br><span class=\"line\">compilation terminated.</span><br></pre></td></tr></table></figure>\n<p>解决办法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install glibc-devel.i686</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[wangfangcao@wfcserver datalab-handout]$ make</span><br><span class=\"line\">gcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c</span><br><span class=\"line\">/usr/bin/ld: skipping incompatible /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc_s.so when searching <span class=\"keyword\">for</span> -lgcc_s</span><br><span class=\"line\">/usr/bin/ld: cannot find -lgcc_s</span><br><span class=\"line\">collect2: error: ld returned 1 <span class=\"built_in\">exit</span> status</span><br><span class=\"line\">make: *** [btest] Error 1</span><br></pre></td></tr></table></figure>\n<p>解决办法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y libgcc.i686</span><br></pre></td></tr></table></figure>\n"},{"title":"[LeetCode] 回溯","date":"2020-12-06T09:05:00.000Z","_content":"\n## 回溯\n\n#### Leetcode 46 [全排列](https://leetcode-cn.com/problems/permutations/)\n\n> 给定一个 **没有重复** 数字的序列，返回其所有可能的全排列。\n\n```c++\nclass Solution {\npublic:\n    void backtrace(vector<vector<int>> &res,vector<int> &output,int first,int len){\n        if(first==len)\n        {\n            res.push_back(output);\n            return;\n        }\n        for(int i=first;i<len;i++){\n            swap(output[i],output[first]);\n            backtrace(res,output,first+1,len);\n            swap(output[i],output[first]);\n        }\n    }\n    vector<vector<int>> permute(vector<int>& nums) {\n        vector<vector<int>> res;\n        backtrace(res,nums,0,(int)nums.size());\n        return res;\n    }\n};\n```\n\n","source":"_posts/leetcode/lc-backtracking.md","raw":"---\ntitle: '[LeetCode] 回溯'\ndate: 2020-12-6 17:05\ntags:\n- 回溯\n- LeetCode\ncategories:\n- 算法\n---\n\n## 回溯\n\n#### Leetcode 46 [全排列](https://leetcode-cn.com/problems/permutations/)\n\n> 给定一个 **没有重复** 数字的序列，返回其所有可能的全排列。\n\n```c++\nclass Solution {\npublic:\n    void backtrace(vector<vector<int>> &res,vector<int> &output,int first,int len){\n        if(first==len)\n        {\n            res.push_back(output);\n            return;\n        }\n        for(int i=first;i<len;i++){\n            swap(output[i],output[first]);\n            backtrace(res,output,first+1,len);\n            swap(output[i],output[first]);\n        }\n    }\n    vector<vector<int>> permute(vector<int>& nums) {\n        vector<vector<int>> res;\n        backtrace(res,nums,0,(int)nums.size());\n        return res;\n    }\n};\n```\n\n","slug":"leetcode/lc-backtracking","published":1,"updated":"2020-12-06T09:11:02.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtua2000q2kwje9tehhby","content":"<h2 id=\"回溯\"><a class=\"markdownIt-Anchor\" href=\"#回溯\"></a> 回溯</h2>\n<h4 id=\"leetcode-46-全排列\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-46-全排列\"></a> Leetcode 46 <a href=\"https://leetcode-cn.com/problems/permutations/\" target=\"_blank\" rel=\"noopener\">全排列</a></h4>\n<blockquote>\n<p>给定一个 <strong>没有重复</strong> 数字的序列，返回其所有可能的全排列。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">backtrace</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;res,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;output,<span class=\"keyword\">int</span> first,<span class=\"keyword\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(first==len)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res.push_back(output);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=first;i&lt;len;i++)&#123;</span><br><span class=\"line\">            swap(output[i],output[first]);</span><br><span class=\"line\">            backtrace(res,output,first+<span class=\"number\">1</span>,len);</span><br><span class=\"line\">            swap(output[i],output[first]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">permute</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; res;</span><br><span class=\"line\">        backtrace(res,nums,<span class=\"number\">0</span>,(<span class=\"keyword\">int</span>)nums.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"回溯\"><a class=\"markdownIt-Anchor\" href=\"#回溯\"></a> 回溯</h2>\n<h4 id=\"leetcode-46-全排列\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-46-全排列\"></a> Leetcode 46 <a href=\"https://leetcode-cn.com/problems/permutations/\" target=\"_blank\" rel=\"noopener\">全排列</a></h4>\n<blockquote>\n<p>给定一个 <strong>没有重复</strong> 数字的序列，返回其所有可能的全排列。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">backtrace</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;res,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;output,<span class=\"keyword\">int</span> first,<span class=\"keyword\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(first==len)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res.push_back(output);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=first;i&lt;len;i++)&#123;</span><br><span class=\"line\">            swap(output[i],output[first]);</span><br><span class=\"line\">            backtrace(res,output,first+<span class=\"number\">1</span>,len);</span><br><span class=\"line\">            swap(output[i],output[first]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; <span class=\"title\">permute</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; res;</span><br><span class=\"line\">        backtrace(res,nums,<span class=\"number\">0</span>,(<span class=\"keyword\">int</span>)nums.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"[LeetCode] DFS","date":"2020-12-06T09:05:00.000Z","_content":"\n## 深度优先遍历\n\n#### Leetcode 22 [括号生成](https://leetcode-cn.com/problems/generate-parentheses/)\n\n> 数字 *n* 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 **有效的** 括号组合。\n>\n> ```bash\n> 输入：n = 3\n> 输出：[\n>        \"((()))\",\n>        \"(()())\",\n>        \"(())()\",\n>        \"()(())\",\n>        \"()()()\"\n>      ]\n> ```\n\n```c++\nclass Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n        dfs(\"\",n,0);\n        return result;\n    }\nprivate:\n    vector<string> result;\n    void dfs(string cur,int left,int right){\n        if(left==0&&right==0){\n            result.push_back(cur);\n            return;\n        }\n        if(left>0)dfs(cur+\"(\",left-1,right+1);\n        if(right>0)dfs(cur+\")\",left,right-1);\n    }\n};\n```\n\n","source":"_posts/leetcode/lc-dfs.md","raw":"---\ntitle: '[LeetCode] DFS'\ndate: 2020-12-6 17:05\ntags:\n- DFS\n- LeetCode\ncategories:\n- 算法\n---\n\n## 深度优先遍历\n\n#### Leetcode 22 [括号生成](https://leetcode-cn.com/problems/generate-parentheses/)\n\n> 数字 *n* 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 **有效的** 括号组合。\n>\n> ```bash\n> 输入：n = 3\n> 输出：[\n>        \"((()))\",\n>        \"(()())\",\n>        \"(())()\",\n>        \"()(())\",\n>        \"()()()\"\n>      ]\n> ```\n\n```c++\nclass Solution {\npublic:\n    vector<string> generateParenthesis(int n) {\n        dfs(\"\",n,0);\n        return result;\n    }\nprivate:\n    vector<string> result;\n    void dfs(string cur,int left,int right){\n        if(left==0&&right==0){\n            result.push_back(cur);\n            return;\n        }\n        if(left>0)dfs(cur+\"(\",left-1,right+1);\n        if(right>0)dfs(cur+\")\",left,right-1);\n    }\n};\n```\n\n","slug":"leetcode/lc-dfs","published":1,"updated":"2020-12-06T09:10:49.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtua4000t2kwj7hef2la8","content":"<h2 id=\"深度优先遍历\"><a class=\"markdownIt-Anchor\" href=\"#深度优先遍历\"></a> 深度优先遍历</h2>\n<h4 id=\"leetcode-22-括号生成\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-22-括号生成\"></a> Leetcode 22 <a href=\"https://leetcode-cn.com/problems/generate-parentheses/\" target=\"_blank\" rel=\"noopener\">括号生成</a></h4>\n<blockquote>\n<p>数字 <em>n</em> 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：n = 3</span><br><span class=\"line\">输出：[</span><br><span class=\"line\">       <span class=\"string\">\"((()))\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"(()())\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"(())()\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"()(())\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"()()()\"</span></span><br><span class=\"line\">     ]</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">generateParenthesis</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        dfs(<span class=\"string\">\"\"</span>,n,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; result;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"built_in\">string</span> cur,<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left==<span class=\"number\">0</span>&amp;&amp;right==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            result.push_back(cur);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left&gt;<span class=\"number\">0</span>)dfs(cur+<span class=\"string\">\"(\"</span>,left<span class=\"number\">-1</span>,right+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(right&gt;<span class=\"number\">0</span>)dfs(cur+<span class=\"string\">\")\"</span>,left,right<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"深度优先遍历\"><a class=\"markdownIt-Anchor\" href=\"#深度优先遍历\"></a> 深度优先遍历</h2>\n<h4 id=\"leetcode-22-括号生成\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-22-括号生成\"></a> Leetcode 22 <a href=\"https://leetcode-cn.com/problems/generate-parentheses/\" target=\"_blank\" rel=\"noopener\">括号生成</a></h4>\n<blockquote>\n<p>数字 <em>n</em> 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入：n = 3</span><br><span class=\"line\">输出：[</span><br><span class=\"line\">       <span class=\"string\">\"((()))\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"(()())\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"(())()\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"()(())\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"()()()\"</span></span><br><span class=\"line\">     ]</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">generateParenthesis</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        dfs(<span class=\"string\">\"\"</span>,n,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; result;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"built_in\">string</span> cur,<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left==<span class=\"number\">0</span>&amp;&amp;right==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            result.push_back(cur);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left&gt;<span class=\"number\">0</span>)dfs(cur+<span class=\"string\">\"(\"</span>,left<span class=\"number\">-1</span>,right+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(right&gt;<span class=\"number\">0</span>)dfs(cur+<span class=\"string\">\")\"</span>,left,right<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"[CSAPP] Bomb Lab","date":"2020-10-05T16:41:00.000Z","_content":"\n## Bomb Lab\n\n传说中的bomb lab，我开始以为这名字意思是更改了程序汇编代码，让你修复...直到看了writeup...\n\n一些预备知识，主要为[CSAPP第三章](https://wfc.ink/2020/10/06/csapp-pre-bomblab/)\n\n> 题目大致意思就是不给源码（但给了源码框架），然你通过各种工具（gdb，objdump）调试，获取6次正确的输入。输入错误字符串会BOOMMMM !\n\n部分源码：\n\n```c\n/* Do all sorts of secret stuff that makes the bomb harder to defuse. */\ninitialize_bomb();\n\nprintf(\"Welcome to my fiendish little bomb. You have 6 phases with\\n\");\nprintf(\"which to blow yourself up. Have a nice day!\\n\");\n\n/* Hmm...  Six phases must be more secure than one phase! */\ninput = read_line();             /* Get input                   */\nphase_1(input);                  /* Run the phase               */\nphase_defused();                 /* Drat!  They figured it out!\n                                  * Let me know how they did it. */\nprintf(\"Phase 1 defused. How about the next one?\\n\");\n```\n\n### phase_1\n\n```bash\n$objdump -d bomb > log.txt\n```\n\nmain函数中调用phase_1的汇编代码：\n```assembly\n400e32:       e8 67 06 00 00          callq  40149e <read_line>;读入一串字符，地址存在%rax\n400e37:       48 89 c7                mov    %rax,%rdi;%mov到%rdi\n400e3a:       e8 a1 00 00 00          callq  400ee0 <phase_1>\n400e3f:       e8 80 07 00 00          callq  4015c4 <phase_defused>\n```\n\nphase_1的汇编代码：\n\n```assembly\n0000000000400ee0 <phase_1>:\n  400ee0:       48 83 ec 08             sub    $0x8,%rsp\n  400ee4:       be 00 24 40 00          mov    $0x402400,%esi;字符常量地址存入%esi\n  400ee9:       e8 4a 04 00 00          callq  401338 <strings_not_equal>\n  400eee:       85 c0                   test   %eax,%eax;判断返回值是否为0\n  400ef0:       74 05                   je     400ef7 <phase_1+0x17>\n  400ef2:       e8 43 05 00 00          callq  40143a <explode_bomb>\n  400ef7:       48 83 c4 08             add    $0x8,%rsp\n  400efb:       c3                      retq\n```\n\nstrings_not_equal的汇编代码：\n\n```assembly\n0000000000401338 <strings_not_equal>:\n  401338:       41 54                   push   %r12\n  40133a:       55                      push   %rbp\n  40133b:       53                      push   %rbx\n  40133c:       48 89 fb                mov    %rdi,%rbx;读入字符串地址\n  40133f:       48 89 f5                mov    %rsi,%rbp;字符常量地址\n  401342:       e8 d4 ff ff ff          callq  40131b <string_length>\n  401347:       41 89 c4                mov    %eax,%r12d;求长度结果\n  40134a:       48 89 ef                mov    %rbp,%rdi\n  40134d:       e8 c9 ff ff ff          callq  40131b <string_length>\n  401352:       ba 01 00 00 00          mov    $0x1,%edx;求长度结果\n  401357:       41 39 c4                cmp    %eax,%r12d;比较长度，如不等长直接返回\n  40135a:       75 3f                   jne    40139b <strings_not_equal+0x63>\n  40135c:       0f b6 03                movzbl (%rbx),%eax\n  40135f:       84 c0                   test   %al,%al\n  401361:       74 25                   je     401388 <strings_not_equal+0x50>\n  401363:       3a 45 00                cmp    0x0(%rbp),%al\n  401366:       74 0a                   je     401372 <strings_not_equal+0x3a>\n  401368:       eb 25                   jmp    40138f <strings_not_equal+0x57>\n  40136a:       3a 45 00                cmp    0x0(%rbp),%al\n  40136d:       0f 1f 00                nopl   (%rax)\n  401370:       75 24                   jne    401396 <strings_not_equal+0x5e>\n  401372:       48 83 c3 01             add    $0x1,%rbx;双字符串指针都+1判断是否相等\n  401376:       48 83 c5 01             add    $0x1,%rbp\n  40137a:       0f b6 03                movzbl (%rbx),%eax\n  40137d:       84 c0                   test   %al,%al\n  40137f:       75 e9                   jne    40136a <strings_not_equal+0x32>\n  401381:       ba 00 00 00 00          mov    $0x0,%edx\n  401386:       eb 13                   jmp    40139b <strings_not_equal+0x63>\n  401388:       ba 00 00 00 00          mov    $0x0,%edx\n  40138d:       eb 0c                   jmp    40139b <strings_not_equal+0x63>\n  40138f:       ba 01 00 00 00          mov    $0x1,%edx\n  401394:       eb 05                   jmp    40139b <strings_not_equal+0x63>\n  401396:       ba 01 00 00 00          mov    $0x1,%edx\n  40139b:       89 d0                   mov    %edx,%eax\n  40139d:       5b                      pop    %rbx\n  40139e:       5d                      pop    %rbp\n  40139f:       41 5c                   pop    %r12\n  4013a1:       c3                      retq\n```\n\nstring_length的汇编代码：\n\n```assembly\n000000000040131b <string_length>:\n  40131b:       80 3f 00                cmpb   $0x0,(%rdi);指针判空，空指针直接返回0\n  40131e:       74 12                   je     401332 <string_length+0x17>\n  401320:       48 89 fa                mov    %rdi,%rdx\n  401323:       48 83 c2 01             add    $0x1,%rdx;每次地址+1，循环检测'\\0'\n  401327:       89 d0                   mov    %edx,%eax\n  401329:       29 f8                   sub    %edi,%eax;返回的长度\n  40132b:       80 3a 00                cmpb   $0x0,(%rdx)\n  40132e:       75 f3                   jne    401323 <string_length+0x8>\n  401330:       f3 c3                   repz retq\n  401332:       b8 00 00 00 00          mov    $0x0,%eax\n  401337:       c3                      retq\n```\n\nphase_1挺简单，就判断输入的字符串和给定的字符串常量是否相等，不相同则boom。输入的字符串起始地址为%rdi，给定的字符串起始地址为%esi，调用strings_not_equal判断是否相同。strings_not_equal首先调用string_length求字符串长度，不相同则直接返回，string_length就使用每次指针+1，检测所指内存区域是否为'\\0'的方式求长度。如长度相等则再依次对比每个字符，不相等则直接返回。\n\n所以，需要输入的字符串就是给定的字符串常量，位于内存0x402400，使用gdb打印出内存信息\n\n```bash\n$ gdb ./bomb\n(gdb) b phase_1\nBreakpoint 1 at 0x400ee0\n(gdb) r\n[随意的错误输入]\nBreakpoint 1, 0x0000000000400ee0 in phase_1 ()\n(gdb) print (char*) 0x402400\n$1 = 0x402400 \"Border relations with Canada have never been better.\"\n```\n\n**答案**是 Border relations with Canada have never been better.\n\n### phase_2\n\nphase_2的汇编代码：\n\n```assembly\n0000000000400efc <phase_2>:\n  400efc:       55                      push   %rbp\n  400efd:       53                      push   %rbx\n  400efe:       48 83 ec 28             sub    $0x28,%rsp\n  400f02:       48 89 e6                mov    %rsp,%rsi\n  400f05:       e8 52 05 00 00          callq  40145c <read_six_numbers>\n  400f0a:       83 3c 24 01             cmpl   $0x1,(%rsp);和1比较\n  400f0e:       74 20                   je     400f30 <phase_2+0x34>\n  400f10:       e8 25 05 00 00          callq  40143a <explode_bomb>\n  400f15:       eb 19                   jmp    400f30 <phase_2+0x34>\n  400f17:       8b 43 fc                mov    -0x4(%rbx),%eax;前一个单元的值\n  400f1a:       01 c0                   add    %eax,%eax;前一个单元的值*2\n  400f1c:       39 03                   cmp    %eax,(%rbx);前一个单元的值*2和当前单元比较\n  400f1e:       74 05                   je     400f25 <phase_2+0x29>\n  400f20:       e8 15 05 00 00          callq  40143a <explode_bomb>\n  400f25:       48 83 c3 04             add    $0x4,%rbx\n  400f29:       48 39 eb                cmp    %rbp,%rbx\n  400f2c:       75 e9                   jne    400f17 <phase_2+0x1b>\n  400f2e:       eb 0c                   jmp    400f3c <phase_2+0x40>\n  400f30:       48 8d 5c 24 04          lea    0x4(%rsp),%rbx;将%rsp所指单元的上一个单元地址传%rbx\n  400f35:       48 8d 6c 24 18          lea    0x18(%rsp),%rbp;将%rsp+24所指单元的地址传%rbx，作为循环结束条件\n  400f3a:       eb db                   jmp    400f17 <phase_2+0x1b>\n  400f3c:       48 83 c4 28             add    $0x28,%rsp\n  400f40:       5b                      pop    %rbx\n  400f41:       5d                      pop    %rbp\n  400f42:       c3                      retq\n```\n\nread_six_numbers的汇编代码：\n\n```assembly\n000000000040145c <read_six_numbers>:\n  40145c:       48 83 ec 18             sub    $0x18,%rsp\n  401460:       48 89 f2                mov    %rsi,%rdx;存的就是phase_2栈帧底部的地址\n  401463:       48 8d 4e 04             lea    0x4(%rsi),%rcx;传地址参数到寄存器\n  401467:       48 8d 46 14             lea    0x14(%rsi),%rax\n  40146b:       48 89 44 24 08          mov    %rax,0x8(%rsp)\n  401470:       48 8d 46 10             lea    0x10(%rsi),%rax\n  401474:       48 89 04 24             mov    %rax,(%rsp)\n  401478:       4c 8d 4e 0c             lea    0xc(%rsi),%r9\n  40147c:       4c 8d 46 08             lea    0x8(%rsi),%r8\n  401480:       be c3 25 40 00          mov    $0x4025c3,%esi\n  401485:       b8 00 00 00 00          mov    $0x0,%eax\n  40148a:       e8 61 f7 ff ff          callq  400bf0 <__isoc99_sscanf@plt>\n  40148f:       83 f8 05                cmp    $0x5,%eax;返回值：读取到的数量\n  401492:       7f 05                   jg     401499 <read_six_numbers+0x3d>\n  401494:       e8 a1 ff ff ff          callq  40143a <explode_bomb>\n  401499:       48 83 c4 18             add    $0x18,%rsp\n  40149d:       c3                      retq\n```\n\nphase_2主要是个循环，read_six_number将phase_2栈帧地址较低处6个int型内存单元的地址传给__isoc99_sscanf@plt，sscanff读取6个数到phase_2栈帧底部的6个单元，并返回读取到的int数量，存到%eax，如果数量小于6，则boom。\n\n在phase_2的汇编代码中，首先将phase_2栈帧的最低地址单元与常数1相比，如果不等则boom，如果相等，则进行循环：用%rbx记录当前所指单元，将前一个单元的值的两倍和当前单元比较（第一个单元值为1），不相等则boom。当%rbx和%rbp相等时，循环结束。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201007112329.png\" width=\"250px\"> </div>\n\n**答案**是 1 2 4 8 16 32\n\n### phase_3\n\nphase_3的汇编代码：\n\n```assembly\n0000000000400f43 <phase_3>:\n  400f43:       48 83 ec 18             sub    $0x18,%rsp\n  400f47:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx\n  400f4c:       48 8d 54 24 08          lea    0x8(%rsp),%rdx\n  400f51:       be cf 25 40 00          mov    $0x4025cf,%esi;\"%d %d\"\n  400f56:       b8 00 00 00 00          mov    $0x0,%eax\n  400f5b:       e8 90 fc ff ff          callq  400bf0 <__isoc99_sscanf@plt>\n  400f60:       83 f8 01                cmp    $0x1,%eax\n  400f63:       7f 05                   jg     400f6a <phase_3+0x27>\n  400f65:       e8 d0 04 00 00          callq  40143a <explode_bomb>\n  400f6a:       83 7c 24 08 07          cmpl   $0x7,0x8(%rsp)\n  400f6f:       77 3c                   ja     400fad <phase_3+0x6a>\n  400f71:       8b 44 24 08             mov    0x8(%rsp),%eax\n  400f75:       ff 24 c5 70 24 40 00    jmpq   *0x402470(,%rax,8);跳转表\n  400f7c:       b8 cf 00 00 00          mov    $0xcf,%eax\n  400f81:       eb 3b                   jmp    400fbe <phase_3+0x7b>\n  400f83:       b8 c3 02 00 00          mov    $0x2c3,%eax\n  400f88:       eb 34                   jmp    400fbe <phase_3+0x7b>\n  400f8a:       b8 00 01 00 00          mov    $0x100,%eax\n  400f8f:       eb 2d                   jmp    400fbe <phase_3+0x7b>\n  400f91:       b8 85 01 00 00          mov    $0x185,%eax\n  400f96:       eb 26                   jmp    400fbe <phase_3+0x7b>\n  400f98:       b8 ce 00 00 00          mov    $0xce,%eax\n  400f9d:       eb 1f                   jmp    400fbe <phase_3+0x7b>\n  400f9f:       b8 aa 02 00 00          mov    $0x2aa,%eax\n  400fa4:       eb 18                   jmp    400fbe <phase_3+0x7b>\n  400fa6:       b8 47 01 00 00          mov    $0x147,%eax\n  400fab:       eb 11                   jmp    400fbe <phase_3+0x7b>\n  400fad:       e8 88 04 00 00          callq  40143a <explode_bomb>\n  400fb2:       b8 00 00 00 00          mov    $0x0,%eax\n  400fb7:       eb 05                   jmp    400fbe <phase_3+0x7b>\n  400fb9:       b8 37 01 00 00          mov    $0x137,%eax\n  400fbe:       3b 44 24 0c             cmp    0xc(%rsp),%eax\n  400fc2:       74 05                   je     400fc9 <phase_3+0x86>\n  400fc4:       e8 71 04 00 00          callq  40143a <explode_bomb>\n  400fc9:       48 83 c4 18             add    $0x18,%rsp\n  400fcd:       c3                      retq\n```\n\n```assembly\n(gdb) print (char*) 0x4025cf\n$2 = 0x4025cf \"%d %d\"\n```\n\nphase_3主要内容为switch和跳转表，sscanf读取至少两个数，否则就boom。第一个参数在%rsp+8处，第二个参数在%rsp+12处。第一个参数不能大于7，否则就boom\n\n0x402470处是跳转表的首地址，可以用gdb打印出跳转表：\n\n```assembly\n(gdb) print /x *0x402470 @16\n$1 = {0x400f7c, 0x0, 0x400fb9, 0x0, 0x400f83, 0x0, 0x400f8a, 0x0, 0x400f91, 0x0,\n  0x400f98, 0x0, 0x400f9f, 0x0, 0x400fa6, 0x0}\n```\n\n可以看出来，%rsp+8中不同的值，也就是%rax中不同的值对应着跳转表中不同的跳转地址，尝试使%rax等于1，则跳转到0x400fb9处指令，则第二个参数%rsp+12需要等于0x137才能使下一条cmp指令相等。\n\n其中一个**答案**为1 311\n\n### phase_4\n\nphase_4的汇编代码：\n\n```assembly\n000000000040100c <phase_4>:\n  40100c:       48 83 ec 18             sub    $0x18,%rsp\n  401010:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx\n  401015:       48 8d 54 24 08          lea    0x8(%rsp),%rdx\n  40101a:       be cf 25 40 00          mov    $0x4025cf,%esi\n  40101f:       b8 00 00 00 00          mov    $0x0,%eax\n  401024:       e8 c7 fb ff ff          callq  400bf0 <__isoc99_sscanf@plt>\n  401029:       83 f8 02                cmp    $0x2,%eax\n  40102c:       75 07                   jne    401035 <phase_4+0x29>\n  40102e:       83 7c 24 08 0e          cmpl   $0xe,0x8(%rsp)\n  401033:       76 05                   jbe    40103a <phase_4+0x2e>\n  401035:       e8 00 04 00 00          callq  40143a <explode_bomb>\n  40103a:       ba 0e 00 00 00          mov    $0xe,%edx\n  40103f:       be 00 00 00 00          mov    $0x0,%esi\n  401044:       8b 7c 24 08             mov    0x8(%rsp),%edi\n  401048:       e8 81 ff ff ff          callq  400fce <func4>\n  40104d:       85 c0                   test   %eax,%eax\n  40104f:       75 07                   jne    401058 <phase_4+0x4c>\n  401051:       83 7c 24 0c 00          cmpl   $0x0,0xc(%rsp)\n  401056:       74 05                   je     40105d <phase_4+0x51>\n  401058:       e8 dd 03 00 00          callq  40143a <explode_bomb>\n  40105d:       48 83 c4 18             add    $0x18,%rsp\n  401061:       c3                      retq\n```\n\nfunc4的汇编代码：\n\n```assembly\n0000000000400fce <func4>:\n  400fce:       48 83 ec 08             sub    $0x8,%rsp\n  400fd2:       89 d0                   mov    %edx,%eax\n  400fd4:       29 f0                   sub    %esi,%eax\n  400fd6:       89 c1                   mov    %eax,%ecx\n  400fd8:       c1 e9 1f                shr    $0x1f,%ecx\n  400fdb:       01 c8                   add    %ecx,%eax\n  400fdd:       d1 f8                   sar    %eax\n  400fdf:       8d 0c 30                lea    (%rax,%rsi,1),%ecx\n  400fe2:       39 f9                   cmp    %edi,%ecx\n  400fe4:       7e 0c                   jle    400ff2 <func4+0x24>\n  400fe6:       8d 51 ff                lea    -0x1(%rcx),%edx\n  i00fe9:       e8 e0 ff ff ff          callq  400fce <func4>\n  400fee:       01 c0                   add    %eax,%eax\n  400ff0:       eb 15                   jmp    401007 <func4+0x39>\n  400ff2:       b8 00 00 00 00          mov    $0x0,%eax\n  400ff7:       39 f9                   cmp    %edi,%ecx\n  400ff9:       7d 0c                   jge    401007 <func4+0x39>\n  400ffb:       8d 71 01                lea    0x1(%rcx),%esi\n  400ffe:       e8 cb ff ff ff          callq  400fce <func4>\n  401003:       8d 44 00 01             lea    0x1(%rax,%rax,1),%eax\n  401007:       48 83 c4 08             add    $0x8,%rsp\n  40100b:       c3                      retq\n```\n\n直接尝试写出c源码：\n\n```c\nint func4(int target, int step, int limit) {\n  /* edi = target; esi = step; edx = limit */\n  int temp = (limit - step) * 0.5;\n  int mid = temp + step;\n  if (mid > target) {\n    limit = mid - 1;\n    int ret1 = func4(target, step, limit);\n    return 2 * ret1;\n  } else {\n    if (mid >= target) {\n      return 0;\n    } else {\n      step = mid + 1;\n      int ret2 = func4(target, step, limit);\n      return (2 * ret2 + 1);\n    }\n  }\n}\n```\n\n**答案** 7 0\n\n### Phase_5\n\n```assembly\n0000000000401062 <phase_5>:\n  401062:       53                      push   %rbx\n  401063:       48 83 ec 20             sub    $0x20,%rsp\n  401067:       48 89 fb                mov    %rdi,%rbx\n  40106a:       64 48 8b 04 25 28 00    mov    %fs:0x28,%rax\n  401071:       00 00\n  401073:       48 89 44 24 18          mov    %rax,0x18(%rsp)\n  401078:       31 c0                   xor    %eax,%eax\n  40107a:       e8 9c 02 00 00          callq  40131b <string_length>\n  40107f:       83 f8 06                cmp    $0x6,%eax\n  401082:       74 4e                   je     4010d2 <phase_5+0x70>\n  401084:       e8 b1 03 00 00          callq  40143a <explode_bomb>\n  401089:       eb 47                   jmp    4010d2 <phase_5+0x70>\n  40108b:       0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx\n  40108f:       88 0c 24                mov    %cl,(%rsp)\n  401092:       48 8b 14 24             mov    (%rsp),%rdx\n  401096:       83 e2 0f                and    $0xf,%edx\n  401099:       0f b6 92 b0 24 40 00    movzbl 0x4024b0(%rdx),%edx\n  4010a0:       88 54 04 10             mov    %dl,0x10(%rsp,%rax,1)\n  4010a4:       48 83 c0 01             add    $0x1,%rax\n  4010a8:       48 83 f8 06             cmp    $0x6,%rax\n  4010ac:       75 dd                   jne    40108b <phase_5+0x29>\n  4010ae:       c6 44 24 16 00          movb   $0x0,0x16(%rsp)\n  4010b3:       be 5e 24 40 00          mov    $0x40245e,%esi\n  4010b8:       48 8d 7c 24 10          lea    0x10(%rsp),%rdi\n  4010bd:       e8 76 02 00 00          callq  401338 <strings_not_equal>\n  4010c2:       85 c0                   test   %eax,%eax\n  4010c4:       74 13                   je     4010d9 <phase_5+0x77>\n  4010c6:       e8 6f 03 00 00          callq  40143a <explode_bomb>\n  4010cb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n  4010d0:       eb 07                   jmp    4010d9 <phase_5+0x77>\n  4010d2:       b8 00 00 00 00          mov    $0x0,%eax\n  4010d7:       eb b2                   jmp    40108b <phase_5+0x29>\n  4010d9:       48 8b 44 24 18          mov    0x18(%rsp),%rax\n  4010de:       64 48 33 04 25 28 00    xor    %fs:0x28,%rax\n  4010e5:       00 00\n  4010e7:       74 05                   je     4010ee <phase_5+0x8c>\n  4010e9:       e8 42 fa ff ff          callq  400b30 <__stack_chk_fail@plt>\n  4010ee:       48 83 c4 20             add    $0x20,%rsp\n  4010f2:       5b                      pop    %rbx\n  4010f3:       c3                      retq\n```\n\n","source":"_posts/csapp-labs/csapp-bomblab.md","raw":"---\ntitle: '[CSAPP] Bomb Lab'\ndate: 2020-10-6 0:41\ntags:\n- CSAPP\n- Labs\ncategories:\n- 编译\n- 汇编\n---\n\n## Bomb Lab\n\n传说中的bomb lab，我开始以为这名字意思是更改了程序汇编代码，让你修复...直到看了writeup...\n\n一些预备知识，主要为[CSAPP第三章](https://wfc.ink/2020/10/06/csapp-pre-bomblab/)\n\n> 题目大致意思就是不给源码（但给了源码框架），然你通过各种工具（gdb，objdump）调试，获取6次正确的输入。输入错误字符串会BOOMMMM !\n\n部分源码：\n\n```c\n/* Do all sorts of secret stuff that makes the bomb harder to defuse. */\ninitialize_bomb();\n\nprintf(\"Welcome to my fiendish little bomb. You have 6 phases with\\n\");\nprintf(\"which to blow yourself up. Have a nice day!\\n\");\n\n/* Hmm...  Six phases must be more secure than one phase! */\ninput = read_line();             /* Get input                   */\nphase_1(input);                  /* Run the phase               */\nphase_defused();                 /* Drat!  They figured it out!\n                                  * Let me know how they did it. */\nprintf(\"Phase 1 defused. How about the next one?\\n\");\n```\n\n### phase_1\n\n```bash\n$objdump -d bomb > log.txt\n```\n\nmain函数中调用phase_1的汇编代码：\n```assembly\n400e32:       e8 67 06 00 00          callq  40149e <read_line>;读入一串字符，地址存在%rax\n400e37:       48 89 c7                mov    %rax,%rdi;%mov到%rdi\n400e3a:       e8 a1 00 00 00          callq  400ee0 <phase_1>\n400e3f:       e8 80 07 00 00          callq  4015c4 <phase_defused>\n```\n\nphase_1的汇编代码：\n\n```assembly\n0000000000400ee0 <phase_1>:\n  400ee0:       48 83 ec 08             sub    $0x8,%rsp\n  400ee4:       be 00 24 40 00          mov    $0x402400,%esi;字符常量地址存入%esi\n  400ee9:       e8 4a 04 00 00          callq  401338 <strings_not_equal>\n  400eee:       85 c0                   test   %eax,%eax;判断返回值是否为0\n  400ef0:       74 05                   je     400ef7 <phase_1+0x17>\n  400ef2:       e8 43 05 00 00          callq  40143a <explode_bomb>\n  400ef7:       48 83 c4 08             add    $0x8,%rsp\n  400efb:       c3                      retq\n```\n\nstrings_not_equal的汇编代码：\n\n```assembly\n0000000000401338 <strings_not_equal>:\n  401338:       41 54                   push   %r12\n  40133a:       55                      push   %rbp\n  40133b:       53                      push   %rbx\n  40133c:       48 89 fb                mov    %rdi,%rbx;读入字符串地址\n  40133f:       48 89 f5                mov    %rsi,%rbp;字符常量地址\n  401342:       e8 d4 ff ff ff          callq  40131b <string_length>\n  401347:       41 89 c4                mov    %eax,%r12d;求长度结果\n  40134a:       48 89 ef                mov    %rbp,%rdi\n  40134d:       e8 c9 ff ff ff          callq  40131b <string_length>\n  401352:       ba 01 00 00 00          mov    $0x1,%edx;求长度结果\n  401357:       41 39 c4                cmp    %eax,%r12d;比较长度，如不等长直接返回\n  40135a:       75 3f                   jne    40139b <strings_not_equal+0x63>\n  40135c:       0f b6 03                movzbl (%rbx),%eax\n  40135f:       84 c0                   test   %al,%al\n  401361:       74 25                   je     401388 <strings_not_equal+0x50>\n  401363:       3a 45 00                cmp    0x0(%rbp),%al\n  401366:       74 0a                   je     401372 <strings_not_equal+0x3a>\n  401368:       eb 25                   jmp    40138f <strings_not_equal+0x57>\n  40136a:       3a 45 00                cmp    0x0(%rbp),%al\n  40136d:       0f 1f 00                nopl   (%rax)\n  401370:       75 24                   jne    401396 <strings_not_equal+0x5e>\n  401372:       48 83 c3 01             add    $0x1,%rbx;双字符串指针都+1判断是否相等\n  401376:       48 83 c5 01             add    $0x1,%rbp\n  40137a:       0f b6 03                movzbl (%rbx),%eax\n  40137d:       84 c0                   test   %al,%al\n  40137f:       75 e9                   jne    40136a <strings_not_equal+0x32>\n  401381:       ba 00 00 00 00          mov    $0x0,%edx\n  401386:       eb 13                   jmp    40139b <strings_not_equal+0x63>\n  401388:       ba 00 00 00 00          mov    $0x0,%edx\n  40138d:       eb 0c                   jmp    40139b <strings_not_equal+0x63>\n  40138f:       ba 01 00 00 00          mov    $0x1,%edx\n  401394:       eb 05                   jmp    40139b <strings_not_equal+0x63>\n  401396:       ba 01 00 00 00          mov    $0x1,%edx\n  40139b:       89 d0                   mov    %edx,%eax\n  40139d:       5b                      pop    %rbx\n  40139e:       5d                      pop    %rbp\n  40139f:       41 5c                   pop    %r12\n  4013a1:       c3                      retq\n```\n\nstring_length的汇编代码：\n\n```assembly\n000000000040131b <string_length>:\n  40131b:       80 3f 00                cmpb   $0x0,(%rdi);指针判空，空指针直接返回0\n  40131e:       74 12                   je     401332 <string_length+0x17>\n  401320:       48 89 fa                mov    %rdi,%rdx\n  401323:       48 83 c2 01             add    $0x1,%rdx;每次地址+1，循环检测'\\0'\n  401327:       89 d0                   mov    %edx,%eax\n  401329:       29 f8                   sub    %edi,%eax;返回的长度\n  40132b:       80 3a 00                cmpb   $0x0,(%rdx)\n  40132e:       75 f3                   jne    401323 <string_length+0x8>\n  401330:       f3 c3                   repz retq\n  401332:       b8 00 00 00 00          mov    $0x0,%eax\n  401337:       c3                      retq\n```\n\nphase_1挺简单，就判断输入的字符串和给定的字符串常量是否相等，不相同则boom。输入的字符串起始地址为%rdi，给定的字符串起始地址为%esi，调用strings_not_equal判断是否相同。strings_not_equal首先调用string_length求字符串长度，不相同则直接返回，string_length就使用每次指针+1，检测所指内存区域是否为'\\0'的方式求长度。如长度相等则再依次对比每个字符，不相等则直接返回。\n\n所以，需要输入的字符串就是给定的字符串常量，位于内存0x402400，使用gdb打印出内存信息\n\n```bash\n$ gdb ./bomb\n(gdb) b phase_1\nBreakpoint 1 at 0x400ee0\n(gdb) r\n[随意的错误输入]\nBreakpoint 1, 0x0000000000400ee0 in phase_1 ()\n(gdb) print (char*) 0x402400\n$1 = 0x402400 \"Border relations with Canada have never been better.\"\n```\n\n**答案**是 Border relations with Canada have never been better.\n\n### phase_2\n\nphase_2的汇编代码：\n\n```assembly\n0000000000400efc <phase_2>:\n  400efc:       55                      push   %rbp\n  400efd:       53                      push   %rbx\n  400efe:       48 83 ec 28             sub    $0x28,%rsp\n  400f02:       48 89 e6                mov    %rsp,%rsi\n  400f05:       e8 52 05 00 00          callq  40145c <read_six_numbers>\n  400f0a:       83 3c 24 01             cmpl   $0x1,(%rsp);和1比较\n  400f0e:       74 20                   je     400f30 <phase_2+0x34>\n  400f10:       e8 25 05 00 00          callq  40143a <explode_bomb>\n  400f15:       eb 19                   jmp    400f30 <phase_2+0x34>\n  400f17:       8b 43 fc                mov    -0x4(%rbx),%eax;前一个单元的值\n  400f1a:       01 c0                   add    %eax,%eax;前一个单元的值*2\n  400f1c:       39 03                   cmp    %eax,(%rbx);前一个单元的值*2和当前单元比较\n  400f1e:       74 05                   je     400f25 <phase_2+0x29>\n  400f20:       e8 15 05 00 00          callq  40143a <explode_bomb>\n  400f25:       48 83 c3 04             add    $0x4,%rbx\n  400f29:       48 39 eb                cmp    %rbp,%rbx\n  400f2c:       75 e9                   jne    400f17 <phase_2+0x1b>\n  400f2e:       eb 0c                   jmp    400f3c <phase_2+0x40>\n  400f30:       48 8d 5c 24 04          lea    0x4(%rsp),%rbx;将%rsp所指单元的上一个单元地址传%rbx\n  400f35:       48 8d 6c 24 18          lea    0x18(%rsp),%rbp;将%rsp+24所指单元的地址传%rbx，作为循环结束条件\n  400f3a:       eb db                   jmp    400f17 <phase_2+0x1b>\n  400f3c:       48 83 c4 28             add    $0x28,%rsp\n  400f40:       5b                      pop    %rbx\n  400f41:       5d                      pop    %rbp\n  400f42:       c3                      retq\n```\n\nread_six_numbers的汇编代码：\n\n```assembly\n000000000040145c <read_six_numbers>:\n  40145c:       48 83 ec 18             sub    $0x18,%rsp\n  401460:       48 89 f2                mov    %rsi,%rdx;存的就是phase_2栈帧底部的地址\n  401463:       48 8d 4e 04             lea    0x4(%rsi),%rcx;传地址参数到寄存器\n  401467:       48 8d 46 14             lea    0x14(%rsi),%rax\n  40146b:       48 89 44 24 08          mov    %rax,0x8(%rsp)\n  401470:       48 8d 46 10             lea    0x10(%rsi),%rax\n  401474:       48 89 04 24             mov    %rax,(%rsp)\n  401478:       4c 8d 4e 0c             lea    0xc(%rsi),%r9\n  40147c:       4c 8d 46 08             lea    0x8(%rsi),%r8\n  401480:       be c3 25 40 00          mov    $0x4025c3,%esi\n  401485:       b8 00 00 00 00          mov    $0x0,%eax\n  40148a:       e8 61 f7 ff ff          callq  400bf0 <__isoc99_sscanf@plt>\n  40148f:       83 f8 05                cmp    $0x5,%eax;返回值：读取到的数量\n  401492:       7f 05                   jg     401499 <read_six_numbers+0x3d>\n  401494:       e8 a1 ff ff ff          callq  40143a <explode_bomb>\n  401499:       48 83 c4 18             add    $0x18,%rsp\n  40149d:       c3                      retq\n```\n\nphase_2主要是个循环，read_six_number将phase_2栈帧地址较低处6个int型内存单元的地址传给__isoc99_sscanf@plt，sscanff读取6个数到phase_2栈帧底部的6个单元，并返回读取到的int数量，存到%eax，如果数量小于6，则boom。\n\n在phase_2的汇编代码中，首先将phase_2栈帧的最低地址单元与常数1相比，如果不等则boom，如果相等，则进行循环：用%rbx记录当前所指单元，将前一个单元的值的两倍和当前单元比较（第一个单元值为1），不相等则boom。当%rbx和%rbp相等时，循环结束。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201007112329.png\" width=\"250px\"> </div>\n\n**答案**是 1 2 4 8 16 32\n\n### phase_3\n\nphase_3的汇编代码：\n\n```assembly\n0000000000400f43 <phase_3>:\n  400f43:       48 83 ec 18             sub    $0x18,%rsp\n  400f47:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx\n  400f4c:       48 8d 54 24 08          lea    0x8(%rsp),%rdx\n  400f51:       be cf 25 40 00          mov    $0x4025cf,%esi;\"%d %d\"\n  400f56:       b8 00 00 00 00          mov    $0x0,%eax\n  400f5b:       e8 90 fc ff ff          callq  400bf0 <__isoc99_sscanf@plt>\n  400f60:       83 f8 01                cmp    $0x1,%eax\n  400f63:       7f 05                   jg     400f6a <phase_3+0x27>\n  400f65:       e8 d0 04 00 00          callq  40143a <explode_bomb>\n  400f6a:       83 7c 24 08 07          cmpl   $0x7,0x8(%rsp)\n  400f6f:       77 3c                   ja     400fad <phase_3+0x6a>\n  400f71:       8b 44 24 08             mov    0x8(%rsp),%eax\n  400f75:       ff 24 c5 70 24 40 00    jmpq   *0x402470(,%rax,8);跳转表\n  400f7c:       b8 cf 00 00 00          mov    $0xcf,%eax\n  400f81:       eb 3b                   jmp    400fbe <phase_3+0x7b>\n  400f83:       b8 c3 02 00 00          mov    $0x2c3,%eax\n  400f88:       eb 34                   jmp    400fbe <phase_3+0x7b>\n  400f8a:       b8 00 01 00 00          mov    $0x100,%eax\n  400f8f:       eb 2d                   jmp    400fbe <phase_3+0x7b>\n  400f91:       b8 85 01 00 00          mov    $0x185,%eax\n  400f96:       eb 26                   jmp    400fbe <phase_3+0x7b>\n  400f98:       b8 ce 00 00 00          mov    $0xce,%eax\n  400f9d:       eb 1f                   jmp    400fbe <phase_3+0x7b>\n  400f9f:       b8 aa 02 00 00          mov    $0x2aa,%eax\n  400fa4:       eb 18                   jmp    400fbe <phase_3+0x7b>\n  400fa6:       b8 47 01 00 00          mov    $0x147,%eax\n  400fab:       eb 11                   jmp    400fbe <phase_3+0x7b>\n  400fad:       e8 88 04 00 00          callq  40143a <explode_bomb>\n  400fb2:       b8 00 00 00 00          mov    $0x0,%eax\n  400fb7:       eb 05                   jmp    400fbe <phase_3+0x7b>\n  400fb9:       b8 37 01 00 00          mov    $0x137,%eax\n  400fbe:       3b 44 24 0c             cmp    0xc(%rsp),%eax\n  400fc2:       74 05                   je     400fc9 <phase_3+0x86>\n  400fc4:       e8 71 04 00 00          callq  40143a <explode_bomb>\n  400fc9:       48 83 c4 18             add    $0x18,%rsp\n  400fcd:       c3                      retq\n```\n\n```assembly\n(gdb) print (char*) 0x4025cf\n$2 = 0x4025cf \"%d %d\"\n```\n\nphase_3主要内容为switch和跳转表，sscanf读取至少两个数，否则就boom。第一个参数在%rsp+8处，第二个参数在%rsp+12处。第一个参数不能大于7，否则就boom\n\n0x402470处是跳转表的首地址，可以用gdb打印出跳转表：\n\n```assembly\n(gdb) print /x *0x402470 @16\n$1 = {0x400f7c, 0x0, 0x400fb9, 0x0, 0x400f83, 0x0, 0x400f8a, 0x0, 0x400f91, 0x0,\n  0x400f98, 0x0, 0x400f9f, 0x0, 0x400fa6, 0x0}\n```\n\n可以看出来，%rsp+8中不同的值，也就是%rax中不同的值对应着跳转表中不同的跳转地址，尝试使%rax等于1，则跳转到0x400fb9处指令，则第二个参数%rsp+12需要等于0x137才能使下一条cmp指令相等。\n\n其中一个**答案**为1 311\n\n### phase_4\n\nphase_4的汇编代码：\n\n```assembly\n000000000040100c <phase_4>:\n  40100c:       48 83 ec 18             sub    $0x18,%rsp\n  401010:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx\n  401015:       48 8d 54 24 08          lea    0x8(%rsp),%rdx\n  40101a:       be cf 25 40 00          mov    $0x4025cf,%esi\n  40101f:       b8 00 00 00 00          mov    $0x0,%eax\n  401024:       e8 c7 fb ff ff          callq  400bf0 <__isoc99_sscanf@plt>\n  401029:       83 f8 02                cmp    $0x2,%eax\n  40102c:       75 07                   jne    401035 <phase_4+0x29>\n  40102e:       83 7c 24 08 0e          cmpl   $0xe,0x8(%rsp)\n  401033:       76 05                   jbe    40103a <phase_4+0x2e>\n  401035:       e8 00 04 00 00          callq  40143a <explode_bomb>\n  40103a:       ba 0e 00 00 00          mov    $0xe,%edx\n  40103f:       be 00 00 00 00          mov    $0x0,%esi\n  401044:       8b 7c 24 08             mov    0x8(%rsp),%edi\n  401048:       e8 81 ff ff ff          callq  400fce <func4>\n  40104d:       85 c0                   test   %eax,%eax\n  40104f:       75 07                   jne    401058 <phase_4+0x4c>\n  401051:       83 7c 24 0c 00          cmpl   $0x0,0xc(%rsp)\n  401056:       74 05                   je     40105d <phase_4+0x51>\n  401058:       e8 dd 03 00 00          callq  40143a <explode_bomb>\n  40105d:       48 83 c4 18             add    $0x18,%rsp\n  401061:       c3                      retq\n```\n\nfunc4的汇编代码：\n\n```assembly\n0000000000400fce <func4>:\n  400fce:       48 83 ec 08             sub    $0x8,%rsp\n  400fd2:       89 d0                   mov    %edx,%eax\n  400fd4:       29 f0                   sub    %esi,%eax\n  400fd6:       89 c1                   mov    %eax,%ecx\n  400fd8:       c1 e9 1f                shr    $0x1f,%ecx\n  400fdb:       01 c8                   add    %ecx,%eax\n  400fdd:       d1 f8                   sar    %eax\n  400fdf:       8d 0c 30                lea    (%rax,%rsi,1),%ecx\n  400fe2:       39 f9                   cmp    %edi,%ecx\n  400fe4:       7e 0c                   jle    400ff2 <func4+0x24>\n  400fe6:       8d 51 ff                lea    -0x1(%rcx),%edx\n  i00fe9:       e8 e0 ff ff ff          callq  400fce <func4>\n  400fee:       01 c0                   add    %eax,%eax\n  400ff0:       eb 15                   jmp    401007 <func4+0x39>\n  400ff2:       b8 00 00 00 00          mov    $0x0,%eax\n  400ff7:       39 f9                   cmp    %edi,%ecx\n  400ff9:       7d 0c                   jge    401007 <func4+0x39>\n  400ffb:       8d 71 01                lea    0x1(%rcx),%esi\n  400ffe:       e8 cb ff ff ff          callq  400fce <func4>\n  401003:       8d 44 00 01             lea    0x1(%rax,%rax,1),%eax\n  401007:       48 83 c4 08             add    $0x8,%rsp\n  40100b:       c3                      retq\n```\n\n直接尝试写出c源码：\n\n```c\nint func4(int target, int step, int limit) {\n  /* edi = target; esi = step; edx = limit */\n  int temp = (limit - step) * 0.5;\n  int mid = temp + step;\n  if (mid > target) {\n    limit = mid - 1;\n    int ret1 = func4(target, step, limit);\n    return 2 * ret1;\n  } else {\n    if (mid >= target) {\n      return 0;\n    } else {\n      step = mid + 1;\n      int ret2 = func4(target, step, limit);\n      return (2 * ret2 + 1);\n    }\n  }\n}\n```\n\n**答案** 7 0\n\n### Phase_5\n\n```assembly\n0000000000401062 <phase_5>:\n  401062:       53                      push   %rbx\n  401063:       48 83 ec 20             sub    $0x20,%rsp\n  401067:       48 89 fb                mov    %rdi,%rbx\n  40106a:       64 48 8b 04 25 28 00    mov    %fs:0x28,%rax\n  401071:       00 00\n  401073:       48 89 44 24 18          mov    %rax,0x18(%rsp)\n  401078:       31 c0                   xor    %eax,%eax\n  40107a:       e8 9c 02 00 00          callq  40131b <string_length>\n  40107f:       83 f8 06                cmp    $0x6,%eax\n  401082:       74 4e                   je     4010d2 <phase_5+0x70>\n  401084:       e8 b1 03 00 00          callq  40143a <explode_bomb>\n  401089:       eb 47                   jmp    4010d2 <phase_5+0x70>\n  40108b:       0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx\n  40108f:       88 0c 24                mov    %cl,(%rsp)\n  401092:       48 8b 14 24             mov    (%rsp),%rdx\n  401096:       83 e2 0f                and    $0xf,%edx\n  401099:       0f b6 92 b0 24 40 00    movzbl 0x4024b0(%rdx),%edx\n  4010a0:       88 54 04 10             mov    %dl,0x10(%rsp,%rax,1)\n  4010a4:       48 83 c0 01             add    $0x1,%rax\n  4010a8:       48 83 f8 06             cmp    $0x6,%rax\n  4010ac:       75 dd                   jne    40108b <phase_5+0x29>\n  4010ae:       c6 44 24 16 00          movb   $0x0,0x16(%rsp)\n  4010b3:       be 5e 24 40 00          mov    $0x40245e,%esi\n  4010b8:       48 8d 7c 24 10          lea    0x10(%rsp),%rdi\n  4010bd:       e8 76 02 00 00          callq  401338 <strings_not_equal>\n  4010c2:       85 c0                   test   %eax,%eax\n  4010c4:       74 13                   je     4010d9 <phase_5+0x77>\n  4010c6:       e8 6f 03 00 00          callq  40143a <explode_bomb>\n  4010cb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n  4010d0:       eb 07                   jmp    4010d9 <phase_5+0x77>\n  4010d2:       b8 00 00 00 00          mov    $0x0,%eax\n  4010d7:       eb b2                   jmp    40108b <phase_5+0x29>\n  4010d9:       48 8b 44 24 18          mov    0x18(%rsp),%rax\n  4010de:       64 48 33 04 25 28 00    xor    %fs:0x28,%rax\n  4010e5:       00 00\n  4010e7:       74 05                   je     4010ee <phase_5+0x8c>\n  4010e9:       e8 42 fa ff ff          callq  400b30 <__stack_chk_fail@plt>\n  4010ee:       48 83 c4 20             add    $0x20,%rsp\n  4010f2:       5b                      pop    %rbx\n  4010f3:       c3                      retq\n```\n\n","slug":"csapp-labs/csapp-bomblab","published":1,"updated":"2020-10-19T13:04:31.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtua8000y2kwjba4wgrvh","content":"<h2 id=\"bomb-lab\"><a class=\"markdownIt-Anchor\" href=\"#bomb-lab\"></a> Bomb Lab</h2>\n<p>传说中的bomb lab，我开始以为这名字意思是更改了程序汇编代码，让你修复…直到看了writeup…</p>\n<p>一些预备知识，主要为<a href=\"https://wfc.ink/2020/10/06/csapp-pre-bomblab/\">CSAPP第三章</a></p>\n<blockquote>\n<p>题目大致意思就是不给源码（但给了源码框架），然你通过各种工具（gdb，objdump）调试，获取6次正确的输入。输入错误字符串会BOOMMMM !</p>\n</blockquote>\n<p>部分源码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Do all sorts of secret stuff that makes the bomb harder to defuse. */</span></span><br><span class=\"line\">initialize_bomb();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Welcome to my fiendish little bomb. You have 6 phases with\\n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"which to blow yourself up. Have a nice day!\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Hmm...  Six phases must be more secure than one phase! */</span></span><br><span class=\"line\">input = read_line();             <span class=\"comment\">/* Get input                   */</span></span><br><span class=\"line\">phase_1(input);                  <span class=\"comment\">/* Run the phase               */</span></span><br><span class=\"line\">phase_defused();                 <span class=\"comment\">/* Drat!  They figured it out!</span></span><br><span class=\"line\"><span class=\"comment\">                                  * Let me know how they did it. */</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Phase 1 defused. How about the next one?\\n\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"phase_1\"><a class=\"markdownIt-Anchor\" href=\"#phase_1\"></a> phase_1</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$objdump</span> -d bomb &gt; log.txt</span><br></pre></td></tr></table></figure>\n<p>main函数中调用phase_1的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">400e32:       e8 67 06 00 00          callq  40149e &lt;read_line&gt;;读入一串字符，地址存在%rax</span><br><span class=\"line\">400e37:       48 89 c7                mov    %rax,%rdi;%mov到%rdi</span><br><span class=\"line\">400e3a:       e8 a1 00 00 00          callq  400ee0 &lt;phase_1&gt;</span><br><span class=\"line\">400e3f:       e8 80 07 00 00          callq  4015c4 &lt;phase_defused&gt;</span><br></pre></td></tr></table></figure>\n<p>phase_1的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400ee0 &lt;phase_1&gt;:</span><br><span class=\"line\">  400ee0:       48 83 ec 08             sub    $0x8,%rsp</span><br><span class=\"line\">  400ee4:       be 00 24 40 00          mov    $0x402400,%esi;字符常量地址存入%esi</span><br><span class=\"line\">  400ee9:       e8 4a 04 00 00          callq  401338 &lt;strings_not_equal&gt;</span><br><span class=\"line\">  400eee:       85 c0                   test   %eax,%eax;判断返回值是否为0</span><br><span class=\"line\">  400ef0:       74 05                   je     400ef7 &lt;phase_1+0x17&gt;</span><br><span class=\"line\">  400ef2:       e8 43 05 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400ef7:       48 83 c4 08             add    $0x8,%rsp</span><br><span class=\"line\">  400efb:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>strings_not_equal的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000401338 &lt;strings_not_equal&gt;:</span><br><span class=\"line\">  401338:       41 54                   push   %r12</span><br><span class=\"line\">  40133a:       55                      push   %rbp</span><br><span class=\"line\">  40133b:       53                      push   %rbx</span><br><span class=\"line\">  40133c:       48 89 fb                mov    %rdi,%rbx;读入字符串地址</span><br><span class=\"line\">  40133f:       48 89 f5                mov    %rsi,%rbp;字符常量地址</span><br><span class=\"line\">  401342:       e8 d4 ff ff ff          callq  40131b &lt;string_length&gt;</span><br><span class=\"line\">  401347:       41 89 c4                mov    %eax,%r12d;求长度结果</span><br><span class=\"line\">  40134a:       48 89 ef                mov    %rbp,%rdi</span><br><span class=\"line\">  40134d:       e8 c9 ff ff ff          callq  40131b &lt;string_length&gt;</span><br><span class=\"line\">  401352:       ba 01 00 00 00          mov    $0x1,%edx;求长度结果</span><br><span class=\"line\">  401357:       41 39 c4                cmp    %eax,%r12d;比较长度，如不等长直接返回</span><br><span class=\"line\">  40135a:       75 3f                   jne    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  40135c:       0f b6 03                movzbl (%rbx),%eax</span><br><span class=\"line\">  40135f:       84 c0                   test   %al,%al</span><br><span class=\"line\">  401361:       74 25                   je     401388 &lt;strings_not_equal+0x50&gt;</span><br><span class=\"line\">  401363:       3a 45 00                cmp    0x0(%rbp),%al</span><br><span class=\"line\">  401366:       74 0a                   je     401372 &lt;strings_not_equal+0x3a&gt;</span><br><span class=\"line\">  401368:       eb 25                   jmp    40138f &lt;strings_not_equal+0x57&gt;</span><br><span class=\"line\">  40136a:       3a 45 00                cmp    0x0(%rbp),%al</span><br><span class=\"line\">  40136d:       0f 1f 00                nopl   (%rax)</span><br><span class=\"line\">  401370:       75 24                   jne    401396 &lt;strings_not_equal+0x5e&gt;</span><br><span class=\"line\">  401372:       48 83 c3 01             add    $0x1,%rbx;双字符串指针都+1判断是否相等</span><br><span class=\"line\">  401376:       48 83 c5 01             add    $0x1,%rbp</span><br><span class=\"line\">  40137a:       0f b6 03                movzbl (%rbx),%eax</span><br><span class=\"line\">  40137d:       84 c0                   test   %al,%al</span><br><span class=\"line\">  40137f:       75 e9                   jne    40136a &lt;strings_not_equal+0x32&gt;</span><br><span class=\"line\">  401381:       ba 00 00 00 00          mov    $0x0,%edx</span><br><span class=\"line\">  401386:       eb 13                   jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  401388:       ba 00 00 00 00          mov    $0x0,%edx</span><br><span class=\"line\">  40138d:       eb 0c                   jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  40138f:       ba 01 00 00 00          mov    $0x1,%edx</span><br><span class=\"line\">  401394:       eb 05                   jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  401396:       ba 01 00 00 00          mov    $0x1,%edx</span><br><span class=\"line\">  40139b:       89 d0                   mov    %edx,%eax</span><br><span class=\"line\">  40139d:       5b                      pop    %rbx</span><br><span class=\"line\">  40139e:       5d                      pop    %rbp</span><br><span class=\"line\">  40139f:       41 5c                   pop    %r12</span><br><span class=\"line\">  4013a1:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>string_length的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">000000000040131b &lt;string_length&gt;:</span><br><span class=\"line\">  40131b:       80 3f 00                cmpb   $0x0,(%rdi);指针判空，空指针直接返回0</span><br><span class=\"line\">  40131e:       74 12                   je     401332 &lt;string_length+0x17&gt;</span><br><span class=\"line\">  401320:       48 89 fa                mov    %rdi,%rdx</span><br><span class=\"line\">  401323:       48 83 c2 01             add    $0x1,%rdx;每次地址+1，循环检测&#39;\\0&#39;</span><br><span class=\"line\">  401327:       89 d0                   mov    %edx,%eax</span><br><span class=\"line\">  401329:       29 f8                   sub    %edi,%eax;返回的长度</span><br><span class=\"line\">  40132b:       80 3a 00                cmpb   $0x0,(%rdx)</span><br><span class=\"line\">  40132e:       75 f3                   jne    401323 &lt;string_length+0x8&gt;</span><br><span class=\"line\">  401330:       f3 c3                   repz retq</span><br><span class=\"line\">  401332:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  401337:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>phase_1挺简单，就判断输入的字符串和给定的字符串常量是否相等，不相同则boom。输入的字符串起始地址为%rdi，给定的字符串起始地址为%esi，调用strings_not_equal判断是否相同。strings_not_equal首先调用string_length求字符串长度，不相同则直接返回，string_length就使用每次指针+1，检测所指内存区域是否为’\\0’的方式求长度。如长度相等则再依次对比每个字符，不相等则直接返回。</p>\n<p>所以，需要输入的字符串就是给定的字符串常量，位于内存0x402400，使用gdb打印出内存信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gdb ./bomb</span><br><span class=\"line\">(gdb) b phase_1</span><br><span class=\"line\">Breakpoint 1 at 0x400ee0</span><br><span class=\"line\">(gdb) r</span><br><span class=\"line\">[随意的错误输入]</span><br><span class=\"line\">Breakpoint 1, 0x0000000000400ee0 <span class=\"keyword\">in</span> phase_1 ()</span><br><span class=\"line\">(gdb) <span class=\"built_in\">print</span> (char*) 0x402400</span><br><span class=\"line\"><span class=\"variable\">$1</span> = 0x402400 <span class=\"string\">\"Border relations with Canada have never been better.\"</span></span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong>是 Border relations with Canada have never been better.</p>\n<h3 id=\"phase_2\"><a class=\"markdownIt-Anchor\" href=\"#phase_2\"></a> phase_2</h3>\n<p>phase_2的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400efc &lt;phase_2&gt;:</span><br><span class=\"line\">  400efc:       55                      push   %rbp</span><br><span class=\"line\">  400efd:       53                      push   %rbx</span><br><span class=\"line\">  400efe:       48 83 ec 28             sub    $0x28,%rsp</span><br><span class=\"line\">  400f02:       48 89 e6                mov    %rsp,%rsi</span><br><span class=\"line\">  400f05:       e8 52 05 00 00          callq  40145c &lt;read_six_numbers&gt;</span><br><span class=\"line\">  400f0a:       83 3c 24 01             cmpl   $0x1,(%rsp);和1比较</span><br><span class=\"line\">  400f0e:       74 20                   je     400f30 &lt;phase_2+0x34&gt;</span><br><span class=\"line\">  400f10:       e8 25 05 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400f15:       eb 19                   jmp    400f30 &lt;phase_2+0x34&gt;</span><br><span class=\"line\">  400f17:       8b 43 fc                mov    -0x4(%rbx),%eax;前一个单元的值</span><br><span class=\"line\">  400f1a:       01 c0                   add    %eax,%eax;前一个单元的值*2</span><br><span class=\"line\">  400f1c:       39 03                   cmp    %eax,(%rbx);前一个单元的值*2和当前单元比较</span><br><span class=\"line\">  400f1e:       74 05                   je     400f25 &lt;phase_2+0x29&gt;</span><br><span class=\"line\">  400f20:       e8 15 05 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400f25:       48 83 c3 04             add    $0x4,%rbx</span><br><span class=\"line\">  400f29:       48 39 eb                cmp    %rbp,%rbx</span><br><span class=\"line\">  400f2c:       75 e9                   jne    400f17 &lt;phase_2+0x1b&gt;</span><br><span class=\"line\">  400f2e:       eb 0c                   jmp    400f3c &lt;phase_2+0x40&gt;</span><br><span class=\"line\">  400f30:       48 8d 5c 24 04          lea    0x4(%rsp),%rbx;将%rsp所指单元的上一个单元地址传%rbx</span><br><span class=\"line\">  400f35:       48 8d 6c 24 18          lea    0x18(%rsp),%rbp;将%rsp+24所指单元的地址传%rbx，作为循环结束条件</span><br><span class=\"line\">  400f3a:       eb db                   jmp    400f17 &lt;phase_2+0x1b&gt;</span><br><span class=\"line\">  400f3c:       48 83 c4 28             add    $0x28,%rsp</span><br><span class=\"line\">  400f40:       5b                      pop    %rbx</span><br><span class=\"line\">  400f41:       5d                      pop    %rbp</span><br><span class=\"line\">  400f42:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>read_six_numbers的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">000000000040145c &lt;read_six_numbers&gt;:</span><br><span class=\"line\">  40145c:       48 83 ec 18             sub    $0x18,%rsp</span><br><span class=\"line\">  401460:       48 89 f2                mov    %rsi,%rdx;存的就是phase_2栈帧底部的地址</span><br><span class=\"line\">  401463:       48 8d 4e 04             lea    0x4(%rsi),%rcx;传地址参数到寄存器</span><br><span class=\"line\">  401467:       48 8d 46 14             lea    0x14(%rsi),%rax</span><br><span class=\"line\">  40146b:       48 89 44 24 08          mov    %rax,0x8(%rsp)</span><br><span class=\"line\">  401470:       48 8d 46 10             lea    0x10(%rsi),%rax</span><br><span class=\"line\">  401474:       48 89 04 24             mov    %rax,(%rsp)</span><br><span class=\"line\">  401478:       4c 8d 4e 0c             lea    0xc(%rsi),%r9</span><br><span class=\"line\">  40147c:       4c 8d 46 08             lea    0x8(%rsi),%r8</span><br><span class=\"line\">  401480:       be c3 25 40 00          mov    $0x4025c3,%esi</span><br><span class=\"line\">  401485:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  40148a:       e8 61 f7 ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class=\"line\">  40148f:       83 f8 05                cmp    $0x5,%eax;返回值：读取到的数量</span><br><span class=\"line\">  401492:       7f 05                   jg     401499 &lt;read_six_numbers+0x3d&gt;</span><br><span class=\"line\">  401494:       e8 a1 ff ff ff          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  401499:       48 83 c4 18             add    $0x18,%rsp</span><br><span class=\"line\">  40149d:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>phase_2主要是个循环，read_six_number将phase_2栈帧地址较低处6个int型内存单元的地址传给__isoc99_sscanf@plt，sscanff读取6个数到phase_2栈帧底部的6个单元，并返回读取到的int数量，存到%eax，如果数量小于6，则boom。</p>\n<p>在phase_2的汇编代码中，首先将phase_2栈帧的最低地址单元与常数1相比，如果不等则boom，如果相等，则进行循环：用%rbx记录当前所指单元，将前一个单元的值的两倍和当前单元比较（第一个单元值为1），不相等则boom。当%rbx和%rbp相等时，循环结束。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201007112329.png\" width=\"250px\"> </div>\n<p><strong>答案</strong>是 1 2 4 8 16 32</p>\n<h3 id=\"phase_3\"><a class=\"markdownIt-Anchor\" href=\"#phase_3\"></a> phase_3</h3>\n<p>phase_3的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400f43 &lt;phase_3&gt;:</span><br><span class=\"line\">  400f43:       48 83 ec 18             sub    $0x18,%rsp</span><br><span class=\"line\">  400f47:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx</span><br><span class=\"line\">  400f4c:       48 8d 54 24 08          lea    0x8(%rsp),%rdx</span><br><span class=\"line\">  400f51:       be cf 25 40 00          mov    $0x4025cf,%esi;&quot;%d %d&quot;</span><br><span class=\"line\">  400f56:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  400f5b:       e8 90 fc ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class=\"line\">  400f60:       83 f8 01                cmp    $0x1,%eax</span><br><span class=\"line\">  400f63:       7f 05                   jg     400f6a &lt;phase_3+0x27&gt;</span><br><span class=\"line\">  400f65:       e8 d0 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400f6a:       83 7c 24 08 07          cmpl   $0x7,0x8(%rsp)</span><br><span class=\"line\">  400f6f:       77 3c                   ja     400fad &lt;phase_3+0x6a&gt;</span><br><span class=\"line\">  400f71:       8b 44 24 08             mov    0x8(%rsp),%eax</span><br><span class=\"line\">  400f75:       ff 24 c5 70 24 40 00    jmpq   *0x402470(,%rax,8);跳转表</span><br><span class=\"line\">  400f7c:       b8 cf 00 00 00          mov    $0xcf,%eax</span><br><span class=\"line\">  400f81:       eb 3b                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f83:       b8 c3 02 00 00          mov    $0x2c3,%eax</span><br><span class=\"line\">  400f88:       eb 34                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f8a:       b8 00 01 00 00          mov    $0x100,%eax</span><br><span class=\"line\">  400f8f:       eb 2d                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f91:       b8 85 01 00 00          mov    $0x185,%eax</span><br><span class=\"line\">  400f96:       eb 26                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f98:       b8 ce 00 00 00          mov    $0xce,%eax</span><br><span class=\"line\">  400f9d:       eb 1f                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f9f:       b8 aa 02 00 00          mov    $0x2aa,%eax</span><br><span class=\"line\">  400fa4:       eb 18                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400fa6:       b8 47 01 00 00          mov    $0x147,%eax</span><br><span class=\"line\">  400fab:       eb 11                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400fad:       e8 88 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400fb2:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  400fb7:       eb 05                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400fb9:       b8 37 01 00 00          mov    $0x137,%eax</span><br><span class=\"line\">  400fbe:       3b 44 24 0c             cmp    0xc(%rsp),%eax</span><br><span class=\"line\">  400fc2:       74 05                   je     400fc9 &lt;phase_3+0x86&gt;</span><br><span class=\"line\">  400fc4:       e8 71 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400fc9:       48 83 c4 18             add    $0x18,%rsp</span><br><span class=\"line\">  400fcd:       c3                      retq</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) print (char*) 0x4025cf</span><br><span class=\"line\">$2 &#x3D; 0x4025cf &quot;%d %d&quot;</span><br></pre></td></tr></table></figure>\n<p>phase_3主要内容为switch和跳转表，sscanf读取至少两个数，否则就boom。第一个参数在%rsp+8处，第二个参数在%rsp+12处。第一个参数不能大于7，否则就boom</p>\n<p>0x402470处是跳转表的首地址，可以用gdb打印出跳转表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) print &#x2F;x *0x402470 @16</span><br><span class=\"line\">$1 &#x3D; &#123;0x400f7c, 0x0, 0x400fb9, 0x0, 0x400f83, 0x0, 0x400f8a, 0x0, 0x400f91, 0x0,</span><br><span class=\"line\">  0x400f98, 0x0, 0x400f9f, 0x0, 0x400fa6, 0x0&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出来，%rsp+8中不同的值，也就是%rax中不同的值对应着跳转表中不同的跳转地址，尝试使%rax等于1，则跳转到0x400fb9处指令，则第二个参数%rsp+12需要等于0x137才能使下一条cmp指令相等。</p>\n<p>其中一个<strong>答案</strong>为1 311</p>\n<h3 id=\"phase_4\"><a class=\"markdownIt-Anchor\" href=\"#phase_4\"></a> phase_4</h3>\n<p>phase_4的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">000000000040100c &lt;phase_4&gt;:</span><br><span class=\"line\">  40100c:       48 83 ec 18             sub    $0x18,%rsp</span><br><span class=\"line\">  401010:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx</span><br><span class=\"line\">  401015:       48 8d 54 24 08          lea    0x8(%rsp),%rdx</span><br><span class=\"line\">  40101a:       be cf 25 40 00          mov    $0x4025cf,%esi</span><br><span class=\"line\">  40101f:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  401024:       e8 c7 fb ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class=\"line\">  401029:       83 f8 02                cmp    $0x2,%eax</span><br><span class=\"line\">  40102c:       75 07                   jne    401035 &lt;phase_4+0x29&gt;</span><br><span class=\"line\">  40102e:       83 7c 24 08 0e          cmpl   $0xe,0x8(%rsp)</span><br><span class=\"line\">  401033:       76 05                   jbe    40103a &lt;phase_4+0x2e&gt;</span><br><span class=\"line\">  401035:       e8 00 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  40103a:       ba 0e 00 00 00          mov    $0xe,%edx</span><br><span class=\"line\">  40103f:       be 00 00 00 00          mov    $0x0,%esi</span><br><span class=\"line\">  401044:       8b 7c 24 08             mov    0x8(%rsp),%edi</span><br><span class=\"line\">  401048:       e8 81 ff ff ff          callq  400fce &lt;func4&gt;</span><br><span class=\"line\">  40104d:       85 c0                   test   %eax,%eax</span><br><span class=\"line\">  40104f:       75 07                   jne    401058 &lt;phase_4+0x4c&gt;</span><br><span class=\"line\">  401051:       83 7c 24 0c 00          cmpl   $0x0,0xc(%rsp)</span><br><span class=\"line\">  401056:       74 05                   je     40105d &lt;phase_4+0x51&gt;</span><br><span class=\"line\">  401058:       e8 dd 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  40105d:       48 83 c4 18             add    $0x18,%rsp</span><br><span class=\"line\">  401061:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>func4的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400fce &lt;func4&gt;:</span><br><span class=\"line\">  400fce:       48 83 ec 08             sub    $0x8,%rsp</span><br><span class=\"line\">  400fd2:       89 d0                   mov    %edx,%eax</span><br><span class=\"line\">  400fd4:       29 f0                   sub    %esi,%eax</span><br><span class=\"line\">  400fd6:       89 c1                   mov    %eax,%ecx</span><br><span class=\"line\">  400fd8:       c1 e9 1f                shr    $0x1f,%ecx</span><br><span class=\"line\">  400fdb:       01 c8                   add    %ecx,%eax</span><br><span class=\"line\">  400fdd:       d1 f8                   sar    %eax</span><br><span class=\"line\">  400fdf:       8d 0c 30                lea    (%rax,%rsi,1),%ecx</span><br><span class=\"line\">  400fe2:       39 f9                   cmp    %edi,%ecx</span><br><span class=\"line\">  400fe4:       7e 0c                   jle    400ff2 &lt;func4+0x24&gt;</span><br><span class=\"line\">  400fe6:       8d 51 ff                lea    -0x1(%rcx),%edx</span><br><span class=\"line\">  i00fe9:       e8 e0 ff ff ff          callq  400fce &lt;func4&gt;</span><br><span class=\"line\">  400fee:       01 c0                   add    %eax,%eax</span><br><span class=\"line\">  400ff0:       eb 15                   jmp    401007 &lt;func4+0x39&gt;</span><br><span class=\"line\">  400ff2:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  400ff7:       39 f9                   cmp    %edi,%ecx</span><br><span class=\"line\">  400ff9:       7d 0c                   jge    401007 &lt;func4+0x39&gt;</span><br><span class=\"line\">  400ffb:       8d 71 01                lea    0x1(%rcx),%esi</span><br><span class=\"line\">  400ffe:       e8 cb ff ff ff          callq  400fce &lt;func4&gt;</span><br><span class=\"line\">  401003:       8d 44 00 01             lea    0x1(%rax,%rax,1),%eax</span><br><span class=\"line\">  401007:       48 83 c4 08             add    $0x8,%rsp</span><br><span class=\"line\">  40100b:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>直接尝试写出c源码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func4</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> <span class=\"built_in\">step</span>, <span class=\"keyword\">int</span> limit)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* edi = target; esi = step; edx = limit */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> temp = (limit - <span class=\"built_in\">step</span>) * <span class=\"number\">0.5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mid = temp + <span class=\"built_in\">step</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mid &gt; target) &#123;</span><br><span class=\"line\">    limit = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret1 = func4(target, <span class=\"built_in\">step</span>, limit);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * ret1;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mid &gt;= target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">step</span> = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> ret2 = func4(target, <span class=\"built_in\">step</span>, limit);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"number\">2</span> * ret2 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong> 7 0</p>\n<h3 id=\"phase_5\"><a class=\"markdownIt-Anchor\" href=\"#phase_5\"></a> Phase_5</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000401062 &lt;phase_5&gt;:</span><br><span class=\"line\">  401062:       53                      push   %rbx</span><br><span class=\"line\">  401063:       48 83 ec 20             sub    $0x20,%rsp</span><br><span class=\"line\">  401067:       48 89 fb                mov    %rdi,%rbx</span><br><span class=\"line\">  40106a:       64 48 8b 04 25 28 00    mov    %fs:0x28,%rax</span><br><span class=\"line\">  401071:       00 00</span><br><span class=\"line\">  401073:       48 89 44 24 18          mov    %rax,0x18(%rsp)</span><br><span class=\"line\">  401078:       31 c0                   xor    %eax,%eax</span><br><span class=\"line\">  40107a:       e8 9c 02 00 00          callq  40131b &lt;string_length&gt;</span><br><span class=\"line\">  40107f:       83 f8 06                cmp    $0x6,%eax</span><br><span class=\"line\">  401082:       74 4e                   je     4010d2 &lt;phase_5+0x70&gt;</span><br><span class=\"line\">  401084:       e8 b1 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  401089:       eb 47                   jmp    4010d2 &lt;phase_5+0x70&gt;</span><br><span class=\"line\">  40108b:       0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx</span><br><span class=\"line\">  40108f:       88 0c 24                mov    %cl,(%rsp)</span><br><span class=\"line\">  401092:       48 8b 14 24             mov    (%rsp),%rdx</span><br><span class=\"line\">  401096:       83 e2 0f                and    $0xf,%edx</span><br><span class=\"line\">  401099:       0f b6 92 b0 24 40 00    movzbl 0x4024b0(%rdx),%edx</span><br><span class=\"line\">  4010a0:       88 54 04 10             mov    %dl,0x10(%rsp,%rax,1)</span><br><span class=\"line\">  4010a4:       48 83 c0 01             add    $0x1,%rax</span><br><span class=\"line\">  4010a8:       48 83 f8 06             cmp    $0x6,%rax</span><br><span class=\"line\">  4010ac:       75 dd                   jne    40108b &lt;phase_5+0x29&gt;</span><br><span class=\"line\">  4010ae:       c6 44 24 16 00          movb   $0x0,0x16(%rsp)</span><br><span class=\"line\">  4010b3:       be 5e 24 40 00          mov    $0x40245e,%esi</span><br><span class=\"line\">  4010b8:       48 8d 7c 24 10          lea    0x10(%rsp),%rdi</span><br><span class=\"line\">  4010bd:       e8 76 02 00 00          callq  401338 &lt;strings_not_equal&gt;</span><br><span class=\"line\">  4010c2:       85 c0                   test   %eax,%eax</span><br><span class=\"line\">  4010c4:       74 13                   je     4010d9 &lt;phase_5+0x77&gt;</span><br><span class=\"line\">  4010c6:       e8 6f 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  4010cb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class=\"line\">  4010d0:       eb 07                   jmp    4010d9 &lt;phase_5+0x77&gt;</span><br><span class=\"line\">  4010d2:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  4010d7:       eb b2                   jmp    40108b &lt;phase_5+0x29&gt;</span><br><span class=\"line\">  4010d9:       48 8b 44 24 18          mov    0x18(%rsp),%rax</span><br><span class=\"line\">  4010de:       64 48 33 04 25 28 00    xor    %fs:0x28,%rax</span><br><span class=\"line\">  4010e5:       00 00</span><br><span class=\"line\">  4010e7:       74 05                   je     4010ee &lt;phase_5+0x8c&gt;</span><br><span class=\"line\">  4010e9:       e8 42 fa ff ff          callq  400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class=\"line\">  4010ee:       48 83 c4 20             add    $0x20,%rsp</span><br><span class=\"line\">  4010f2:       5b                      pop    %rbx</span><br><span class=\"line\">  4010f3:       c3                      retq</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"bomb-lab\"><a class=\"markdownIt-Anchor\" href=\"#bomb-lab\"></a> Bomb Lab</h2>\n<p>传说中的bomb lab，我开始以为这名字意思是更改了程序汇编代码，让你修复…直到看了writeup…</p>\n<p>一些预备知识，主要为<a href=\"https://wfc.ink/2020/10/06/csapp-pre-bomblab/\">CSAPP第三章</a></p>\n<blockquote>\n<p>题目大致意思就是不给源码（但给了源码框架），然你通过各种工具（gdb，objdump）调试，获取6次正确的输入。输入错误字符串会BOOMMMM !</p>\n</blockquote>\n<p>部分源码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Do all sorts of secret stuff that makes the bomb harder to defuse. */</span></span><br><span class=\"line\">initialize_bomb();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Welcome to my fiendish little bomb. You have 6 phases with\\n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"which to blow yourself up. Have a nice day!\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Hmm...  Six phases must be more secure than one phase! */</span></span><br><span class=\"line\">input = read_line();             <span class=\"comment\">/* Get input                   */</span></span><br><span class=\"line\">phase_1(input);                  <span class=\"comment\">/* Run the phase               */</span></span><br><span class=\"line\">phase_defused();                 <span class=\"comment\">/* Drat!  They figured it out!</span></span><br><span class=\"line\"><span class=\"comment\">                                  * Let me know how they did it. */</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Phase 1 defused. How about the next one?\\n\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"phase_1\"><a class=\"markdownIt-Anchor\" href=\"#phase_1\"></a> phase_1</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$objdump</span> -d bomb &gt; log.txt</span><br></pre></td></tr></table></figure>\n<p>main函数中调用phase_1的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">400e32:       e8 67 06 00 00          callq  40149e &lt;read_line&gt;;读入一串字符，地址存在%rax</span><br><span class=\"line\">400e37:       48 89 c7                mov    %rax,%rdi;%mov到%rdi</span><br><span class=\"line\">400e3a:       e8 a1 00 00 00          callq  400ee0 &lt;phase_1&gt;</span><br><span class=\"line\">400e3f:       e8 80 07 00 00          callq  4015c4 &lt;phase_defused&gt;</span><br></pre></td></tr></table></figure>\n<p>phase_1的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400ee0 &lt;phase_1&gt;:</span><br><span class=\"line\">  400ee0:       48 83 ec 08             sub    $0x8,%rsp</span><br><span class=\"line\">  400ee4:       be 00 24 40 00          mov    $0x402400,%esi;字符常量地址存入%esi</span><br><span class=\"line\">  400ee9:       e8 4a 04 00 00          callq  401338 &lt;strings_not_equal&gt;</span><br><span class=\"line\">  400eee:       85 c0                   test   %eax,%eax;判断返回值是否为0</span><br><span class=\"line\">  400ef0:       74 05                   je     400ef7 &lt;phase_1+0x17&gt;</span><br><span class=\"line\">  400ef2:       e8 43 05 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400ef7:       48 83 c4 08             add    $0x8,%rsp</span><br><span class=\"line\">  400efb:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>strings_not_equal的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000401338 &lt;strings_not_equal&gt;:</span><br><span class=\"line\">  401338:       41 54                   push   %r12</span><br><span class=\"line\">  40133a:       55                      push   %rbp</span><br><span class=\"line\">  40133b:       53                      push   %rbx</span><br><span class=\"line\">  40133c:       48 89 fb                mov    %rdi,%rbx;读入字符串地址</span><br><span class=\"line\">  40133f:       48 89 f5                mov    %rsi,%rbp;字符常量地址</span><br><span class=\"line\">  401342:       e8 d4 ff ff ff          callq  40131b &lt;string_length&gt;</span><br><span class=\"line\">  401347:       41 89 c4                mov    %eax,%r12d;求长度结果</span><br><span class=\"line\">  40134a:       48 89 ef                mov    %rbp,%rdi</span><br><span class=\"line\">  40134d:       e8 c9 ff ff ff          callq  40131b &lt;string_length&gt;</span><br><span class=\"line\">  401352:       ba 01 00 00 00          mov    $0x1,%edx;求长度结果</span><br><span class=\"line\">  401357:       41 39 c4                cmp    %eax,%r12d;比较长度，如不等长直接返回</span><br><span class=\"line\">  40135a:       75 3f                   jne    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  40135c:       0f b6 03                movzbl (%rbx),%eax</span><br><span class=\"line\">  40135f:       84 c0                   test   %al,%al</span><br><span class=\"line\">  401361:       74 25                   je     401388 &lt;strings_not_equal+0x50&gt;</span><br><span class=\"line\">  401363:       3a 45 00                cmp    0x0(%rbp),%al</span><br><span class=\"line\">  401366:       74 0a                   je     401372 &lt;strings_not_equal+0x3a&gt;</span><br><span class=\"line\">  401368:       eb 25                   jmp    40138f &lt;strings_not_equal+0x57&gt;</span><br><span class=\"line\">  40136a:       3a 45 00                cmp    0x0(%rbp),%al</span><br><span class=\"line\">  40136d:       0f 1f 00                nopl   (%rax)</span><br><span class=\"line\">  401370:       75 24                   jne    401396 &lt;strings_not_equal+0x5e&gt;</span><br><span class=\"line\">  401372:       48 83 c3 01             add    $0x1,%rbx;双字符串指针都+1判断是否相等</span><br><span class=\"line\">  401376:       48 83 c5 01             add    $0x1,%rbp</span><br><span class=\"line\">  40137a:       0f b6 03                movzbl (%rbx),%eax</span><br><span class=\"line\">  40137d:       84 c0                   test   %al,%al</span><br><span class=\"line\">  40137f:       75 e9                   jne    40136a &lt;strings_not_equal+0x32&gt;</span><br><span class=\"line\">  401381:       ba 00 00 00 00          mov    $0x0,%edx</span><br><span class=\"line\">  401386:       eb 13                   jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  401388:       ba 00 00 00 00          mov    $0x0,%edx</span><br><span class=\"line\">  40138d:       eb 0c                   jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  40138f:       ba 01 00 00 00          mov    $0x1,%edx</span><br><span class=\"line\">  401394:       eb 05                   jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  401396:       ba 01 00 00 00          mov    $0x1,%edx</span><br><span class=\"line\">  40139b:       89 d0                   mov    %edx,%eax</span><br><span class=\"line\">  40139d:       5b                      pop    %rbx</span><br><span class=\"line\">  40139e:       5d                      pop    %rbp</span><br><span class=\"line\">  40139f:       41 5c                   pop    %r12</span><br><span class=\"line\">  4013a1:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>string_length的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">000000000040131b &lt;string_length&gt;:</span><br><span class=\"line\">  40131b:       80 3f 00                cmpb   $0x0,(%rdi);指针判空，空指针直接返回0</span><br><span class=\"line\">  40131e:       74 12                   je     401332 &lt;string_length+0x17&gt;</span><br><span class=\"line\">  401320:       48 89 fa                mov    %rdi,%rdx</span><br><span class=\"line\">  401323:       48 83 c2 01             add    $0x1,%rdx;每次地址+1，循环检测&#39;\\0&#39;</span><br><span class=\"line\">  401327:       89 d0                   mov    %edx,%eax</span><br><span class=\"line\">  401329:       29 f8                   sub    %edi,%eax;返回的长度</span><br><span class=\"line\">  40132b:       80 3a 00                cmpb   $0x0,(%rdx)</span><br><span class=\"line\">  40132e:       75 f3                   jne    401323 &lt;string_length+0x8&gt;</span><br><span class=\"line\">  401330:       f3 c3                   repz retq</span><br><span class=\"line\">  401332:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  401337:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>phase_1挺简单，就判断输入的字符串和给定的字符串常量是否相等，不相同则boom。输入的字符串起始地址为%rdi，给定的字符串起始地址为%esi，调用strings_not_equal判断是否相同。strings_not_equal首先调用string_length求字符串长度，不相同则直接返回，string_length就使用每次指针+1，检测所指内存区域是否为’\\0’的方式求长度。如长度相等则再依次对比每个字符，不相等则直接返回。</p>\n<p>所以，需要输入的字符串就是给定的字符串常量，位于内存0x402400，使用gdb打印出内存信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gdb ./bomb</span><br><span class=\"line\">(gdb) b phase_1</span><br><span class=\"line\">Breakpoint 1 at 0x400ee0</span><br><span class=\"line\">(gdb) r</span><br><span class=\"line\">[随意的错误输入]</span><br><span class=\"line\">Breakpoint 1, 0x0000000000400ee0 <span class=\"keyword\">in</span> phase_1 ()</span><br><span class=\"line\">(gdb) <span class=\"built_in\">print</span> (char*) 0x402400</span><br><span class=\"line\"><span class=\"variable\">$1</span> = 0x402400 <span class=\"string\">\"Border relations with Canada have never been better.\"</span></span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong>是 Border relations with Canada have never been better.</p>\n<h3 id=\"phase_2\"><a class=\"markdownIt-Anchor\" href=\"#phase_2\"></a> phase_2</h3>\n<p>phase_2的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400efc &lt;phase_2&gt;:</span><br><span class=\"line\">  400efc:       55                      push   %rbp</span><br><span class=\"line\">  400efd:       53                      push   %rbx</span><br><span class=\"line\">  400efe:       48 83 ec 28             sub    $0x28,%rsp</span><br><span class=\"line\">  400f02:       48 89 e6                mov    %rsp,%rsi</span><br><span class=\"line\">  400f05:       e8 52 05 00 00          callq  40145c &lt;read_six_numbers&gt;</span><br><span class=\"line\">  400f0a:       83 3c 24 01             cmpl   $0x1,(%rsp);和1比较</span><br><span class=\"line\">  400f0e:       74 20                   je     400f30 &lt;phase_2+0x34&gt;</span><br><span class=\"line\">  400f10:       e8 25 05 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400f15:       eb 19                   jmp    400f30 &lt;phase_2+0x34&gt;</span><br><span class=\"line\">  400f17:       8b 43 fc                mov    -0x4(%rbx),%eax;前一个单元的值</span><br><span class=\"line\">  400f1a:       01 c0                   add    %eax,%eax;前一个单元的值*2</span><br><span class=\"line\">  400f1c:       39 03                   cmp    %eax,(%rbx);前一个单元的值*2和当前单元比较</span><br><span class=\"line\">  400f1e:       74 05                   je     400f25 &lt;phase_2+0x29&gt;</span><br><span class=\"line\">  400f20:       e8 15 05 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400f25:       48 83 c3 04             add    $0x4,%rbx</span><br><span class=\"line\">  400f29:       48 39 eb                cmp    %rbp,%rbx</span><br><span class=\"line\">  400f2c:       75 e9                   jne    400f17 &lt;phase_2+0x1b&gt;</span><br><span class=\"line\">  400f2e:       eb 0c                   jmp    400f3c &lt;phase_2+0x40&gt;</span><br><span class=\"line\">  400f30:       48 8d 5c 24 04          lea    0x4(%rsp),%rbx;将%rsp所指单元的上一个单元地址传%rbx</span><br><span class=\"line\">  400f35:       48 8d 6c 24 18          lea    0x18(%rsp),%rbp;将%rsp+24所指单元的地址传%rbx，作为循环结束条件</span><br><span class=\"line\">  400f3a:       eb db                   jmp    400f17 &lt;phase_2+0x1b&gt;</span><br><span class=\"line\">  400f3c:       48 83 c4 28             add    $0x28,%rsp</span><br><span class=\"line\">  400f40:       5b                      pop    %rbx</span><br><span class=\"line\">  400f41:       5d                      pop    %rbp</span><br><span class=\"line\">  400f42:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>read_six_numbers的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">000000000040145c &lt;read_six_numbers&gt;:</span><br><span class=\"line\">  40145c:       48 83 ec 18             sub    $0x18,%rsp</span><br><span class=\"line\">  401460:       48 89 f2                mov    %rsi,%rdx;存的就是phase_2栈帧底部的地址</span><br><span class=\"line\">  401463:       48 8d 4e 04             lea    0x4(%rsi),%rcx;传地址参数到寄存器</span><br><span class=\"line\">  401467:       48 8d 46 14             lea    0x14(%rsi),%rax</span><br><span class=\"line\">  40146b:       48 89 44 24 08          mov    %rax,0x8(%rsp)</span><br><span class=\"line\">  401470:       48 8d 46 10             lea    0x10(%rsi),%rax</span><br><span class=\"line\">  401474:       48 89 04 24             mov    %rax,(%rsp)</span><br><span class=\"line\">  401478:       4c 8d 4e 0c             lea    0xc(%rsi),%r9</span><br><span class=\"line\">  40147c:       4c 8d 46 08             lea    0x8(%rsi),%r8</span><br><span class=\"line\">  401480:       be c3 25 40 00          mov    $0x4025c3,%esi</span><br><span class=\"line\">  401485:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  40148a:       e8 61 f7 ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class=\"line\">  40148f:       83 f8 05                cmp    $0x5,%eax;返回值：读取到的数量</span><br><span class=\"line\">  401492:       7f 05                   jg     401499 &lt;read_six_numbers+0x3d&gt;</span><br><span class=\"line\">  401494:       e8 a1 ff ff ff          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  401499:       48 83 c4 18             add    $0x18,%rsp</span><br><span class=\"line\">  40149d:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>phase_2主要是个循环，read_six_number将phase_2栈帧地址较低处6个int型内存单元的地址传给__isoc99_sscanf@plt，sscanff读取6个数到phase_2栈帧底部的6个单元，并返回读取到的int数量，存到%eax，如果数量小于6，则boom。</p>\n<p>在phase_2的汇编代码中，首先将phase_2栈帧的最低地址单元与常数1相比，如果不等则boom，如果相等，则进行循环：用%rbx记录当前所指单元，将前一个单元的值的两倍和当前单元比较（第一个单元值为1），不相等则boom。当%rbx和%rbp相等时，循环结束。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201007112329.png\" width=\"250px\"> </div>\n<p><strong>答案</strong>是 1 2 4 8 16 32</p>\n<h3 id=\"phase_3\"><a class=\"markdownIt-Anchor\" href=\"#phase_3\"></a> phase_3</h3>\n<p>phase_3的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400f43 &lt;phase_3&gt;:</span><br><span class=\"line\">  400f43:       48 83 ec 18             sub    $0x18,%rsp</span><br><span class=\"line\">  400f47:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx</span><br><span class=\"line\">  400f4c:       48 8d 54 24 08          lea    0x8(%rsp),%rdx</span><br><span class=\"line\">  400f51:       be cf 25 40 00          mov    $0x4025cf,%esi;&quot;%d %d&quot;</span><br><span class=\"line\">  400f56:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  400f5b:       e8 90 fc ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class=\"line\">  400f60:       83 f8 01                cmp    $0x1,%eax</span><br><span class=\"line\">  400f63:       7f 05                   jg     400f6a &lt;phase_3+0x27&gt;</span><br><span class=\"line\">  400f65:       e8 d0 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400f6a:       83 7c 24 08 07          cmpl   $0x7,0x8(%rsp)</span><br><span class=\"line\">  400f6f:       77 3c                   ja     400fad &lt;phase_3+0x6a&gt;</span><br><span class=\"line\">  400f71:       8b 44 24 08             mov    0x8(%rsp),%eax</span><br><span class=\"line\">  400f75:       ff 24 c5 70 24 40 00    jmpq   *0x402470(,%rax,8);跳转表</span><br><span class=\"line\">  400f7c:       b8 cf 00 00 00          mov    $0xcf,%eax</span><br><span class=\"line\">  400f81:       eb 3b                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f83:       b8 c3 02 00 00          mov    $0x2c3,%eax</span><br><span class=\"line\">  400f88:       eb 34                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f8a:       b8 00 01 00 00          mov    $0x100,%eax</span><br><span class=\"line\">  400f8f:       eb 2d                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f91:       b8 85 01 00 00          mov    $0x185,%eax</span><br><span class=\"line\">  400f96:       eb 26                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f98:       b8 ce 00 00 00          mov    $0xce,%eax</span><br><span class=\"line\">  400f9d:       eb 1f                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f9f:       b8 aa 02 00 00          mov    $0x2aa,%eax</span><br><span class=\"line\">  400fa4:       eb 18                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400fa6:       b8 47 01 00 00          mov    $0x147,%eax</span><br><span class=\"line\">  400fab:       eb 11                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400fad:       e8 88 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400fb2:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  400fb7:       eb 05                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400fb9:       b8 37 01 00 00          mov    $0x137,%eax</span><br><span class=\"line\">  400fbe:       3b 44 24 0c             cmp    0xc(%rsp),%eax</span><br><span class=\"line\">  400fc2:       74 05                   je     400fc9 &lt;phase_3+0x86&gt;</span><br><span class=\"line\">  400fc4:       e8 71 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400fc9:       48 83 c4 18             add    $0x18,%rsp</span><br><span class=\"line\">  400fcd:       c3                      retq</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) print (char*) 0x4025cf</span><br><span class=\"line\">$2 &#x3D; 0x4025cf &quot;%d %d&quot;</span><br></pre></td></tr></table></figure>\n<p>phase_3主要内容为switch和跳转表，sscanf读取至少两个数，否则就boom。第一个参数在%rsp+8处，第二个参数在%rsp+12处。第一个参数不能大于7，否则就boom</p>\n<p>0x402470处是跳转表的首地址，可以用gdb打印出跳转表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) print &#x2F;x *0x402470 @16</span><br><span class=\"line\">$1 &#x3D; &#123;0x400f7c, 0x0, 0x400fb9, 0x0, 0x400f83, 0x0, 0x400f8a, 0x0, 0x400f91, 0x0,</span><br><span class=\"line\">  0x400f98, 0x0, 0x400f9f, 0x0, 0x400fa6, 0x0&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出来，%rsp+8中不同的值，也就是%rax中不同的值对应着跳转表中不同的跳转地址，尝试使%rax等于1，则跳转到0x400fb9处指令，则第二个参数%rsp+12需要等于0x137才能使下一条cmp指令相等。</p>\n<p>其中一个<strong>答案</strong>为1 311</p>\n<h3 id=\"phase_4\"><a class=\"markdownIt-Anchor\" href=\"#phase_4\"></a> phase_4</h3>\n<p>phase_4的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">000000000040100c &lt;phase_4&gt;:</span><br><span class=\"line\">  40100c:       48 83 ec 18             sub    $0x18,%rsp</span><br><span class=\"line\">  401010:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx</span><br><span class=\"line\">  401015:       48 8d 54 24 08          lea    0x8(%rsp),%rdx</span><br><span class=\"line\">  40101a:       be cf 25 40 00          mov    $0x4025cf,%esi</span><br><span class=\"line\">  40101f:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  401024:       e8 c7 fb ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class=\"line\">  401029:       83 f8 02                cmp    $0x2,%eax</span><br><span class=\"line\">  40102c:       75 07                   jne    401035 &lt;phase_4+0x29&gt;</span><br><span class=\"line\">  40102e:       83 7c 24 08 0e          cmpl   $0xe,0x8(%rsp)</span><br><span class=\"line\">  401033:       76 05                   jbe    40103a &lt;phase_4+0x2e&gt;</span><br><span class=\"line\">  401035:       e8 00 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  40103a:       ba 0e 00 00 00          mov    $0xe,%edx</span><br><span class=\"line\">  40103f:       be 00 00 00 00          mov    $0x0,%esi</span><br><span class=\"line\">  401044:       8b 7c 24 08             mov    0x8(%rsp),%edi</span><br><span class=\"line\">  401048:       e8 81 ff ff ff          callq  400fce &lt;func4&gt;</span><br><span class=\"line\">  40104d:       85 c0                   test   %eax,%eax</span><br><span class=\"line\">  40104f:       75 07                   jne    401058 &lt;phase_4+0x4c&gt;</span><br><span class=\"line\">  401051:       83 7c 24 0c 00          cmpl   $0x0,0xc(%rsp)</span><br><span class=\"line\">  401056:       74 05                   je     40105d &lt;phase_4+0x51&gt;</span><br><span class=\"line\">  401058:       e8 dd 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  40105d:       48 83 c4 18             add    $0x18,%rsp</span><br><span class=\"line\">  401061:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>func4的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400fce &lt;func4&gt;:</span><br><span class=\"line\">  400fce:       48 83 ec 08             sub    $0x8,%rsp</span><br><span class=\"line\">  400fd2:       89 d0                   mov    %edx,%eax</span><br><span class=\"line\">  400fd4:       29 f0                   sub    %esi,%eax</span><br><span class=\"line\">  400fd6:       89 c1                   mov    %eax,%ecx</span><br><span class=\"line\">  400fd8:       c1 e9 1f                shr    $0x1f,%ecx</span><br><span class=\"line\">  400fdb:       01 c8                   add    %ecx,%eax</span><br><span class=\"line\">  400fdd:       d1 f8                   sar    %eax</span><br><span class=\"line\">  400fdf:       8d 0c 30                lea    (%rax,%rsi,1),%ecx</span><br><span class=\"line\">  400fe2:       39 f9                   cmp    %edi,%ecx</span><br><span class=\"line\">  400fe4:       7e 0c                   jle    400ff2 &lt;func4+0x24&gt;</span><br><span class=\"line\">  400fe6:       8d 51 ff                lea    -0x1(%rcx),%edx</span><br><span class=\"line\">  i00fe9:       e8 e0 ff ff ff          callq  400fce &lt;func4&gt;</span><br><span class=\"line\">  400fee:       01 c0                   add    %eax,%eax</span><br><span class=\"line\">  400ff0:       eb 15                   jmp    401007 &lt;func4+0x39&gt;</span><br><span class=\"line\">  400ff2:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  400ff7:       39 f9                   cmp    %edi,%ecx</span><br><span class=\"line\">  400ff9:       7d 0c                   jge    401007 &lt;func4+0x39&gt;</span><br><span class=\"line\">  400ffb:       8d 71 01                lea    0x1(%rcx),%esi</span><br><span class=\"line\">  400ffe:       e8 cb ff ff ff          callq  400fce &lt;func4&gt;</span><br><span class=\"line\">  401003:       8d 44 00 01             lea    0x1(%rax,%rax,1),%eax</span><br><span class=\"line\">  401007:       48 83 c4 08             add    $0x8,%rsp</span><br><span class=\"line\">  40100b:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>直接尝试写出c源码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func4</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> <span class=\"built_in\">step</span>, <span class=\"keyword\">int</span> limit)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* edi = target; esi = step; edx = limit */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> temp = (limit - <span class=\"built_in\">step</span>) * <span class=\"number\">0.5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mid = temp + <span class=\"built_in\">step</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mid &gt; target) &#123;</span><br><span class=\"line\">    limit = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret1 = func4(target, <span class=\"built_in\">step</span>, limit);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * ret1;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mid &gt;= target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">step</span> = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> ret2 = func4(target, <span class=\"built_in\">step</span>, limit);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"number\">2</span> * ret2 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong> 7 0</p>\n<h3 id=\"phase_5\"><a class=\"markdownIt-Anchor\" href=\"#phase_5\"></a> Phase_5</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000401062 &lt;phase_5&gt;:</span><br><span class=\"line\">  401062:       53                      push   %rbx</span><br><span class=\"line\">  401063:       48 83 ec 20             sub    $0x20,%rsp</span><br><span class=\"line\">  401067:       48 89 fb                mov    %rdi,%rbx</span><br><span class=\"line\">  40106a:       64 48 8b 04 25 28 00    mov    %fs:0x28,%rax</span><br><span class=\"line\">  401071:       00 00</span><br><span class=\"line\">  401073:       48 89 44 24 18          mov    %rax,0x18(%rsp)</span><br><span class=\"line\">  401078:       31 c0                   xor    %eax,%eax</span><br><span class=\"line\">  40107a:       e8 9c 02 00 00          callq  40131b &lt;string_length&gt;</span><br><span class=\"line\">  40107f:       83 f8 06                cmp    $0x6,%eax</span><br><span class=\"line\">  401082:       74 4e                   je     4010d2 &lt;phase_5+0x70&gt;</span><br><span class=\"line\">  401084:       e8 b1 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  401089:       eb 47                   jmp    4010d2 &lt;phase_5+0x70&gt;</span><br><span class=\"line\">  40108b:       0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx</span><br><span class=\"line\">  40108f:       88 0c 24                mov    %cl,(%rsp)</span><br><span class=\"line\">  401092:       48 8b 14 24             mov    (%rsp),%rdx</span><br><span class=\"line\">  401096:       83 e2 0f                and    $0xf,%edx</span><br><span class=\"line\">  401099:       0f b6 92 b0 24 40 00    movzbl 0x4024b0(%rdx),%edx</span><br><span class=\"line\">  4010a0:       88 54 04 10             mov    %dl,0x10(%rsp,%rax,1)</span><br><span class=\"line\">  4010a4:       48 83 c0 01             add    $0x1,%rax</span><br><span class=\"line\">  4010a8:       48 83 f8 06             cmp    $0x6,%rax</span><br><span class=\"line\">  4010ac:       75 dd                   jne    40108b &lt;phase_5+0x29&gt;</span><br><span class=\"line\">  4010ae:       c6 44 24 16 00          movb   $0x0,0x16(%rsp)</span><br><span class=\"line\">  4010b3:       be 5e 24 40 00          mov    $0x40245e,%esi</span><br><span class=\"line\">  4010b8:       48 8d 7c 24 10          lea    0x10(%rsp),%rdi</span><br><span class=\"line\">  4010bd:       e8 76 02 00 00          callq  401338 &lt;strings_not_equal&gt;</span><br><span class=\"line\">  4010c2:       85 c0                   test   %eax,%eax</span><br><span class=\"line\">  4010c4:       74 13                   je     4010d9 &lt;phase_5+0x77&gt;</span><br><span class=\"line\">  4010c6:       e8 6f 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  4010cb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class=\"line\">  4010d0:       eb 07                   jmp    4010d9 &lt;phase_5+0x77&gt;</span><br><span class=\"line\">  4010d2:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  4010d7:       eb b2                   jmp    40108b &lt;phase_5+0x29&gt;</span><br><span class=\"line\">  4010d9:       48 8b 44 24 18          mov    0x18(%rsp),%rax</span><br><span class=\"line\">  4010de:       64 48 33 04 25 28 00    xor    %fs:0x28,%rax</span><br><span class=\"line\">  4010e5:       00 00</span><br><span class=\"line\">  4010e7:       74 05                   je     4010ee &lt;phase_5+0x8c&gt;</span><br><span class=\"line\">  4010e9:       e8 42 fa ff ff          callq  400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class=\"line\">  4010ee:       48 83 c4 20             add    $0x20,%rsp</span><br><span class=\"line\">  4010f2:       5b                      pop    %rbx</span><br><span class=\"line\">  4010f3:       c3                      retq</span><br></pre></td></tr></table></figure>\n"},{"title":"[CSAPP] 机器表示","date":"2020-10-06T08:09:00.000Z","_content":"\n> 记录一些容易忘的...x86-64下...\n\n- 寄存器：程序计数器PC(%rsp) + 整数寄存器(16*64bit) + 条件码寄存器 + 一组向量寄存器\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006162747.png\" width=\"500px\"> </div>\n\n生成1字节和2字节的指令会保持剩下的字节不变；生成4字节数字的指令会把高位4个字节置为0\n\n- 寻址方式\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164718.png\" width=\"500px\"> </div>\n\n- 压栈和出栈指令\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164337.png\" width=\"500px\"> </div>\n\n```assembly\npushq %rbp\n```\n\n等同于\n\n```assembly\nsubq $8,%rsp;栈指针减\nmovq %rbp,(%rsp);store\n```\n\n- lea 加载有效地址\n\n  目的：将有效地址写入到目的操作数，**根本就没有引用内存**\n\n  leaq 7(%rdx,%rdx,4),%rax  如%rdx为x，则将%rax设置为5x+7\n\n- 过程\n  - 传递控制：进入Q时，PC被设置为Q代码的起始地址，返回时，PC设置为P中调用Q后的指令\n  - 传递数据：P必须向Q提供一个或多个参数，Q必须能够向P返回一个值\n  - 分配和释放内存：开始时Q会分配局部空间，返回前必须释放这些空间\n\n- 运行时栈\n  \n  - 通过寄存器传参最多只能6个，超过6个需要P在自己的栈帧里存储好这些参数\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006170142.png\" width=\"500px\"> </div>\n\n- 转移控制\n\n  - call Q\n\n    把返回地址压入栈，并把PC设为Q的起始地址\n\n  - ret\n\n    会从栈中弹出地址A，并把PC设置为返回地址（call指令的下一条）\n\n- 数据传送\n\nx86-64中，可以通过寄存器最多传递6个整型参（例如整数和指针）参数。寄存器的使用是有特殊顺序的，名字取决于数据类型大小\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006171042.png\" width=\"500px\"> </div>\n\n如果参数大于6，则把参数7~n放到栈上，**参数7位于栈顶**。通过栈传递参数时，所有的数据大小都向8对齐\n\n- 栈上的局部存储\n\n  有时候，局部数据必须存放在内存里：\n\n  - 寄存器不足够存放所有的本地数据\n  - 对一个局部变量使用地址运算符'&'，因此必须能够为它产生一个地址\n  - 某些局部变量是数组或结构，因此必须能够通过数组或结构引用被访问到\n\n- 寄存器中的局部存储空间\n  - 被调用者保存寄存器：%rbx,%rbp和%r12~%r15 过程Q保存一个寄存器的值不变，要么就是根本不去改变它，要么就是把原始值压入栈中，改了值，然后在返回之前从栈中弹出旧值\n  - 调用者保存寄存器：其他除了%rsp 过程Q可以随意修改这个寄存器，因为在调用之前保存是P的责任\n\n- 数据对齐\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006214508.png\" width=\"500px\"> </div>","source":"_posts/csapp-labs/csapp-pre-bomblab.md","raw":"---\ntitle: '[CSAPP] 机器表示'\ndate: 2020-10-6 16:09\ntags: \n- CSAPP\ncategories: \n- 编译\n- 汇编\n---\n\n> 记录一些容易忘的...x86-64下...\n\n- 寄存器：程序计数器PC(%rsp) + 整数寄存器(16*64bit) + 条件码寄存器 + 一组向量寄存器\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006162747.png\" width=\"500px\"> </div>\n\n生成1字节和2字节的指令会保持剩下的字节不变；生成4字节数字的指令会把高位4个字节置为0\n\n- 寻址方式\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164718.png\" width=\"500px\"> </div>\n\n- 压栈和出栈指令\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164337.png\" width=\"500px\"> </div>\n\n```assembly\npushq %rbp\n```\n\n等同于\n\n```assembly\nsubq $8,%rsp;栈指针减\nmovq %rbp,(%rsp);store\n```\n\n- lea 加载有效地址\n\n  目的：将有效地址写入到目的操作数，**根本就没有引用内存**\n\n  leaq 7(%rdx,%rdx,4),%rax  如%rdx为x，则将%rax设置为5x+7\n\n- 过程\n  - 传递控制：进入Q时，PC被设置为Q代码的起始地址，返回时，PC设置为P中调用Q后的指令\n  - 传递数据：P必须向Q提供一个或多个参数，Q必须能够向P返回一个值\n  - 分配和释放内存：开始时Q会分配局部空间，返回前必须释放这些空间\n\n- 运行时栈\n  \n  - 通过寄存器传参最多只能6个，超过6个需要P在自己的栈帧里存储好这些参数\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006170142.png\" width=\"500px\"> </div>\n\n- 转移控制\n\n  - call Q\n\n    把返回地址压入栈，并把PC设为Q的起始地址\n\n  - ret\n\n    会从栈中弹出地址A，并把PC设置为返回地址（call指令的下一条）\n\n- 数据传送\n\nx86-64中，可以通过寄存器最多传递6个整型参（例如整数和指针）参数。寄存器的使用是有特殊顺序的，名字取决于数据类型大小\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006171042.png\" width=\"500px\"> </div>\n\n如果参数大于6，则把参数7~n放到栈上，**参数7位于栈顶**。通过栈传递参数时，所有的数据大小都向8对齐\n\n- 栈上的局部存储\n\n  有时候，局部数据必须存放在内存里：\n\n  - 寄存器不足够存放所有的本地数据\n  - 对一个局部变量使用地址运算符'&'，因此必须能够为它产生一个地址\n  - 某些局部变量是数组或结构，因此必须能够通过数组或结构引用被访问到\n\n- 寄存器中的局部存储空间\n  - 被调用者保存寄存器：%rbx,%rbp和%r12~%r15 过程Q保存一个寄存器的值不变，要么就是根本不去改变它，要么就是把原始值压入栈中，改了值，然后在返回之前从栈中弹出旧值\n  - 调用者保存寄存器：其他除了%rsp 过程Q可以随意修改这个寄存器，因为在调用之前保存是P的责任\n\n- 数据对齐\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006214508.png\" width=\"500px\"> </div>","slug":"csapp-labs/csapp-pre-bomblab","published":1,"updated":"2020-10-19T13:04:31.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtuaa00112kwjgsai3g5b","content":"<blockquote>\n<p>记录一些容易忘的…x86-64下…</p>\n</blockquote>\n<ul>\n<li>寄存器：程序计数器PC(%rsp) + 整数寄存器(16*64bit) + 条件码寄存器 + 一组向量寄存器</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006162747.png\" width=\"500px\"> </div>\n<p>生成1字节和2字节的指令会保持剩下的字节不变；生成4字节数字的指令会把高位4个字节置为0</p>\n<ul>\n<li>寻址方式</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164718.png\" width=\"500px\"> </div>\n<ul>\n<li>压栈和出栈指令</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164337.png\" width=\"500px\"> </div>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pushq %rbp</span><br></pre></td></tr></table></figure>\n<p>等同于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">subq $8,%rsp;栈指针减</span><br><span class=\"line\">movq %rbp,(%rsp);store</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>lea 加载有效地址</p>\n<p>目的：将有效地址写入到目的操作数，<strong>根本就没有引用内存</strong></p>\n<p>leaq 7(%rdx,%rdx,4),%rax  如%rdx为x，则将%rax设置为5x+7</p>\n</li>\n<li>\n<p>过程</p>\n<ul>\n<li>传递控制：进入Q时，PC被设置为Q代码的起始地址，返回时，PC设置为P中调用Q后的指令</li>\n<li>传递数据：P必须向Q提供一个或多个参数，Q必须能够向P返回一个值</li>\n<li>分配和释放内存：开始时Q会分配局部空间，返回前必须释放这些空间</li>\n</ul>\n</li>\n<li>\n<p>运行时栈</p>\n<ul>\n<li>通过寄存器传参最多只能6个，超过6个需要P在自己的栈帧里存储好这些参数</li>\n</ul>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006170142.png\" width=\"500px\"> </div>\n<ul>\n<li>\n<p>转移控制</p>\n<ul>\n<li>\n<p>call Q</p>\n<p>把返回地址压入栈，并把PC设为Q的起始地址</p>\n</li>\n<li>\n<p>ret</p>\n<p>会从栈中弹出地址A，并把PC设置为返回地址（call指令的下一条）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>数据传送</p>\n</li>\n</ul>\n<p>x86-64中，可以通过寄存器最多传递6个整型参（例如整数和指针）参数。寄存器的使用是有特殊顺序的，名字取决于数据类型大小</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006171042.png\" width=\"500px\"> </div>\n<p>如果参数大于6，则把参数7~n放到栈上，<strong>参数7位于栈顶</strong>。通过栈传递参数时，所有的数据大小都向8对齐</p>\n<ul>\n<li>\n<p>栈上的局部存储</p>\n<p>有时候，局部数据必须存放在内存里：</p>\n<ul>\n<li>寄存器不足够存放所有的本地数据</li>\n<li>对一个局部变量使用地址运算符’&amp;’，因此必须能够为它产生一个地址</li>\n<li>某些局部变量是数组或结构，因此必须能够通过数组或结构引用被访问到</li>\n</ul>\n</li>\n<li>\n<p>寄存器中的局部存储空间</p>\n<ul>\n<li>被调用者保存寄存器：%rbx,%rbp和%r12~%r15 过程Q保存一个寄存器的值不变，要么就是根本不去改变它，要么就是把原始值压入栈中，改了值，然后在返回之前从栈中弹出旧值</li>\n<li>调用者保存寄存器：其他除了%rsp 过程Q可以随意修改这个寄存器，因为在调用之前保存是P的责任</li>\n</ul>\n</li>\n<li>\n<p>数据对齐</p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006214508.png\" width=\"500px\"> </div>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<blockquote>\n<p>记录一些容易忘的…x86-64下…</p>\n</blockquote>\n<ul>\n<li>寄存器：程序计数器PC(%rsp) + 整数寄存器(16*64bit) + 条件码寄存器 + 一组向量寄存器</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006162747.png\" width=\"500px\"> </div>\n<p>生成1字节和2字节的指令会保持剩下的字节不变；生成4字节数字的指令会把高位4个字节置为0</p>\n<ul>\n<li>寻址方式</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164718.png\" width=\"500px\"> </div>\n<ul>\n<li>压栈和出栈指令</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164337.png\" width=\"500px\"> </div>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pushq %rbp</span><br></pre></td></tr></table></figure>\n<p>等同于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">subq $8,%rsp;栈指针减</span><br><span class=\"line\">movq %rbp,(%rsp);store</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>lea 加载有效地址</p>\n<p>目的：将有效地址写入到目的操作数，<strong>根本就没有引用内存</strong></p>\n<p>leaq 7(%rdx,%rdx,4),%rax  如%rdx为x，则将%rax设置为5x+7</p>\n</li>\n<li>\n<p>过程</p>\n<ul>\n<li>传递控制：进入Q时，PC被设置为Q代码的起始地址，返回时，PC设置为P中调用Q后的指令</li>\n<li>传递数据：P必须向Q提供一个或多个参数，Q必须能够向P返回一个值</li>\n<li>分配和释放内存：开始时Q会分配局部空间，返回前必须释放这些空间</li>\n</ul>\n</li>\n<li>\n<p>运行时栈</p>\n<ul>\n<li>通过寄存器传参最多只能6个，超过6个需要P在自己的栈帧里存储好这些参数</li>\n</ul>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006170142.png\" width=\"500px\"> </div>\n<ul>\n<li>\n<p>转移控制</p>\n<ul>\n<li>\n<p>call Q</p>\n<p>把返回地址压入栈，并把PC设为Q的起始地址</p>\n</li>\n<li>\n<p>ret</p>\n<p>会从栈中弹出地址A，并把PC设置为返回地址（call指令的下一条）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>数据传送</p>\n</li>\n</ul>\n<p>x86-64中，可以通过寄存器最多传递6个整型参（例如整数和指针）参数。寄存器的使用是有特殊顺序的，名字取决于数据类型大小</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006171042.png\" width=\"500px\"> </div>\n<p>如果参数大于6，则把参数7~n放到栈上，<strong>参数7位于栈顶</strong>。通过栈传递参数时，所有的数据大小都向8对齐</p>\n<ul>\n<li>\n<p>栈上的局部存储</p>\n<p>有时候，局部数据必须存放在内存里：</p>\n<ul>\n<li>寄存器不足够存放所有的本地数据</li>\n<li>对一个局部变量使用地址运算符’&amp;’，因此必须能够为它产生一个地址</li>\n<li>某些局部变量是数组或结构，因此必须能够通过数组或结构引用被访问到</li>\n</ul>\n</li>\n<li>\n<p>寄存器中的局部存储空间</p>\n<ul>\n<li>被调用者保存寄存器：%rbx,%rbp和%r12~%r15 过程Q保存一个寄存器的值不变，要么就是根本不去改变它，要么就是把原始值压入栈中，改了值，然后在返回之前从栈中弹出旧值</li>\n<li>调用者保存寄存器：其他除了%rsp 过程Q可以随意修改这个寄存器，因为在调用之前保存是P的责任</li>\n</ul>\n</li>\n<li>\n<p>数据对齐</p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006214508.png\" width=\"500px\"> </div>"},{"title":"[LeetCode] 双指针","date":"2020-12-06T09:05:00.000Z","_content":"\n## 双指针\n\n#### Leetcode 19 [删除链表的倒数第N个节点](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/)\n\n> 给定一个链表，删除链表的倒数第 *n* 个节点，并且返回链表的头结点。\n\n```c++\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode(0, head);\n        stack<ListNode*> stk;\n        ListNode* cur = dummy;\n        while (cur) {\n            stk.push(cur);\n            cur = cur->next;\n        }\n        for (int i = 0; i < n; ++i) {\n            stk.pop();\n        }\n        ListNode* prev = stk.top();\n        prev->next = prev->next->next;\n        ListNode* ans = dummy->next;\n        delete dummy;\n        return ans;\n    }\n};\n```\n\n","source":"_posts/leetcode/lc-double-pointer.md","raw":"---\ntitle: '[LeetCode] 双指针'\ndate: 2020-12-6 17:05\ntags:\n- 双指针\n- LeetCode\ncategories:\n- 算法\n---\n\n## 双指针\n\n#### Leetcode 19 [删除链表的倒数第N个节点](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/)\n\n> 给定一个链表，删除链表的倒数第 *n* 个节点，并且返回链表的头结点。\n\n```c++\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode* dummy = new ListNode(0, head);\n        stack<ListNode*> stk;\n        ListNode* cur = dummy;\n        while (cur) {\n            stk.push(cur);\n            cur = cur->next;\n        }\n        for (int i = 0; i < n; ++i) {\n            stk.pop();\n        }\n        ListNode* prev = stk.top();\n        prev->next = prev->next->next;\n        ListNode* ans = dummy->next;\n        delete dummy;\n        return ans;\n    }\n};\n```\n\n","slug":"leetcode/lc-double-pointer","published":1,"updated":"2020-12-06T09:10:35.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtuab00142kwjdrryadaw","content":"<h2 id=\"双指针\"><a class=\"markdownIt-Anchor\" href=\"#双指针\"></a> 双指针</h2>\n<h4 id=\"leetcode-19-删除链表的倒数第n个节点\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-19-删除链表的倒数第n个节点\"></a> Leetcode 19 <a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/\" target=\"_blank\" rel=\"noopener\">删除链表的倒数第N个节点</a></h4>\n<blockquote>\n<p>给定一个链表，删除链表的倒数第 <em>n</em> 个节点，并且返回链表的头结点。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode* head, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>, head);</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>&lt;ListNode*&gt; stk;</span><br><span class=\"line\">        ListNode* cur = dummy;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur) &#123;</span><br><span class=\"line\">            stk.push(cur);</span><br><span class=\"line\">            cur = cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            stk.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode* prev = stk.top();</span><br><span class=\"line\">        prev-&gt;next = prev-&gt;next-&gt;next;</span><br><span class=\"line\">        ListNode* ans = dummy-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> dummy;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"双指针\"><a class=\"markdownIt-Anchor\" href=\"#双指针\"></a> 双指针</h2>\n<h4 id=\"leetcode-19-删除链表的倒数第n个节点\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-19-删除链表的倒数第n个节点\"></a> Leetcode 19 <a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/\" target=\"_blank\" rel=\"noopener\">删除链表的倒数第N个节点</a></h4>\n<blockquote>\n<p>给定一个链表，删除链表的倒数第 <em>n</em> 个节点，并且返回链表的头结点。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode* head, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        ListNode* dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>, head);</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>&lt;ListNode*&gt; stk;</span><br><span class=\"line\">        ListNode* cur = dummy;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur) &#123;</span><br><span class=\"line\">            stk.push(cur);</span><br><span class=\"line\">            cur = cur-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            stk.pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode* prev = stk.top();</span><br><span class=\"line\">        prev-&gt;next = prev-&gt;next-&gt;next;</span><br><span class=\"line\">        ListNode* ans = dummy-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> dummy;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"[LeetCode] 动态规划","date":"2020-12-06T09:07:00.000Z","_content":"\n## 动态规划\n\n用一个dp数组来保存以$a_i$为结尾的一个子序列的某种性质，再用一个全局变量记录其中的最值。\n\n#### Leetcode 53 [最大子序和](https://leetcode-cn.com/problems/maximum-subarray/)\n\n> 给定一个整数数组 `nums` ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n```c++\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int pre = 0, maxAns = nums[0];\n        for (const auto &x: nums) {\n            pre = max(pre + x, x);\n            maxAns = max(maxAns, pre);\n        }\n        return maxAns;\n    }\n}\n```\n\n#### Leetcode 91 [解码方法](https://leetcode-cn.com/problems/decode-ways/)\n\n> 一条包含字母 A-Z 的消息通过以下方式进行了编码：\n>\n> ```bash\n> 'A' -> 1\n> 'B' -> 2\n> ...\n> 'Z' -> 26\n> ```\n>\n>\n> 给定一个只包含数字的非空字符串，请计算解码方法的总数。\n>\n> 题目数据保证答案肯定是一个 32 位的整数。\n>\n\n```c++\nclass Solution {\npublic:\n    int check(char a){\n        return a!='0';\n    }\n    int func(char a,char b){\n        return a=='1'||a=='2'&&b<='6';\n    }\n    int numDecodings(string s){\n        int len=s.length();\n        vector<int> dp(len,0);\n        if(len==0||s[0]=='0')\n            return 0;\n        if(len==1)\n            return check(s[0]);\n        dp[0]=1;\n        dp[1]=check(s[1])+func(s[0],s[1]);\n        for(int i=2;i<len;i++){\n            if(check(s[i]))\n                dp[i]=dp[i-1];\n            if(func(s[i-1],s[i]))\n                dp[i]+=dp[i-2];\n        }\n        return dp[len-1];\n    }\n};\n```\n\n#### Leetcode 121 [买卖股票的最佳时机](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/)\n\n> 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。\n>\n> 如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。\n>\n> 注意：你不能在买入股票前卖出股票。\n>\n\n```c++\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int len=prices.size();\n        if(len==0||len==1) return 0;\n        if(len==2){\n            if(prices[1]>prices[0])return prices[1]-prices[0];\n            else return 0;\n        }\n        for(int i=0;i<len-1;i++){\n            prices[i]=prices[i+1]-prices[i];\n        }\n        prices.pop_back();\n        int pre=0;\n        int max_sum=prices[0];\n        for(const int& i:prices){\n            pre=max(i,pre+i);\n            max_sum=max(pre,max_sum);\n        }\n        if(max_sum>0)return max_sum;\n        else return 0;\n    }\n};\n```\n\n#### Leetcode 139 [单词拆分](https://leetcode-cn.com/problems/word-break/)\n\n> 给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。\n>\n> 说明：\n>\n> 拆分时可以重复使用字典中的单词。\n> 你可以假设字典中没有重复的单词。\n\n```c++\nclass Solution {\npublic:\n    bool wordBreak(string s, vector<string>& wordDict) {\n        unordered_set<string> set;\n        for(auto word:wordDict)\n        {\n            set.insert(word);\n        }\n\n        vector<bool> dp(s.size()+1);\n        dp[0]=true;//空字符串合法\n        for(int i=1;i<=s.size();i++)\n        {\n            for(int j=0;j<i;j++)\n            {\n                if(dp[j]&&set.find(s.substr(j,i-j))!=set.end())\n                {\n                    dp[i]=true;\n                    break;\n                }\n            }\n        }\n        return dp[s.size()];\n    }\n};\n```\n\n#### Leetcode 152 [乘积最大子数组](https://leetcode-cn.com/problems/maximum-product-subarray/)\n\n> 给你一个整数数组 `nums` ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。\n\n```c++\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        if(nums.size()==0) return 0;\n        int result=nums[0],maxValue=nums[0],minValue=nums[0];\n        for(int i=1;i<nums.size();i++){\n            int tempMax=max(nums[i],maxValue*nums[i]);\n            int tempMin=min(nums[i],maxValue*nums[i]);\n            maxValue=max(tempMax,minValue*nums[i]);\n            minValue=min(tempMin,minValue*nums[i]);\n            result=max(maxValue,result);\n        }\n        return result;\n    }\n};//因为是乘法，和最大最小值有关，所以用两个dp数组\n```\n\n#### 198 [打家劫舍](https://leetcode-cn.com/problems/house-robber/)\n\n> 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n>\n> 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。\n>\n>  ```bash\n> 示例 1：\n> \n> 输入：[1,2,3,1]\n> 输出：4\n> 解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n>      偷窃到的最高金额 = 1 + 3 = 4 。\n>  ```\n\n```c++\nclass Solution {\npublic:\n    int rob(vector<int>& nums) {\n        if(nums.empty())\n        {\n            return 0;\n        }\n        int size=nums.size();\n        if(size==1)\n        {\n            return nums[0];\n        }\n        vector<int> dp(size,0);\n        dp[0]=nums[0];\n        dp[1]=max(nums[0],nums[1]);\n        for(int i=2;i<size;i++)\n        {\n            dp[i]=max(dp[i-2]+nums[i],dp[i-1]);\n        }\n        return dp[size-1];\n    }\n};\n```\n\n#### Leetcode 264 [丑数 II](https://leetcode-cn.com/problems/ugly-number-ii/)\n\n> 编写一个程序，找出第 n 个丑数。\n>\n> 丑数就是质因数只包含 2, 3, 5 的正整数。\n>\n> ```bash\n> 示例:\n> \n> 输入: n = 10\n> 输出: 12\n> 解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。\n> ```\n\n```c++\nclass Solution {\npublic:\n    int nthUglyNumber(int n) {\n        if(n<=0)return 0;\n        if(n==1)return 1;\n        int p2=0,p3=0,p5=0;\n        int nums[1691];\n        nums[0]=1;\n        for(int i=1;i<n;i++)\n        {\n             int ugly=min(nums[p2]*2,min(nums[p3]*3,nums[p5]*5));\n             nums[i]=ugly;\n             if(ugly==nums[p2]*2) p2++;\n             if(ugly==nums[p3]*3) p3++;\n             if(ugly==nums[p5]*5) p5++;\n        }\n        return nums[n-1];\n    }\n};\n```\n\n#### Leetcode 300 [最长上升子序列](https://leetcode-cn.com/problems/longest-increasing-subsequence/)\n\n> 给定一个无序的整数数组，找到其中最长上升子序列的长度。\n\n```c++\nclass Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        if(nums.size()==0)\n        {\n            return 0;\n        }\n        int length=nums.size();\n        int maxAns=0;\n        vector<int> dp(length,0);\n        for(int i=0;i<length;i++)\n        {\n            dp[i]=1;\n            for(int j=0;j<i;j++)\n            {\n                if(nums[j]<nums[i])\n                {\n                    dp[i]=max(dp[i],dp[j]+1); \n                }\n            }\n            maxAns=max(maxAns,dp[i]);\n        }\n        return maxAns;\n    }\n};\n```\n\n#### Leetcode 1143 [最长公共子序列](https://leetcode-cn.com/problems/longest-common-subsequence/) (二维DP)\n\n> 给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。\n>\n> 一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。\n> 例如，\"ace\" 是 \"abcde\" 的子序列，但 \"aec\" 不是 \"abcde\" 的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。\n>\n> 若这两个字符串没有公共子序列，则返回 0。\n>\n\n```c++\nclass Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n        int len1=text1.size();\n        int len2=text2.size();\n        if(len1==0||len2==0) return 0;\n        int dp[len1+1][len2+1];\n        memset(dp,0,sizeof(dp));\n\n        for(int i=1;i<=len1;i++)\n        {\n            for(int j=1;j<=len2;j++)\n            {\n                if(text1[i-1]==text2[j-1])\n                {\n                    dp[i][j]=dp[i-1][j-1]+1;\n                }\n                else{\n                    dp[i][j]=max(dp[i][j-1],dp[i-1][j]);\n                }\n            }\n        }    \n        return dp[len1][len2];\n    }\n};\n```\n\n","source":"_posts/leetcode/lc-dp.md","raw":"---\ntitle: '[LeetCode] 动态规划'\ndate: 2020-12-6 17:07\ntags:\n- 动态规划\n- LeetCode\ncategories:\n- 算法\n---\n\n## 动态规划\n\n用一个dp数组来保存以$a_i$为结尾的一个子序列的某种性质，再用一个全局变量记录其中的最值。\n\n#### Leetcode 53 [最大子序和](https://leetcode-cn.com/problems/maximum-subarray/)\n\n> 给定一个整数数组 `nums` ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n```c++\nclass Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int pre = 0, maxAns = nums[0];\n        for (const auto &x: nums) {\n            pre = max(pre + x, x);\n            maxAns = max(maxAns, pre);\n        }\n        return maxAns;\n    }\n}\n```\n\n#### Leetcode 91 [解码方法](https://leetcode-cn.com/problems/decode-ways/)\n\n> 一条包含字母 A-Z 的消息通过以下方式进行了编码：\n>\n> ```bash\n> 'A' -> 1\n> 'B' -> 2\n> ...\n> 'Z' -> 26\n> ```\n>\n>\n> 给定一个只包含数字的非空字符串，请计算解码方法的总数。\n>\n> 题目数据保证答案肯定是一个 32 位的整数。\n>\n\n```c++\nclass Solution {\npublic:\n    int check(char a){\n        return a!='0';\n    }\n    int func(char a,char b){\n        return a=='1'||a=='2'&&b<='6';\n    }\n    int numDecodings(string s){\n        int len=s.length();\n        vector<int> dp(len,0);\n        if(len==0||s[0]=='0')\n            return 0;\n        if(len==1)\n            return check(s[0]);\n        dp[0]=1;\n        dp[1]=check(s[1])+func(s[0],s[1]);\n        for(int i=2;i<len;i++){\n            if(check(s[i]))\n                dp[i]=dp[i-1];\n            if(func(s[i-1],s[i]))\n                dp[i]+=dp[i-2];\n        }\n        return dp[len-1];\n    }\n};\n```\n\n#### Leetcode 121 [买卖股票的最佳时机](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/)\n\n> 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。\n>\n> 如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。\n>\n> 注意：你不能在买入股票前卖出股票。\n>\n\n```c++\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int len=prices.size();\n        if(len==0||len==1) return 0;\n        if(len==2){\n            if(prices[1]>prices[0])return prices[1]-prices[0];\n            else return 0;\n        }\n        for(int i=0;i<len-1;i++){\n            prices[i]=prices[i+1]-prices[i];\n        }\n        prices.pop_back();\n        int pre=0;\n        int max_sum=prices[0];\n        for(const int& i:prices){\n            pre=max(i,pre+i);\n            max_sum=max(pre,max_sum);\n        }\n        if(max_sum>0)return max_sum;\n        else return 0;\n    }\n};\n```\n\n#### Leetcode 139 [单词拆分](https://leetcode-cn.com/problems/word-break/)\n\n> 给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。\n>\n> 说明：\n>\n> 拆分时可以重复使用字典中的单词。\n> 你可以假设字典中没有重复的单词。\n\n```c++\nclass Solution {\npublic:\n    bool wordBreak(string s, vector<string>& wordDict) {\n        unordered_set<string> set;\n        for(auto word:wordDict)\n        {\n            set.insert(word);\n        }\n\n        vector<bool> dp(s.size()+1);\n        dp[0]=true;//空字符串合法\n        for(int i=1;i<=s.size();i++)\n        {\n            for(int j=0;j<i;j++)\n            {\n                if(dp[j]&&set.find(s.substr(j,i-j))!=set.end())\n                {\n                    dp[i]=true;\n                    break;\n                }\n            }\n        }\n        return dp[s.size()];\n    }\n};\n```\n\n#### Leetcode 152 [乘积最大子数组](https://leetcode-cn.com/problems/maximum-product-subarray/)\n\n> 给你一个整数数组 `nums` ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。\n\n```c++\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        if(nums.size()==0) return 0;\n        int result=nums[0],maxValue=nums[0],minValue=nums[0];\n        for(int i=1;i<nums.size();i++){\n            int tempMax=max(nums[i],maxValue*nums[i]);\n            int tempMin=min(nums[i],maxValue*nums[i]);\n            maxValue=max(tempMax,minValue*nums[i]);\n            minValue=min(tempMin,minValue*nums[i]);\n            result=max(maxValue,result);\n        }\n        return result;\n    }\n};//因为是乘法，和最大最小值有关，所以用两个dp数组\n```\n\n#### 198 [打家劫舍](https://leetcode-cn.com/problems/house-robber/)\n\n> 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n>\n> 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。\n>\n>  ```bash\n> 示例 1：\n> \n> 输入：[1,2,3,1]\n> 输出：4\n> 解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n>      偷窃到的最高金额 = 1 + 3 = 4 。\n>  ```\n\n```c++\nclass Solution {\npublic:\n    int rob(vector<int>& nums) {\n        if(nums.empty())\n        {\n            return 0;\n        }\n        int size=nums.size();\n        if(size==1)\n        {\n            return nums[0];\n        }\n        vector<int> dp(size,0);\n        dp[0]=nums[0];\n        dp[1]=max(nums[0],nums[1]);\n        for(int i=2;i<size;i++)\n        {\n            dp[i]=max(dp[i-2]+nums[i],dp[i-1]);\n        }\n        return dp[size-1];\n    }\n};\n```\n\n#### Leetcode 264 [丑数 II](https://leetcode-cn.com/problems/ugly-number-ii/)\n\n> 编写一个程序，找出第 n 个丑数。\n>\n> 丑数就是质因数只包含 2, 3, 5 的正整数。\n>\n> ```bash\n> 示例:\n> \n> 输入: n = 10\n> 输出: 12\n> 解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。\n> ```\n\n```c++\nclass Solution {\npublic:\n    int nthUglyNumber(int n) {\n        if(n<=0)return 0;\n        if(n==1)return 1;\n        int p2=0,p3=0,p5=0;\n        int nums[1691];\n        nums[0]=1;\n        for(int i=1;i<n;i++)\n        {\n             int ugly=min(nums[p2]*2,min(nums[p3]*3,nums[p5]*5));\n             nums[i]=ugly;\n             if(ugly==nums[p2]*2) p2++;\n             if(ugly==nums[p3]*3) p3++;\n             if(ugly==nums[p5]*5) p5++;\n        }\n        return nums[n-1];\n    }\n};\n```\n\n#### Leetcode 300 [最长上升子序列](https://leetcode-cn.com/problems/longest-increasing-subsequence/)\n\n> 给定一个无序的整数数组，找到其中最长上升子序列的长度。\n\n```c++\nclass Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        if(nums.size()==0)\n        {\n            return 0;\n        }\n        int length=nums.size();\n        int maxAns=0;\n        vector<int> dp(length,0);\n        for(int i=0;i<length;i++)\n        {\n            dp[i]=1;\n            for(int j=0;j<i;j++)\n            {\n                if(nums[j]<nums[i])\n                {\n                    dp[i]=max(dp[i],dp[j]+1); \n                }\n            }\n            maxAns=max(maxAns,dp[i]);\n        }\n        return maxAns;\n    }\n};\n```\n\n#### Leetcode 1143 [最长公共子序列](https://leetcode-cn.com/problems/longest-common-subsequence/) (二维DP)\n\n> 给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。\n>\n> 一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。\n> 例如，\"ace\" 是 \"abcde\" 的子序列，但 \"aec\" 不是 \"abcde\" 的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。\n>\n> 若这两个字符串没有公共子序列，则返回 0。\n>\n\n```c++\nclass Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n        int len1=text1.size();\n        int len2=text2.size();\n        if(len1==0||len2==0) return 0;\n        int dp[len1+1][len2+1];\n        memset(dp,0,sizeof(dp));\n\n        for(int i=1;i<=len1;i++)\n        {\n            for(int j=1;j<=len2;j++)\n            {\n                if(text1[i-1]==text2[j-1])\n                {\n                    dp[i][j]=dp[i-1][j-1]+1;\n                }\n                else{\n                    dp[i][j]=max(dp[i][j-1],dp[i-1][j]);\n                }\n            }\n        }    \n        return dp[len1][len2];\n    }\n};\n```\n\n","slug":"leetcode/lc-dp","published":1,"updated":"2020-12-06T09:10:22.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtuae00192kwjbzz023x3","content":"<h2 id=\"动态规划\"><a class=\"markdownIt-Anchor\" href=\"#动态规划\"></a> 动态规划</h2>\n<p>用一个dp数组来保存以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为结尾的一个子序列的某种性质，再用一个全局变量记录其中的最值。</p>\n<h4 id=\"leetcode-53-最大子序和\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-53-最大子序和\"></a> Leetcode 53 <a href=\"https://leetcode-cn.com/problems/maximum-subarray/\" target=\"_blank\" rel=\"noopener\">最大子序和</a></h4>\n<blockquote>\n<p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pre = <span class=\"number\">0</span>, maxAns = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp;x: nums) &#123;</span><br><span class=\"line\">            pre = <span class=\"built_in\">max</span>(pre + x, x);</span><br><span class=\"line\">            maxAns = <span class=\"built_in\">max</span>(maxAns, pre);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxAns;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-91-解码方法\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-91-解码方法\"></a> Leetcode 91 <a href=\"https://leetcode-cn.com/problems/decode-ways/\" target=\"_blank\" rel=\"noopener\">解码方法</a></h4>\n<blockquote>\n<p>一条包含字母 A-Z 的消息通过以下方式进行了编码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'A'</span> -&gt; 1</span><br><span class=\"line\"><span class=\"string\">'B'</span> -&gt; 2</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"string\">'Z'</span> -&gt; 26</span><br></pre></td></tr></table></figure>\n<p>给定一个只包含数字的非空字符串，请计算解码方法的总数。</p>\n<p>题目数据保证答案肯定是一个 32 位的整数。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">char</span> a)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a!=<span class=\"string\">'0'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">char</span> a,<span class=\"keyword\">char</span> b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a==<span class=\"string\">'1'</span>||a==<span class=\"string\">'2'</span>&amp;&amp;b&lt;=<span class=\"string\">'6'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numDecodings</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len=s.length();</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(len,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len==<span class=\"number\">0</span>||s[<span class=\"number\">0</span>]==<span class=\"string\">'0'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len==<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> check(s[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>]=check(s[<span class=\"number\">1</span>])+func(s[<span class=\"number\">0</span>],s[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(check(s[i]))</span><br><span class=\"line\">                dp[i]=dp[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(func(s[i<span class=\"number\">-1</span>],s[i]))</span><br><span class=\"line\">                dp[i]+=dp[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[len<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-121-买卖股票的最佳时机\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-121-买卖股票的最佳时机\"></a> Leetcode 121 <a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/\" target=\"_blank\" rel=\"noopener\">买卖股票的最佳时机</a></h4>\n<blockquote>\n<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>\n<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</p>\n<p>注意：你不能在买入股票前卖出股票。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len=prices.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len==<span class=\"number\">0</span>||len==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(prices[<span class=\"number\">1</span>]&gt;prices[<span class=\"number\">0</span>])<span class=\"keyword\">return</span> prices[<span class=\"number\">1</span>]-prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">            prices[i]=prices[i+<span class=\"number\">1</span>]-prices[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prices.pop_back();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pre=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max_sum=prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; i:prices)&#123;</span><br><span class=\"line\">            pre=<span class=\"built_in\">max</span>(i,pre+i);</span><br><span class=\"line\">            max_sum=<span class=\"built_in\">max</span>(pre,max_sum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(max_sum&gt;<span class=\"number\">0</span>)<span class=\"keyword\">return</span> max_sum;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-139-单词拆分\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-139-单词拆分\"></a> Leetcode 139 <a href=\"https://leetcode-cn.com/problems/word-break/\" target=\"_blank\" rel=\"noopener\">单词拆分</a></h4>\n<blockquote>\n<p>给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。</p>\n<p>说明：</p>\n<p>拆分时可以重复使用字典中的单词。<br />\n你可以假设字典中没有重复的单词。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">wordBreak</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">unordered_set</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"built_in\">set</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> <span class=\"keyword\">word</span>:wordDict)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">set</span>.insert(<span class=\"keyword\">word</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(s.<span class=\"built_in\">size</span>()+<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=<span class=\"literal\">true</span>;<span class=\"comment\">//空字符串合法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=s.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dp[j]&amp;&amp;<span class=\"built_in\">set</span>.<span class=\"built_in\">find</span>(s.substr(j,i-j))!=<span class=\"built_in\">set</span>.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dp[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[s.<span class=\"built_in\">size</span>()];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-152-乘积最大子数组\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-152-乘积最大子数组\"></a> Leetcode 152 <a href=\"https://leetcode-cn.com/problems/maximum-product-subarray/\" target=\"_blank\" rel=\"noopener\">乘积最大子数组</a></h4>\n<blockquote>\n<p>给你一个整数数组 <code>nums</code> ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProduct</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.<span class=\"built_in\">size</span>()==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result=nums[<span class=\"number\">0</span>],maxValue=nums[<span class=\"number\">0</span>],minValue=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tempMax=<span class=\"built_in\">max</span>(nums[i],maxValue*nums[i]);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tempMin=<span class=\"built_in\">min</span>(nums[i],maxValue*nums[i]);</span><br><span class=\"line\">            maxValue=<span class=\"built_in\">max</span>(tempMax,minValue*nums[i]);</span><br><span class=\"line\">            minValue=<span class=\"built_in\">min</span>(tempMin,minValue*nums[i]);</span><br><span class=\"line\">            result=<span class=\"built_in\">max</span>(maxValue,result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;<span class=\"comment\">//因为是乘法，和最大最小值有关，所以用两个dp数组</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"198-打家劫舍\"><a class=\"markdownIt-Anchor\" href=\"#198-打家劫舍\"></a> 198 <a href=\"https://leetcode-cn.com/problems/house-robber/\" target=\"_blank\" rel=\"noopener\">打家劫舍</a></h4>\n<blockquote>\n<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例 1：</span><br><span class=\"line\"></span><br><span class=\"line\">输入：[1,2,3,1]</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class=\"line\">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rob</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.empty())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">size</span>==<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(<span class=\"built_in\">size</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>]=<span class=\"built_in\">max</span>(nums[<span class=\"number\">0</span>],nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;<span class=\"built_in\">size</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dp[i]=<span class=\"built_in\">max</span>(dp[i<span class=\"number\">-2</span>]+nums[i],dp[i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"built_in\">size</span><span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-264-丑数-ii\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-264-丑数-ii\"></a> Leetcode 264 <a href=\"https://leetcode-cn.com/problems/ugly-number-ii/\" target=\"_blank\" rel=\"noopener\">丑数 II</a></h4>\n<blockquote>\n<p>编写一个程序，找出第 n 个丑数。</p>\n<p>丑数就是质因数只包含 2, 3, 5 的正整数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: n = 10</span><br><span class=\"line\">输出: 12</span><br><span class=\"line\">解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">nthUglyNumber</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&lt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p2=<span class=\"number\">0</span>,p3=<span class=\"number\">0</span>,p5=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nums[<span class=\"number\">1691</span>];</span><br><span class=\"line\">        nums[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">             <span class=\"keyword\">int</span> ugly=<span class=\"built_in\">min</span>(nums[p2]*<span class=\"number\">2</span>,<span class=\"built_in\">min</span>(nums[p3]*<span class=\"number\">3</span>,nums[p5]*<span class=\"number\">5</span>));</span><br><span class=\"line\">             nums[i]=ugly;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(ugly==nums[p2]*<span class=\"number\">2</span>) p2++;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(ugly==nums[p3]*<span class=\"number\">3</span>) p3++;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(ugly==nums[p5]*<span class=\"number\">5</span>) p5++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-300-最长上升子序列\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-300-最长上升子序列\"></a> Leetcode 300 <a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/\" target=\"_blank\" rel=\"noopener\">最长上升子序列</a></h4>\n<blockquote>\n<p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lengthOfLIS</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.<span class=\"built_in\">size</span>()==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxAns=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(length,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;length;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dp[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[j]&lt;nums[i])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dp[i]=<span class=\"built_in\">max</span>(dp[i],dp[j]+<span class=\"number\">1</span>); </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            maxAns=<span class=\"built_in\">max</span>(maxAns,dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxAns;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-1143-最长公共子序列-二维dp\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-1143-最长公共子序列-二维dp\"></a> Leetcode 1143 <a href=\"https://leetcode-cn.com/problems/longest-common-subsequence/\" target=\"_blank\" rel=\"noopener\">最长公共子序列</a> (二维DP)</h4>\n<blockquote>\n<p>给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。</p>\n<p>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。<br />\n例如，“ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。</p>\n<p>若这两个字符串没有公共子序列，则返回 0。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">longestCommonSubsequence</span><span class=\"params\">(<span class=\"built_in\">string</span> text1, <span class=\"built_in\">string</span> text2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len1=text1.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len2=text2.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len1==<span class=\"number\">0</span>||len2==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dp[len1+<span class=\"number\">1</span>][len2+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dp));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=len1;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=len2;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(text1[i<span class=\"number\">-1</span>]==text2[j<span class=\"number\">-1</span>])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dp[i][j]=dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i][j]=<span class=\"built_in\">max</span>(dp[i][j<span class=\"number\">-1</span>],dp[i<span class=\"number\">-1</span>][j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[len1][len2];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"动态规划\"><a class=\"markdownIt-Anchor\" href=\"#动态规划\"></a> 动态规划</h2>\n<p>用一个dp数组来保存以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为结尾的一个子序列的某种性质，再用一个全局变量记录其中的最值。</p>\n<h4 id=\"leetcode-53-最大子序和\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-53-最大子序和\"></a> Leetcode 53 <a href=\"https://leetcode-cn.com/problems/maximum-subarray/\" target=\"_blank\" rel=\"noopener\">最大子序和</a></h4>\n<blockquote>\n<p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pre = <span class=\"number\">0</span>, maxAns = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> &amp;x: nums) &#123;</span><br><span class=\"line\">            pre = <span class=\"built_in\">max</span>(pre + x, x);</span><br><span class=\"line\">            maxAns = <span class=\"built_in\">max</span>(maxAns, pre);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxAns;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-91-解码方法\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-91-解码方法\"></a> Leetcode 91 <a href=\"https://leetcode-cn.com/problems/decode-ways/\" target=\"_blank\" rel=\"noopener\">解码方法</a></h4>\n<blockquote>\n<p>一条包含字母 A-Z 的消息通过以下方式进行了编码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'A'</span> -&gt; 1</span><br><span class=\"line\"><span class=\"string\">'B'</span> -&gt; 2</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"string\">'Z'</span> -&gt; 26</span><br></pre></td></tr></table></figure>\n<p>给定一个只包含数字的非空字符串，请计算解码方法的总数。</p>\n<p>题目数据保证答案肯定是一个 32 位的整数。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">char</span> a)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a!=<span class=\"string\">'0'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">char</span> a,<span class=\"keyword\">char</span> b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a==<span class=\"string\">'1'</span>||a==<span class=\"string\">'2'</span>&amp;&amp;b&lt;=<span class=\"string\">'6'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">numDecodings</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len=s.length();</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(len,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len==<span class=\"number\">0</span>||s[<span class=\"number\">0</span>]==<span class=\"string\">'0'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len==<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> check(s[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>]=check(s[<span class=\"number\">1</span>])+func(s[<span class=\"number\">0</span>],s[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(check(s[i]))</span><br><span class=\"line\">                dp[i]=dp[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(func(s[i<span class=\"number\">-1</span>],s[i]))</span><br><span class=\"line\">                dp[i]+=dp[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[len<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-121-买卖股票的最佳时机\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-121-买卖股票的最佳时机\"></a> Leetcode 121 <a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/\" target=\"_blank\" rel=\"noopener\">买卖股票的最佳时机</a></h4>\n<blockquote>\n<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>\n<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</p>\n<p>注意：你不能在买入股票前卖出股票。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len=prices.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len==<span class=\"number\">0</span>||len==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(prices[<span class=\"number\">1</span>]&gt;prices[<span class=\"number\">0</span>])<span class=\"keyword\">return</span> prices[<span class=\"number\">1</span>]-prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">            prices[i]=prices[i+<span class=\"number\">1</span>]-prices[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prices.pop_back();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pre=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max_sum=prices[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; i:prices)&#123;</span><br><span class=\"line\">            pre=<span class=\"built_in\">max</span>(i,pre+i);</span><br><span class=\"line\">            max_sum=<span class=\"built_in\">max</span>(pre,max_sum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(max_sum&gt;<span class=\"number\">0</span>)<span class=\"keyword\">return</span> max_sum;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-139-单词拆分\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-139-单词拆分\"></a> Leetcode 139 <a href=\"https://leetcode-cn.com/problems/word-break/\" target=\"_blank\" rel=\"noopener\">单词拆分</a></h4>\n<blockquote>\n<p>给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。</p>\n<p>说明：</p>\n<p>拆分时可以重复使用字典中的单词。<br />\n你可以假设字典中没有重复的单词。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">wordBreak</span><span class=\"params\">(<span class=\"built_in\">string</span> s, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">unordered_set</span>&lt;<span class=\"built_in\">string</span>&gt; <span class=\"built_in\">set</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> <span class=\"keyword\">word</span>:wordDict)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">set</span>.insert(<span class=\"keyword\">word</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(s.<span class=\"built_in\">size</span>()+<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=<span class=\"literal\">true</span>;<span class=\"comment\">//空字符串合法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=s.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dp[j]&amp;&amp;<span class=\"built_in\">set</span>.<span class=\"built_in\">find</span>(s.substr(j,i-j))!=<span class=\"built_in\">set</span>.<span class=\"built_in\">end</span>())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dp[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[s.<span class=\"built_in\">size</span>()];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-152-乘积最大子数组\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-152-乘积最大子数组\"></a> Leetcode 152 <a href=\"https://leetcode-cn.com/problems/maximum-product-subarray/\" target=\"_blank\" rel=\"noopener\">乘积最大子数组</a></h4>\n<blockquote>\n<p>给你一个整数数组 <code>nums</code> ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProduct</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.<span class=\"built_in\">size</span>()==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result=nums[<span class=\"number\">0</span>],maxValue=nums[<span class=\"number\">0</span>],minValue=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;nums.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tempMax=<span class=\"built_in\">max</span>(nums[i],maxValue*nums[i]);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tempMin=<span class=\"built_in\">min</span>(nums[i],maxValue*nums[i]);</span><br><span class=\"line\">            maxValue=<span class=\"built_in\">max</span>(tempMax,minValue*nums[i]);</span><br><span class=\"line\">            minValue=<span class=\"built_in\">min</span>(tempMin,minValue*nums[i]);</span><br><span class=\"line\">            result=<span class=\"built_in\">max</span>(maxValue,result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;<span class=\"comment\">//因为是乘法，和最大最小值有关，所以用两个dp数组</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"198-打家劫舍\"><a class=\"markdownIt-Anchor\" href=\"#198-打家劫舍\"></a> 198 <a href=\"https://leetcode-cn.com/problems/house-robber/\" target=\"_blank\" rel=\"noopener\">打家劫舍</a></h4>\n<blockquote>\n<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例 1：</span><br><span class=\"line\"></span><br><span class=\"line\">输入：[1,2,3,1]</span><br><span class=\"line\">输出：4</span><br><span class=\"line\">解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class=\"line\">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rob</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.empty())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">size</span>==<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(<span class=\"built_in\">size</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>]=<span class=\"built_in\">max</span>(nums[<span class=\"number\">0</span>],nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;<span class=\"built_in\">size</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dp[i]=<span class=\"built_in\">max</span>(dp[i<span class=\"number\">-2</span>]+nums[i],dp[i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"built_in\">size</span><span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-264-丑数-ii\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-264-丑数-ii\"></a> Leetcode 264 <a href=\"https://leetcode-cn.com/problems/ugly-number-ii/\" target=\"_blank\" rel=\"noopener\">丑数 II</a></h4>\n<blockquote>\n<p>编写一个程序，找出第 n 个丑数。</p>\n<p>丑数就是质因数只包含 2, 3, 5 的正整数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例:</span><br><span class=\"line\"></span><br><span class=\"line\">输入: n = 10</span><br><span class=\"line\">输出: 12</span><br><span class=\"line\">解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。</span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">nthUglyNumber</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&lt;=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p2=<span class=\"number\">0</span>,p3=<span class=\"number\">0</span>,p5=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nums[<span class=\"number\">1691</span>];</span><br><span class=\"line\">        nums[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">             <span class=\"keyword\">int</span> ugly=<span class=\"built_in\">min</span>(nums[p2]*<span class=\"number\">2</span>,<span class=\"built_in\">min</span>(nums[p3]*<span class=\"number\">3</span>,nums[p5]*<span class=\"number\">5</span>));</span><br><span class=\"line\">             nums[i]=ugly;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(ugly==nums[p2]*<span class=\"number\">2</span>) p2++;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(ugly==nums[p3]*<span class=\"number\">3</span>) p3++;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(ugly==nums[p5]*<span class=\"number\">5</span>) p5++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-300-最长上升子序列\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-300-最长上升子序列\"></a> Leetcode 300 <a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/\" target=\"_blank\" rel=\"noopener\">最长上升子序列</a></h4>\n<blockquote>\n<p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lengthOfLIS</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.<span class=\"built_in\">size</span>()==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length=nums.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxAns=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(length,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;length;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dp[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[j]&lt;nums[i])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dp[i]=<span class=\"built_in\">max</span>(dp[i],dp[j]+<span class=\"number\">1</span>); </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            maxAns=<span class=\"built_in\">max</span>(maxAns,dp[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxAns;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-1143-最长公共子序列-二维dp\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-1143-最长公共子序列-二维dp\"></a> Leetcode 1143 <a href=\"https://leetcode-cn.com/problems/longest-common-subsequence/\" target=\"_blank\" rel=\"noopener\">最长公共子序列</a> (二维DP)</h4>\n<blockquote>\n<p>给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。</p>\n<p>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。<br />\n例如，“ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。</p>\n<p>若这两个字符串没有公共子序列，则返回 0。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">longestCommonSubsequence</span><span class=\"params\">(<span class=\"built_in\">string</span> text1, <span class=\"built_in\">string</span> text2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len1=text1.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len2=text2.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len1==<span class=\"number\">0</span>||len2==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dp[len1+<span class=\"number\">1</span>][len2+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(dp));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=len1;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=len2;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(text1[i<span class=\"number\">-1</span>]==text2[j<span class=\"number\">-1</span>])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dp[i][j]=dp[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dp[i][j]=<span class=\"built_in\">max</span>(dp[i][j<span class=\"number\">-1</span>],dp[i<span class=\"number\">-1</span>][j]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[len1][len2];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"[LeetCode] 链表","date":"2020-12-06T09:07:00.000Z","_content":"\n## 链表\n\n#### Leetcode 146 [LRU缓存机制](https://leetcode-cn.com/problems/lru-cache/)\n\n> 运用你所掌握的数据结构，设计和实现一个 [LRU (最近最少使用) 缓存机制](https://baike.baidu.com/item/LRU) 。\n>\n> 实现 LRUCache 类：\n>\n> - LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存\n> - int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。\n> - void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。\n\n```c++\nstruct DLinkedNode {\n    int key, value;\n    DLinkedNode* prev;\n    DLinkedNode* next;\n    DLinkedNode(): key(0), value(0), prev(nullptr), next(nullptr) {}\n    DLinkedNode(int _key, int _value): key(_key), value(_value), prev(nullptr), next(nullptr) {}\n};\n\nclass LRUCache {\nprivate:\n    unordered_map<int, DLinkedNode*> cache;\n    DLinkedNode* head;\n    DLinkedNode* tail;\n    int size;\n    int capacity;\n\npublic:\n    LRUCache(int _capacity): capacity(_capacity), size(0) {\n        // 使用伪头部和伪尾部节点\n        head = new DLinkedNode();\n        tail = new DLinkedNode();\n        head->next = tail;\n        tail->prev = head;\n    }\n    \n    int get(int key) {\n        if (!cache.count(key)) {\n            return -1;\n        }\n        // 如果 key 存在，先通过哈希表定位，再移到头部\n        DLinkedNode* node = cache[key];\n        moveToHead(node);\n        return node->value;\n    }\n    \n    void put(int key, int value) {\n        if (!cache.count(key)) {\n            // 如果 key 不存在，创建一个新的节点\n            DLinkedNode* node = new DLinkedNode(key, value);\n            // 添加进哈希表\n            cache[key] = node;\n            // 添加至双向链表的头部\n            addToHead(node);\n            ++size;\n            if (size > capacity) {\n                // 如果超出容量，删除双向链表的尾部节点\n                DLinkedNode* removed = removeTail();\n                // 删除哈希表中对应的项\n                cache.erase(removed->key);\n                // 防止内存泄漏\n                delete removed;\n                --size;\n            }\n        }\n        else {\n            // 如果 key 存在，先通过哈希表定位，再修改 value，并移到头部\n            DLinkedNode* node = cache[key];\n            node->value = value;\n            moveToHead(node);\n        }\n    }\n\n    void addToHead(DLinkedNode* node) {\n        node->prev = head;\n        node->next = head->next;\n        head->next->prev = node;\n        head->next = node;\n    }\n    \n    void removeNode(DLinkedNode* node) {\n        node->prev->next = node->next;\n        node->next->prev = node->prev;\n    }\n\n    void moveToHead(DLinkedNode* node) {\n        removeNode(node);\n        addToHead(node);\n    }\n\n    DLinkedNode* removeTail() {\n        DLinkedNode* node = tail->prev;\n        removeNode(node);\n        return node;\n    }\n};\n```\n\n\n\n#### Leetcode 148 [排序链表](https://leetcode-cn.com/problems/sort-list/)\n\n> 在 *O*(*n* log *n*) 时间复杂度和常数级空间复杂度下，对链表进行排序。\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n\tListNode* sortList(ListNode* head) {\n\t\tint length = getLength(head);\n\t\tListNode* dummy = new ListNode(-1);\n\t\tdummy->next = head;\n\n\t\tfor (int step = 1; step < length; step *= 2)\n\t\t{\n\t\t\tListNode* pre = dummy;\n\t\t\tListNode* cur = dummy->next;\n\t\t\twhile (cur != nullptr)\n\t\t\t{\n\t\t\t\tListNode* h1 = cur;\n\t\t\t\tListNode* h2 = splitList(h1, step);\n\t\t\t\tcur = splitList(h2, step);\n\t\t\t\tListNode* tmpMerge = mergeList(h1, h2);\n\t\t\t\tpre->next = tmpMerge;\n\t\t\t\twhile (pre->next != nullptr)\n\t\t\t\t{\n\t\t\t\t\tpre = pre->next;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dummy->next;\n\t}\n\n\tListNode* splitList(ListNode* head, int step)\n\t{\n\t\tif (head == nullptr) return nullptr;\n\t\tListNode* dummy = new ListNode(-1);\n\t\tdummy->next = head;\n\t\tListNode* pre = dummy;\n\t\twhile (step--)\n\t\t{\n\t\t\tif (head!= nullptr)\n\t\t\t{\n\t\t\t\thead = head->next;\n\t\t\t\tpre = pre->next;\n\t\t\t}\n\t\t\telse break;\n\t\t}\n\t\tpre->next = nullptr;\n\t\treturn head;\n\t}\n\n\tListNode* mergeList(ListNode* h1, ListNode* h2)\n\t{\n\t\tListNode* dummy = new ListNode(-1);\n\t\tListNode* pre = dummy;\n\t\twhile (h1 != nullptr && h2 != nullptr)\n\t\t{\n\t\t\tif (h1->val < h2->val)\n\t\t\t{\n\t\t\t\tpre->next = h1;\n\t\t\t\th1 = h1->next;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpre->next = h2;\n\t\t\t\th2 = h2->next;\n\t\t\t}\n\t\t\tpre = pre->next;\n\t\t}\n\t\tif (h1 != nullptr) pre->next = h1;\n\t\tif (h2 != nullptr) pre->next = h2;\n\t\treturn dummy->next;\n\t}\n\n\tint getLength(ListNode* head)\n\t{\n\t\tint len = 0;\n\t\twhile (head != nullptr)\n\t\t{\n\t\t\tlen++;\n\t\t\thead = head->next;\n\t\t}\n\t\treturn len;\n\t}\n};\n```\n\n用迭代的方法，进行归并\n\n#### Leetcode 206 [反转链表](https://leetcode-cn.com/problems/reverse-linked-list/)\n\n> 反转一个单链表。\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode curr = head;\n        while (curr != null) {\n            ListNode nextTemp = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = nextTemp;\n        }\n        return prev;\n    }\n}\n```\n\n","source":"_posts/leetcode/lc-linklist.md","raw":"---\ntitle: '[LeetCode] 链表'\ndate: 2020-12-6 17:07\ntags:\n- 链表\n- LeetCode\ncategories:\n- 算法\n---\n\n## 链表\n\n#### Leetcode 146 [LRU缓存机制](https://leetcode-cn.com/problems/lru-cache/)\n\n> 运用你所掌握的数据结构，设计和实现一个 [LRU (最近最少使用) 缓存机制](https://baike.baidu.com/item/LRU) 。\n>\n> 实现 LRUCache 类：\n>\n> - LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存\n> - int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。\n> - void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。\n\n```c++\nstruct DLinkedNode {\n    int key, value;\n    DLinkedNode* prev;\n    DLinkedNode* next;\n    DLinkedNode(): key(0), value(0), prev(nullptr), next(nullptr) {}\n    DLinkedNode(int _key, int _value): key(_key), value(_value), prev(nullptr), next(nullptr) {}\n};\n\nclass LRUCache {\nprivate:\n    unordered_map<int, DLinkedNode*> cache;\n    DLinkedNode* head;\n    DLinkedNode* tail;\n    int size;\n    int capacity;\n\npublic:\n    LRUCache(int _capacity): capacity(_capacity), size(0) {\n        // 使用伪头部和伪尾部节点\n        head = new DLinkedNode();\n        tail = new DLinkedNode();\n        head->next = tail;\n        tail->prev = head;\n    }\n    \n    int get(int key) {\n        if (!cache.count(key)) {\n            return -1;\n        }\n        // 如果 key 存在，先通过哈希表定位，再移到头部\n        DLinkedNode* node = cache[key];\n        moveToHead(node);\n        return node->value;\n    }\n    \n    void put(int key, int value) {\n        if (!cache.count(key)) {\n            // 如果 key 不存在，创建一个新的节点\n            DLinkedNode* node = new DLinkedNode(key, value);\n            // 添加进哈希表\n            cache[key] = node;\n            // 添加至双向链表的头部\n            addToHead(node);\n            ++size;\n            if (size > capacity) {\n                // 如果超出容量，删除双向链表的尾部节点\n                DLinkedNode* removed = removeTail();\n                // 删除哈希表中对应的项\n                cache.erase(removed->key);\n                // 防止内存泄漏\n                delete removed;\n                --size;\n            }\n        }\n        else {\n            // 如果 key 存在，先通过哈希表定位，再修改 value，并移到头部\n            DLinkedNode* node = cache[key];\n            node->value = value;\n            moveToHead(node);\n        }\n    }\n\n    void addToHead(DLinkedNode* node) {\n        node->prev = head;\n        node->next = head->next;\n        head->next->prev = node;\n        head->next = node;\n    }\n    \n    void removeNode(DLinkedNode* node) {\n        node->prev->next = node->next;\n        node->next->prev = node->prev;\n    }\n\n    void moveToHead(DLinkedNode* node) {\n        removeNode(node);\n        addToHead(node);\n    }\n\n    DLinkedNode* removeTail() {\n        DLinkedNode* node = tail->prev;\n        removeNode(node);\n        return node;\n    }\n};\n```\n\n\n\n#### Leetcode 148 [排序链表](https://leetcode-cn.com/problems/sort-list/)\n\n> 在 *O*(*n* log *n*) 时间复杂度和常数级空间复杂度下，对链表进行排序。\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n\tListNode* sortList(ListNode* head) {\n\t\tint length = getLength(head);\n\t\tListNode* dummy = new ListNode(-1);\n\t\tdummy->next = head;\n\n\t\tfor (int step = 1; step < length; step *= 2)\n\t\t{\n\t\t\tListNode* pre = dummy;\n\t\t\tListNode* cur = dummy->next;\n\t\t\twhile (cur != nullptr)\n\t\t\t{\n\t\t\t\tListNode* h1 = cur;\n\t\t\t\tListNode* h2 = splitList(h1, step);\n\t\t\t\tcur = splitList(h2, step);\n\t\t\t\tListNode* tmpMerge = mergeList(h1, h2);\n\t\t\t\tpre->next = tmpMerge;\n\t\t\t\twhile (pre->next != nullptr)\n\t\t\t\t{\n\t\t\t\t\tpre = pre->next;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dummy->next;\n\t}\n\n\tListNode* splitList(ListNode* head, int step)\n\t{\n\t\tif (head == nullptr) return nullptr;\n\t\tListNode* dummy = new ListNode(-1);\n\t\tdummy->next = head;\n\t\tListNode* pre = dummy;\n\t\twhile (step--)\n\t\t{\n\t\t\tif (head!= nullptr)\n\t\t\t{\n\t\t\t\thead = head->next;\n\t\t\t\tpre = pre->next;\n\t\t\t}\n\t\t\telse break;\n\t\t}\n\t\tpre->next = nullptr;\n\t\treturn head;\n\t}\n\n\tListNode* mergeList(ListNode* h1, ListNode* h2)\n\t{\n\t\tListNode* dummy = new ListNode(-1);\n\t\tListNode* pre = dummy;\n\t\twhile (h1 != nullptr && h2 != nullptr)\n\t\t{\n\t\t\tif (h1->val < h2->val)\n\t\t\t{\n\t\t\t\tpre->next = h1;\n\t\t\t\th1 = h1->next;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpre->next = h2;\n\t\t\t\th2 = h2->next;\n\t\t\t}\n\t\t\tpre = pre->next;\n\t\t}\n\t\tif (h1 != nullptr) pre->next = h1;\n\t\tif (h2 != nullptr) pre->next = h2;\n\t\treturn dummy->next;\n\t}\n\n\tint getLength(ListNode* head)\n\t{\n\t\tint len = 0;\n\t\twhile (head != nullptr)\n\t\t{\n\t\t\tlen++;\n\t\t\thead = head->next;\n\t\t}\n\t\treturn len;\n\t}\n};\n```\n\n用迭代的方法，进行归并\n\n#### Leetcode 206 [反转链表](https://leetcode-cn.com/problems/reverse-linked-list/)\n\n> 反转一个单链表。\n\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode curr = head;\n        while (curr != null) {\n            ListNode nextTemp = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = nextTemp;\n        }\n        return prev;\n    }\n}\n```\n\n","slug":"leetcode/lc-linklist","published":1,"updated":"2020-12-06T09:10:11.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtuag001c2kwj2b878v9m","content":"<h2 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\"></a> 链表</h2>\n<h4 id=\"leetcode-146-lru缓存机制\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-146-lru缓存机制\"></a> Leetcode 146 <a href=\"https://leetcode-cn.com/problems/lru-cache/\" target=\"_blank\" rel=\"noopener\">LRU缓存机制</a></h4>\n<blockquote>\n<p>运用你所掌握的数据结构，设计和实现一个 <a href=\"https://baike.baidu.com/item/LRU\" target=\"_blank\" rel=\"noopener\">LRU (最近最少使用) 缓存机制</a> 。</p>\n<p>实现 LRUCache 类：</p>\n<ul>\n<li>LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存</li>\n<li>int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。</li>\n<li>void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DLinkedNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> key, value;</span><br><span class=\"line\">    DLinkedNode* prev;</span><br><span class=\"line\">    DLinkedNode* next;</span><br><span class=\"line\">    DLinkedNode(): key(<span class=\"number\">0</span>), value(<span class=\"number\">0</span>), prev(<span class=\"literal\">nullptr</span>), next(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">    DLinkedNode(<span class=\"keyword\">int</span> _key, <span class=\"keyword\">int</span> _value): key(_key), value(_value), prev(<span class=\"literal\">nullptr</span>), next(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LRUCache</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>, DLinkedNode*&gt; cache;</span><br><span class=\"line\">    DLinkedNode* head;</span><br><span class=\"line\">    DLinkedNode* tail;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    LRUCache(<span class=\"keyword\">int</span> _capacity): capacity(_capacity), <span class=\"built_in\">size</span>(<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用伪头部和伪尾部节点</span></span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> DLinkedNode();</span><br><span class=\"line\">        tail = <span class=\"keyword\">new</span> DLinkedNode();</span><br><span class=\"line\">        head-&gt;next = tail;</span><br><span class=\"line\">        tail-&gt;prev = head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cache.count(key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 key 存在，先通过哈希表定位，再移到头部</span></span><br><span class=\"line\">        DLinkedNode* node = cache[key];</span><br><span class=\"line\">        moveToHead(node);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node-&gt;value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(<span class=\"keyword\">int</span> key, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cache.count(key)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果 key 不存在，创建一个新的节点</span></span><br><span class=\"line\">            DLinkedNode* node = <span class=\"keyword\">new</span> DLinkedNode(key, value);</span><br><span class=\"line\">            <span class=\"comment\">// 添加进哈希表</span></span><br><span class=\"line\">            cache[key] = node;</span><br><span class=\"line\">            <span class=\"comment\">// 添加至双向链表的头部</span></span><br><span class=\"line\">            addToHead(node);</span><br><span class=\"line\">            ++<span class=\"built_in\">size</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">size</span> &gt; capacity) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果超出容量，删除双向链表的尾部节点</span></span><br><span class=\"line\">                DLinkedNode* removed = removeTail();</span><br><span class=\"line\">                <span class=\"comment\">// 删除哈希表中对应的项</span></span><br><span class=\"line\">                cache.erase(removed-&gt;key);</span><br><span class=\"line\">                <span class=\"comment\">// 防止内存泄漏</span></span><br><span class=\"line\">                <span class=\"keyword\">delete</span> removed;</span><br><span class=\"line\">                --<span class=\"built_in\">size</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果 key 存在，先通过哈希表定位，再修改 value，并移到头部</span></span><br><span class=\"line\">            DLinkedNode* node = cache[key];</span><br><span class=\"line\">            node-&gt;value = value;</span><br><span class=\"line\">            moveToHead(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addToHead</span><span class=\"params\">(DLinkedNode* node)</span> </span>&#123;</span><br><span class=\"line\">        node-&gt;prev = head;</span><br><span class=\"line\">        node-&gt;next = head-&gt;next;</span><br><span class=\"line\">        head-&gt;next-&gt;prev = node;</span><br><span class=\"line\">        head-&gt;next = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">removeNode</span><span class=\"params\">(DLinkedNode* node)</span> </span>&#123;</span><br><span class=\"line\">        node-&gt;prev-&gt;next = node-&gt;next;</span><br><span class=\"line\">        node-&gt;next-&gt;prev = node-&gt;prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">moveToHead</span><span class=\"params\">(DLinkedNode* node)</span> </span>&#123;</span><br><span class=\"line\">        removeNode(node);</span><br><span class=\"line\">        addToHead(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">DLinkedNode* <span class=\"title\">removeTail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        DLinkedNode* node = tail-&gt;prev;</span><br><span class=\"line\">        removeNode(node);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-148-排序链表\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-148-排序链表\"></a> Leetcode 148 <a href=\"https://leetcode-cn.com/problems/sort-list/\" target=\"_blank\" rel=\"noopener\">排序链表</a></h4>\n<blockquote>\n<p>在 <em>O</em>(<em>n</em> log <em>n</em>) 时间复杂度和常数级空间复杂度下，对链表进行排序。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\">ListNode* <span class=\"title\">sortList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> length = getLength(head);</span><br><span class=\"line\">\t\tListNode* dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\tdummy-&gt;next = head;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> <span class=\"built_in\">step</span> = <span class=\"number\">1</span>; <span class=\"built_in\">step</span> &lt; length; <span class=\"built_in\">step</span> *= <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tListNode* pre = dummy;</span><br><span class=\"line\">\t\t\tListNode* cur = dummy-&gt;next;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (cur != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tListNode* h1 = cur;</span><br><span class=\"line\">\t\t\t\tListNode* h2 = splitList(h1, <span class=\"built_in\">step</span>);</span><br><span class=\"line\">\t\t\t\tcur = splitList(h2, <span class=\"built_in\">step</span>);</span><br><span class=\"line\">\t\t\t\tListNode* tmpMerge = mergeList(h1, h2);</span><br><span class=\"line\">\t\t\t\tpre-&gt;next = tmpMerge;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (pre-&gt;next != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tpre = pre-&gt;next;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dummy-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">ListNode* <span class=\"title\">splitList</span><span class=\"params\">(ListNode* head, <span class=\"keyword\">int</span> <span class=\"built_in\">step</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (head == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\tListNode* dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\tdummy-&gt;next = head;</span><br><span class=\"line\">\t\tListNode* pre = dummy;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"built_in\">step</span>--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (head!= <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\thead = head-&gt;next;</span><br><span class=\"line\">\t\t\t\tpre = pre-&gt;next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpre-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">ListNode* <span class=\"title\">mergeList</span><span class=\"params\">(ListNode* h1, ListNode* h2)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tListNode* dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\tListNode* pre = dummy;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (h1 != <span class=\"literal\">nullptr</span> &amp;&amp; h2 != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (h1-&gt;val &lt; h2-&gt;val)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tpre-&gt;next = h1;</span><br><span class=\"line\">\t\t\t\th1 = h1-&gt;next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tpre-&gt;next = h2;</span><br><span class=\"line\">\t\t\t\th2 = h2-&gt;next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tpre = pre-&gt;next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (h1 != <span class=\"literal\">nullptr</span>) pre-&gt;next = h1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (h2 != <span class=\"literal\">nullptr</span>) pre-&gt;next = h2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dummy-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">(ListNode* head)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (head != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tlen++;</span><br><span class=\"line\">\t\t\thead = head-&gt;next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> len;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>用迭代的方法，进行归并</p>\n<h4 id=\"leetcode-206-反转链表\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-206-反转链表\"></a> Leetcode 206 <a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\" target=\"_blank\" rel=\"noopener\">反转链表</a></h4>\n<blockquote>\n<p>反转一个单链表。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ListNode curr = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ListNode nextTemp = curr.next;</span><br><span class=\"line\">            curr.next = prev;</span><br><span class=\"line\">            prev = curr;</span><br><span class=\"line\">            curr = nextTemp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\"></a> 链表</h2>\n<h4 id=\"leetcode-146-lru缓存机制\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-146-lru缓存机制\"></a> Leetcode 146 <a href=\"https://leetcode-cn.com/problems/lru-cache/\" target=\"_blank\" rel=\"noopener\">LRU缓存机制</a></h4>\n<blockquote>\n<p>运用你所掌握的数据结构，设计和实现一个 <a href=\"https://baike.baidu.com/item/LRU\" target=\"_blank\" rel=\"noopener\">LRU (最近最少使用) 缓存机制</a> 。</p>\n<p>实现 LRUCache 类：</p>\n<ul>\n<li>LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存</li>\n<li>int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。</li>\n<li>void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DLinkedNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> key, value;</span><br><span class=\"line\">    DLinkedNode* prev;</span><br><span class=\"line\">    DLinkedNode* next;</span><br><span class=\"line\">    DLinkedNode(): key(<span class=\"number\">0</span>), value(<span class=\"number\">0</span>), prev(<span class=\"literal\">nullptr</span>), next(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">    DLinkedNode(<span class=\"keyword\">int</span> _key, <span class=\"keyword\">int</span> _value): key(_key), value(_value), prev(<span class=\"literal\">nullptr</span>), next(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LRUCache</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>, DLinkedNode*&gt; cache;</span><br><span class=\"line\">    DLinkedNode* head;</span><br><span class=\"line\">    DLinkedNode* tail;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> capacity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    LRUCache(<span class=\"keyword\">int</span> _capacity): capacity(_capacity), <span class=\"built_in\">size</span>(<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用伪头部和伪尾部节点</span></span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> DLinkedNode();</span><br><span class=\"line\">        tail = <span class=\"keyword\">new</span> DLinkedNode();</span><br><span class=\"line\">        head-&gt;next = tail;</span><br><span class=\"line\">        tail-&gt;prev = head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cache.count(key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 key 存在，先通过哈希表定位，再移到头部</span></span><br><span class=\"line\">        DLinkedNode* node = cache[key];</span><br><span class=\"line\">        moveToHead(node);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node-&gt;value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(<span class=\"keyword\">int</span> key, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cache.count(key)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果 key 不存在，创建一个新的节点</span></span><br><span class=\"line\">            DLinkedNode* node = <span class=\"keyword\">new</span> DLinkedNode(key, value);</span><br><span class=\"line\">            <span class=\"comment\">// 添加进哈希表</span></span><br><span class=\"line\">            cache[key] = node;</span><br><span class=\"line\">            <span class=\"comment\">// 添加至双向链表的头部</span></span><br><span class=\"line\">            addToHead(node);</span><br><span class=\"line\">            ++<span class=\"built_in\">size</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">size</span> &gt; capacity) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果超出容量，删除双向链表的尾部节点</span></span><br><span class=\"line\">                DLinkedNode* removed = removeTail();</span><br><span class=\"line\">                <span class=\"comment\">// 删除哈希表中对应的项</span></span><br><span class=\"line\">                cache.erase(removed-&gt;key);</span><br><span class=\"line\">                <span class=\"comment\">// 防止内存泄漏</span></span><br><span class=\"line\">                <span class=\"keyword\">delete</span> removed;</span><br><span class=\"line\">                --<span class=\"built_in\">size</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果 key 存在，先通过哈希表定位，再修改 value，并移到头部</span></span><br><span class=\"line\">            DLinkedNode* node = cache[key];</span><br><span class=\"line\">            node-&gt;value = value;</span><br><span class=\"line\">            moveToHead(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addToHead</span><span class=\"params\">(DLinkedNode* node)</span> </span>&#123;</span><br><span class=\"line\">        node-&gt;prev = head;</span><br><span class=\"line\">        node-&gt;next = head-&gt;next;</span><br><span class=\"line\">        head-&gt;next-&gt;prev = node;</span><br><span class=\"line\">        head-&gt;next = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">removeNode</span><span class=\"params\">(DLinkedNode* node)</span> </span>&#123;</span><br><span class=\"line\">        node-&gt;prev-&gt;next = node-&gt;next;</span><br><span class=\"line\">        node-&gt;next-&gt;prev = node-&gt;prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">moveToHead</span><span class=\"params\">(DLinkedNode* node)</span> </span>&#123;</span><br><span class=\"line\">        removeNode(node);</span><br><span class=\"line\">        addToHead(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">DLinkedNode* <span class=\"title\">removeTail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        DLinkedNode* node = tail-&gt;prev;</span><br><span class=\"line\">        removeNode(node);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-148-排序链表\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-148-排序链表\"></a> Leetcode 148 <a href=\"https://leetcode-cn.com/problems/sort-list/\" target=\"_blank\" rel=\"noopener\">排序链表</a></h4>\n<blockquote>\n<p>在 <em>O</em>(<em>n</em> log <em>n</em>) 时间复杂度和常数级空间复杂度下，对链表进行排序。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\">ListNode* <span class=\"title\">sortList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> length = getLength(head);</span><br><span class=\"line\">\t\tListNode* dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\tdummy-&gt;next = head;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> <span class=\"built_in\">step</span> = <span class=\"number\">1</span>; <span class=\"built_in\">step</span> &lt; length; <span class=\"built_in\">step</span> *= <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tListNode* pre = dummy;</span><br><span class=\"line\">\t\t\tListNode* cur = dummy-&gt;next;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (cur != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tListNode* h1 = cur;</span><br><span class=\"line\">\t\t\t\tListNode* h2 = splitList(h1, <span class=\"built_in\">step</span>);</span><br><span class=\"line\">\t\t\t\tcur = splitList(h2, <span class=\"built_in\">step</span>);</span><br><span class=\"line\">\t\t\t\tListNode* tmpMerge = mergeList(h1, h2);</span><br><span class=\"line\">\t\t\t\tpre-&gt;next = tmpMerge;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (pre-&gt;next != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tpre = pre-&gt;next;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dummy-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">ListNode* <span class=\"title\">splitList</span><span class=\"params\">(ListNode* head, <span class=\"keyword\">int</span> <span class=\"built_in\">step</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (head == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\tListNode* dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\tdummy-&gt;next = head;</span><br><span class=\"line\">\t\tListNode* pre = dummy;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"built_in\">step</span>--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (head!= <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\thead = head-&gt;next;</span><br><span class=\"line\">\t\t\t\tpre = pre-&gt;next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpre-&gt;next = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">ListNode* <span class=\"title\">mergeList</span><span class=\"params\">(ListNode* h1, ListNode* h2)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tListNode* dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\tListNode* pre = dummy;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (h1 != <span class=\"literal\">nullptr</span> &amp;&amp; h2 != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (h1-&gt;val &lt; h2-&gt;val)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tpre-&gt;next = h1;</span><br><span class=\"line\">\t\t\t\th1 = h1-&gt;next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tpre-&gt;next = h2;</span><br><span class=\"line\">\t\t\t\th2 = h2-&gt;next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tpre = pre-&gt;next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (h1 != <span class=\"literal\">nullptr</span>) pre-&gt;next = h1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (h2 != <span class=\"literal\">nullptr</span>) pre-&gt;next = h2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dummy-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">(ListNode* head)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (head != <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tlen++;</span><br><span class=\"line\">\t\t\thead = head-&gt;next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> len;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>用迭代的方法，进行归并</p>\n<h4 id=\"leetcode-206-反转链表\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-206-反转链表\"></a> Leetcode 206 <a href=\"https://leetcode-cn.com/problems/reverse-linked-list/\" target=\"_blank\" rel=\"noopener\">反转链表</a></h4>\n<blockquote>\n<p>反转一个单链表。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ListNode curr = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ListNode nextTemp = curr.next;</span><br><span class=\"line\">            curr.next = prev;</span><br><span class=\"line\">            prev = curr;</span><br><span class=\"line\">            curr = nextTemp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"[LeetCode] 滑动窗口","date":"2020-12-06T09:07:00.000Z","_content":"\n## 滑动窗口\n\n#### Leetcode 3 [无重复字符的最长子串](https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/)\n\n> 给定一个字符串，请你找出其中不含有重复字符的 **最长子串** 的长度。\n\n```c++\nclass Solution {\npublic:\n\tint lengthOfLongestSubstring(string s) {\n\t\tchar c[256] = { 0 };\n\t\tint len = s.size();\n\t\tint rk = -1, ans = 0;\n\t\tfor (int i = 0; i < len; i++)\n\t\t{\n\t\t\tif (i != 0)\n\t\t\t{\n\t\t\t\tc[s[i-1]] = 0;\n\t\t\t}\n\t\t\twhile (rk + 1 < len && c[s[rk+1]] == 0) {\n\t\t\t\tc[s[rk+1]] = 1;\n\t\t\t\trk++;\n\t\t\t}\n\t\t\tans = max(ans, rk - i + 1);\n\t\t}\n\t\treturn ans;\n\t}\n};\n```\n\n","source":"_posts/leetcode/lc-slide-window.md","raw":"---\ntitle: '[LeetCode] 滑动窗口'\ndate: 2020-12-6 17:07\ntags:\n- 滑动窗口\n- LeetCode\ncategories:\n- 算法\n---\n\n## 滑动窗口\n\n#### Leetcode 3 [无重复字符的最长子串](https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/)\n\n> 给定一个字符串，请你找出其中不含有重复字符的 **最长子串** 的长度。\n\n```c++\nclass Solution {\npublic:\n\tint lengthOfLongestSubstring(string s) {\n\t\tchar c[256] = { 0 };\n\t\tint len = s.size();\n\t\tint rk = -1, ans = 0;\n\t\tfor (int i = 0; i < len; i++)\n\t\t{\n\t\t\tif (i != 0)\n\t\t\t{\n\t\t\t\tc[s[i-1]] = 0;\n\t\t\t}\n\t\t\twhile (rk + 1 < len && c[s[rk+1]] == 0) {\n\t\t\t\tc[s[rk+1]] = 1;\n\t\t\t\trk++;\n\t\t\t}\n\t\t\tans = max(ans, rk - i + 1);\n\t\t}\n\t\treturn ans;\n\t}\n};\n```\n\n","slug":"leetcode/lc-slide-window","published":1,"updated":"2020-12-06T09:09:42.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtuai001g2kwj2o7l2goi","content":"<h2 id=\"滑动窗口\"><a class=\"markdownIt-Anchor\" href=\"#滑动窗口\"></a> 滑动窗口</h2>\n<h4 id=\"leetcode-3-无重复字符的最长子串\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-3-无重复字符的最长子串\"></a> Leetcode 3 <a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\" target=\"_blank\" rel=\"noopener\">无重复字符的最长子串</a></h4>\n<blockquote>\n<p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c[<span class=\"number\">256</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> rk = <span class=\"number\">-1</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tc[s[i<span class=\"number\">-1</span>]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (rk + <span class=\"number\">1</span> &lt; len &amp;&amp; c[s[rk+<span class=\"number\">1</span>]] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tc[s[rk+<span class=\"number\">1</span>]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\trk++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tans = <span class=\"built_in\">max</span>(ans, rk - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"滑动窗口\"><a class=\"markdownIt-Anchor\" href=\"#滑动窗口\"></a> 滑动窗口</h2>\n<h4 id=\"leetcode-3-无重复字符的最长子串\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-3-无重复字符的最长子串\"></a> Leetcode 3 <a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\" target=\"_blank\" rel=\"noopener\">无重复字符的最长子串</a></h4>\n<blockquote>\n<p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(<span class=\"built_in\">string</span> s)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c[<span class=\"number\">256</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> rk = <span class=\"number\">-1</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tc[s[i<span class=\"number\">-1</span>]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (rk + <span class=\"number\">1</span> &lt; len &amp;&amp; c[s[rk+<span class=\"number\">1</span>]] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tc[s[rk+<span class=\"number\">1</span>]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\trk++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tans = <span class=\"built_in\">max</span>(ans, rk - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"[LeetCode] 二叉树","date":"2020-12-06T09:07:00.000Z","_content":"\n## 二叉树\n\n#### Leetcode 94 [二叉树的中序遍历](https://leetcode-cn.com/problems/binary-tree-inorder-traversal/)\n\n> 给定一个二叉树，返回它的中序 遍历。\n>\n> 示例:\n>\n> ```c++\n> 输入: [1,null,2,3]\n>    1\n>     \\\n>      2\n>     /\n>    3\n> \n> 输出: [1,3,2]\n> ```\n\n递归解法\n\n```c++\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> res;\n        stack<TreeNode*> stk;\n        while (root != nullptr || !stk.empty()) {\n            while (root != nullptr) {\n                stk.push(root);\n                root = root->left;\n            }\n            root = stk.top();\n            stk.pop();\n            res.push_back(root->val);\n            root = root->right;\n        }\n        return res;\n    }\n};\n```\n\n#### Leetcode 95 [不同的二叉搜索树 II](https://leetcode-cn.com/problems/unique-binary-search-trees-ii/)\n\n> 给定一个整数 *n*，生成所有由 1 ... *n* 为节点所组成的 **二叉搜索树** 。\n\n```c++\nclass Solution {\npublic:\n    vector<TreeNode*> generateTrees(int n) {\n        if(n==0){\n            return {};\n        }\n        return generateTrees(1,n);\n    }\n\n    vector<TreeNode*> generateTrees(int start,int end)\n    {\n        if(start>end)\n        {\n            return {nullptr};\n        }\n        vector<TreeNode*> allTrees;\n        for(int i=start;i<=end;i++)\n        {\n            vector<TreeNode*> leftTrees=generateTrees(start,i-1);\n            vector<TreeNode*> rightTrees=generateTrees(i+1,end);\n\n            for(auto &lTree:leftTrees)\n            {\n                for(auto &rTree:rightTrees)\n                {\n                    TreeNode* node=new TreeNode(i);\n                    node->right=rTree;\n                    node->left=lTree;\n                    allTrees.push_back(node);\n                }\n            }\n        }\n        return allTrees;\n    }\n};\n```\n\n#### Leetcode 101 [对称二叉树](https://leetcode-cn.com/problems/symmetric-tree/)\n\n> 给定一个二叉树，检查它是否是镜像对称的。\n\n```c++\nclass Solution {\npublic:\n    bool func(TreeNode *left,TreeNode *right){\n        if(left==NULL&&right==NULL){\n            return true;\n        }\n        if(left!=NULL&&right!=NULL&&left->val==right->val){\n            return func(left->left,right->right)&&func(left->right,right->left);\n        }\n        return false;\n    }\n    bool isSymmetric(TreeNode* root) {\n        if(root==NULL){\n            return true;\n        }\n        return func(root->left,root->right);\n    }\n};\n```\n\n","source":"_posts/leetcode/lc-tree.md","raw":"---\ntitle: '[LeetCode] 二叉树'\ndate: 2020-12-6 17:07\ntags:\n- 二叉树\n- LeetCode\ncategories:\n- 算法\n---\n\n## 二叉树\n\n#### Leetcode 94 [二叉树的中序遍历](https://leetcode-cn.com/problems/binary-tree-inorder-traversal/)\n\n> 给定一个二叉树，返回它的中序 遍历。\n>\n> 示例:\n>\n> ```c++\n> 输入: [1,null,2,3]\n>    1\n>     \\\n>      2\n>     /\n>    3\n> \n> 输出: [1,3,2]\n> ```\n\n递归解法\n\n```c++\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> res;\n        stack<TreeNode*> stk;\n        while (root != nullptr || !stk.empty()) {\n            while (root != nullptr) {\n                stk.push(root);\n                root = root->left;\n            }\n            root = stk.top();\n            stk.pop();\n            res.push_back(root->val);\n            root = root->right;\n        }\n        return res;\n    }\n};\n```\n\n#### Leetcode 95 [不同的二叉搜索树 II](https://leetcode-cn.com/problems/unique-binary-search-trees-ii/)\n\n> 给定一个整数 *n*，生成所有由 1 ... *n* 为节点所组成的 **二叉搜索树** 。\n\n```c++\nclass Solution {\npublic:\n    vector<TreeNode*> generateTrees(int n) {\n        if(n==0){\n            return {};\n        }\n        return generateTrees(1,n);\n    }\n\n    vector<TreeNode*> generateTrees(int start,int end)\n    {\n        if(start>end)\n        {\n            return {nullptr};\n        }\n        vector<TreeNode*> allTrees;\n        for(int i=start;i<=end;i++)\n        {\n            vector<TreeNode*> leftTrees=generateTrees(start,i-1);\n            vector<TreeNode*> rightTrees=generateTrees(i+1,end);\n\n            for(auto &lTree:leftTrees)\n            {\n                for(auto &rTree:rightTrees)\n                {\n                    TreeNode* node=new TreeNode(i);\n                    node->right=rTree;\n                    node->left=lTree;\n                    allTrees.push_back(node);\n                }\n            }\n        }\n        return allTrees;\n    }\n};\n```\n\n#### Leetcode 101 [对称二叉树](https://leetcode-cn.com/problems/symmetric-tree/)\n\n> 给定一个二叉树，检查它是否是镜像对称的。\n\n```c++\nclass Solution {\npublic:\n    bool func(TreeNode *left,TreeNode *right){\n        if(left==NULL&&right==NULL){\n            return true;\n        }\n        if(left!=NULL&&right!=NULL&&left->val==right->val){\n            return func(left->left,right->right)&&func(left->right,right->left);\n        }\n        return false;\n    }\n    bool isSymmetric(TreeNode* root) {\n        if(root==NULL){\n            return true;\n        }\n        return func(root->left,root->right);\n    }\n};\n```\n\n","slug":"leetcode/lc-tree","published":1,"updated":"2020-12-06T09:09:53.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtuak001j2kwjbvyr1b9v","content":"<h2 id=\"二叉树\"><a class=\"markdownIt-Anchor\" href=\"#二叉树\"></a> 二叉树</h2>\n<h4 id=\"leetcode-94-二叉树的中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-94-二叉树的中序遍历\"></a> Leetcode 94 <a href=\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/\" target=\"_blank\" rel=\"noopener\">二叉树的中序遍历</a></h4>\n<blockquote>\n<p>给定一个二叉树，返回它的中序 遍历。</p>\n<p>示例:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">1</span>,null,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">   <span class=\"number\">1</span></span><br><span class=\"line\">    \\</span><br><span class=\"line\">     <span class=\"number\">2</span></span><br><span class=\"line\">    /</span><br><span class=\"line\">   <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出: [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>递归解法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res;</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>&lt;TreeNode*&gt; stk;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (root != <span class=\"literal\">nullptr</span> || !stk.empty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (root != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                stk.push(root);</span><br><span class=\"line\">                root = root-&gt;left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            root = stk.top();</span><br><span class=\"line\">            stk.pop();</span><br><span class=\"line\">            res.push_back(root-&gt;val);</span><br><span class=\"line\">            root = root-&gt;right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-95-不同的二叉搜索树-ii\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-95-不同的二叉搜索树-ii\"></a> Leetcode 95 <a href=\"https://leetcode-cn.com/problems/unique-binary-search-trees-ii/\" target=\"_blank\" rel=\"noopener\">不同的二叉搜索树 II</a></h4>\n<blockquote>\n<p>给定一个整数 <em>n</em>，生成所有由 1 … <em>n</em> 为节点所组成的 <strong>二叉搜索树</strong> 。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;TreeNode*&gt; <span class=\"title\">generateTrees</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> generateTrees(<span class=\"number\">1</span>,n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;TreeNode*&gt; <span class=\"title\">generateTrees</span><span class=\"params\">(<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> <span class=\"built_in\">end</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start&gt;<span class=\"built_in\">end</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;TreeNode*&gt; allTrees;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=start;i&lt;=<span class=\"built_in\">end</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">vector</span>&lt;TreeNode*&gt; leftTrees=generateTrees(start,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">vector</span>&lt;TreeNode*&gt; rightTrees=generateTrees(i+<span class=\"number\">1</span>,<span class=\"built_in\">end</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;lTree:leftTrees)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;rTree:rightTrees)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    TreeNode* node=<span class=\"keyword\">new</span> TreeNode(i);</span><br><span class=\"line\">                    node-&gt;right=rTree;</span><br><span class=\"line\">                    node-&gt;left=lTree;</span><br><span class=\"line\">                    allTrees.push_back(node);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> allTrees;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-101-对称二叉树\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-101-对称二叉树\"></a> Leetcode 101 <a href=\"https://leetcode-cn.com/problems/symmetric-tree/\" target=\"_blank\" rel=\"noopener\">对称二叉树</a></h4>\n<blockquote>\n<p>给定一个二叉树，检查它是否是镜像对称的。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">func</span><span class=\"params\">(TreeNode *left,TreeNode *right)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left==<span class=\"literal\">NULL</span>&amp;&amp;right==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left!=<span class=\"literal\">NULL</span>&amp;&amp;right!=<span class=\"literal\">NULL</span>&amp;&amp;left-&gt;val==right-&gt;val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(left-&gt;left,right-&gt;right)&amp;&amp;func(left-&gt;right,right-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isSymmetric</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(root-&gt;left,root-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"二叉树\"><a class=\"markdownIt-Anchor\" href=\"#二叉树\"></a> 二叉树</h2>\n<h4 id=\"leetcode-94-二叉树的中序遍历\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-94-二叉树的中序遍历\"></a> Leetcode 94 <a href=\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/\" target=\"_blank\" rel=\"noopener\">二叉树的中序遍历</a></h4>\n<blockquote>\n<p>给定一个二叉树，返回它的中序 遍历。</p>\n<p>示例:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">输入: [<span class=\"number\">1</span>,null,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">   <span class=\"number\">1</span></span><br><span class=\"line\">    \\</span><br><span class=\"line\">     <span class=\"number\">2</span></span><br><span class=\"line\">    /</span><br><span class=\"line\">   <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">输出: [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>递归解法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res;</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>&lt;TreeNode*&gt; stk;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (root != <span class=\"literal\">nullptr</span> || !stk.empty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (root != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">                stk.push(root);</span><br><span class=\"line\">                root = root-&gt;left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            root = stk.top();</span><br><span class=\"line\">            stk.pop();</span><br><span class=\"line\">            res.push_back(root-&gt;val);</span><br><span class=\"line\">            root = root-&gt;right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-95-不同的二叉搜索树-ii\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-95-不同的二叉搜索树-ii\"></a> Leetcode 95 <a href=\"https://leetcode-cn.com/problems/unique-binary-search-trees-ii/\" target=\"_blank\" rel=\"noopener\">不同的二叉搜索树 II</a></h4>\n<blockquote>\n<p>给定一个整数 <em>n</em>，生成所有由 1 … <em>n</em> 为节点所组成的 <strong>二叉搜索树</strong> 。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;TreeNode*&gt; <span class=\"title\">generateTrees</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> generateTrees(<span class=\"number\">1</span>,n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;TreeNode*&gt; <span class=\"title\">generateTrees</span><span class=\"params\">(<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> <span class=\"built_in\">end</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start&gt;<span class=\"built_in\">end</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"literal\">nullptr</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;TreeNode*&gt; allTrees;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=start;i&lt;=<span class=\"built_in\">end</span>;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">vector</span>&lt;TreeNode*&gt; leftTrees=generateTrees(start,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">            <span class=\"built_in\">vector</span>&lt;TreeNode*&gt; rightTrees=generateTrees(i+<span class=\"number\">1</span>,<span class=\"built_in\">end</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;lTree:leftTrees)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;rTree:rightTrees)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    TreeNode* node=<span class=\"keyword\">new</span> TreeNode(i);</span><br><span class=\"line\">                    node-&gt;right=rTree;</span><br><span class=\"line\">                    node-&gt;left=lTree;</span><br><span class=\"line\">                    allTrees.push_back(node);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> allTrees;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-101-对称二叉树\"><a class=\"markdownIt-Anchor\" href=\"#leetcode-101-对称二叉树\"></a> Leetcode 101 <a href=\"https://leetcode-cn.com/problems/symmetric-tree/\" target=\"_blank\" rel=\"noopener\">对称二叉树</a></h4>\n<blockquote>\n<p>给定一个二叉树，检查它是否是镜像对称的。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">func</span><span class=\"params\">(TreeNode *left,TreeNode *right)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left==<span class=\"literal\">NULL</span>&amp;&amp;right==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left!=<span class=\"literal\">NULL</span>&amp;&amp;right!=<span class=\"literal\">NULL</span>&amp;&amp;left-&gt;val==right-&gt;val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(left-&gt;left,right-&gt;right)&amp;&amp;func(left-&gt;right,right-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isSymmetric</span><span class=\"params\">(TreeNode* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(root-&gt;left,root-&gt;right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"[LeetCode] Index","date":"2020-12-06T09:07:00.000Z","_content":"\n## Leetcode\n\n","source":"_posts/leetcode/leetcode.md","raw":"---\ntitle: '[LeetCode] Index'\ndate: 2020-12-6 17:07\ntags:\n- LeetCode\ncategories:\n- 算法\n---\n\n## Leetcode\n\n","slug":"leetcode/leetcode","published":1,"updated":"2020-12-06T09:12:33.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtuam001n2kwj4ynzfou4","content":"<h2 id=\"leetcode\"><a class=\"markdownIt-Anchor\" href=\"#leetcode\"></a> Leetcode</h2>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"leetcode\"><a class=\"markdownIt-Anchor\" href=\"#leetcode\"></a> Leetcode</h2>\n"},{"_content":"## Linux 常用网络API\n\n#### IPv4 专用socket地址结构体\n\n```c\nstruct sockaddr_in\n{\n    sa_family_t sin_family;     /* 地址族：AF_INET */\n    u_int16_t sin_port;         /* 端口号，要用网络字节序表示 */\n    struct in_addr sin_addr;    /* IPv4地址结构体，见下面 */\n};\nstruct in_addr\n{\n    u_int32_t s_addr;           /* IPv4地址，要用网络字节序表示 */\n};\n```\n\n所有专用socket地址（以及sockaddr_storage）类型的变量在实际使用时都需要转化为通用socket地址类型sockaddr（强制转换即可），因为所有socket编程接口使用的地址参数的类型都是sockaddr\n\n#### 创建socket\n\n```c\n#include<sys/types.h>\n#include<sys/socket.h>\nint socket(int domain, int type, int protocol);\n```\n\n- domain：底层协议簇\n  - PF_INET (Protocol Family of Internet，用于IPv4)\n  - PF_INET6 (用于IPv6)\n- type：服务类型\n  - SOCK_STREAM 流服务\n  - SOCK_UGRAM 数据报\n- protocol：一般0\n- 成功返回0，失败返回-1并设置errno\n\n#### 命名socket\n\n```c\n#include<sys/types.h>\n#include<sys/socket.h>\nint bind(int sockfd, const struct sockaddr* my_addr, socklen_t addrlen);\n```\n\n成功返回0，失败返回-1并设置errno。两种常见的errno是EACCES（被绑定的地址是受保护的地址，仅超级用户能够访问，如普通用户绑定到知名服务端口）；EADDRINUSE（被绑定的地址正在使用中）\n\n#### 监听socket\n\n```c\n#include<sys/socket.h>\nint listen(int sockfd, int backlog);\n```\n\nbacklog参数提示内核监听队列的最大长度。监听的队列的长度超过backlog，服务器将不受理新的客户连接，客户端也将收到ECONNREFUSED错误信息\n\n成功返回0，失败返回-1并设置errno\n\n#### 接受连接\n\n从监听队列中接受一个连接：\n\n```c\n#include<sys/types.h>\n#include<sys/socket.h>\nint accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);\n```\n\n成功返回一个新的连接socket，用于通信。失败返回-1并设置errno\n\n####  发起连接\n\n客户端主动与服务器建立连接：\n\n```c\n#include<sys/types.h>\n#include<sys/socket.h>\nint connect(int sockfd, const struct sockaddr *serv_addr, socklen_t addrlen);\n```\n\n成功返回0，并可通过sockfd进行通信，失败返回-1并设置errno。两种常见的errno是ECONNREFUSED（目标端口不存在）；ETIMEDOUT（连接超时）\n\n#### 关闭连接\n\n```c\n#include<unistd.h>\nint close(int fd);\n```\n\n#### TCP数据读写\n\n```c\n#include<sys/types.h>\n#include<sys/socket.h>\nssize_t recv(int sockfd, void *buf, size_t len, int flags);\nssize_t send(int sockfd, const void *buf, size_t len, int flags);\n```\n\nrecv读取sockfd上的数据，成功时返回实际读取到数据的长度，可能小于我们期望的长度len，失败返回-1并设置errno\n\nsend往sockfd上写入数据，成功时返回实际写入的数据的长度，失败返回-1并设置errno\n\nflag参数为数据收发提供额外控制\n\n#### 地址信息函数\n\n```c\n#include<sys/socket.h>\nint getsockname(int sockfd, struct sockaddr* address, socklen_t* address_len);\nint getpeername(int sockfd, struct sockaddr* address, socklen_t* address_len);\n```\n\ngetsockname获取sockfd对应的本端socket地址\n\ngetpeername获取sockfd对应的远端socket地址\n\n#### getaddrinfo & getnameinfo\n\n```c\n/******************************** \n * Client/server helper functions\n ********************************/\n/*\n * open_clientfd - Open connection to server at <hostname, port> and\n *     return a socket descriptor ready for reading and writing. This\n *     function is reentrant and protocol-independent.\n *\n *     On error, returns: \n *       -2 for getaddrinfo error\n *       -1 with errno set for other errors.\n */\n/* $begin open_clientfd */\nint open_clientfd(char *hostname, char *port) {\n    int clientfd, rc;\n    struct addrinfo hints, *listp, *p;\n\n    /* Get a list of potential server addresses */\n    memset(&hints, 0, sizeof(struct addrinfo));\n    hints.ai_socktype = SOCK_STREAM;  /* Open a connection */\n    hints.ai_flags = AI_NUMERICSERV;  /* ... using a numeric port arg. */\n    hints.ai_flags |= AI_ADDRCONFIG;  /* Recommended for connections */\n    if ((rc = getaddrinfo(hostname, port, &hints, &listp)) != 0) {\n        fprintf(stderr, \"getaddrinfo failed (%s:%s): %s\\n\", hostname, port, gai_strerror(rc));\n        return -2;\n    }\n  \n    /* Walk the list for one that we can successfully connect to */\n    for (p = listp; p; p = p->ai_next) {\n        /* Create a socket descriptor */\n        if ((clientfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) < 0) \n            continue; /* Socket failed, try the next */\n\n        /* Connect to the server */\n        if (connect(clientfd, p->ai_addr, p->ai_addrlen) != -1) \n            break; /* Success */\n        if (close(clientfd) < 0) { /* Connect failed, try another */  //line:netp:openclientfd:closefd\n            fprintf(stderr, \"open_clientfd: close failed: %s\\n\", strerror(errno));\n            return -1;\n        } \n    } \n\n    /* Clean up */\n    freeaddrinfo(listp);\n    if (!p) /* All connects failed */\n        return -1;\n    else    /* The last connect succeeded */\n        return clientfd;\n}\n/* $end open_clientfd */\n\n/*  \n * open_listenfd - Open and return a listening socket on port. This\n *     function is reentrant and protocol-independent.\n *\n *     On error, returns: \n *       -2 for getaddrinfo error\n *       -1 with errno set for other errors.\n */\n/* $begin open_listenfd */\nint open_listenfd(char *port) \n{\n    struct addrinfo hints, *listp, *p;\n    int listenfd, rc, optval=1;\n\n    /* Get a list of potential server addresses */\n    memset(&hints, 0, sizeof(struct addrinfo));\n    hints.ai_socktype = SOCK_STREAM;             /* Accept connections */\n    hints.ai_flags = AI_PASSIVE | AI_ADDRCONFIG; /* ... on any IP address */\n    hints.ai_flags |= AI_NUMERICSERV;            /* ... using port number */\n    if ((rc = getaddrinfo(NULL, port, &hints, &listp)) != 0) {\n        fprintf(stderr, \"getaddrinfo failed (port %s): %s\\n\", port, gai_strerror(rc));\n        return -2;\n    }\n\n    /* Walk the list for one that we can bind to */\n    for (p = listp; p; p = p->ai_next) {\n        /* Create a socket descriptor */\n        if ((listenfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) < 0) \n            continue;  /* Socket failed, try the next */\n\n        /* Eliminates \"Address already in use\" error from bind */\n        setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR,    //line:netp:csapp:setsockopt\n                   (const void *)&optval , sizeof(int));\n\n        /* Bind the descriptor to the address */\n        if (bind(listenfd, p->ai_addr, p->ai_addrlen) == 0)\n            break; /* Success */\n        if (close(listenfd) < 0) { /* Bind failed, try the next */\n            fprintf(stderr, \"open_listenfd close failed: %s\\n\", strerror(errno));\n            return -1;\n        }\n    }\n\n\n    /* Clean up */\n    freeaddrinfo(listp);\n    if (!p) /* No address worked */\n        return -1;\n\n    /* Make it a listening socket ready to accept connection requests */\n    if (listen(listenfd, LISTENQ) < 0) {\n        close(listenfd);\n\treturn -1;\n    }\n    return listenfd;\n}\n/* $end open_listenfd */\n```\n\n","source":"_posts/net-programing/Linux-API.md","raw":"## Linux 常用网络API\n\n#### IPv4 专用socket地址结构体\n\n```c\nstruct sockaddr_in\n{\n    sa_family_t sin_family;     /* 地址族：AF_INET */\n    u_int16_t sin_port;         /* 端口号，要用网络字节序表示 */\n    struct in_addr sin_addr;    /* IPv4地址结构体，见下面 */\n};\nstruct in_addr\n{\n    u_int32_t s_addr;           /* IPv4地址，要用网络字节序表示 */\n};\n```\n\n所有专用socket地址（以及sockaddr_storage）类型的变量在实际使用时都需要转化为通用socket地址类型sockaddr（强制转换即可），因为所有socket编程接口使用的地址参数的类型都是sockaddr\n\n#### 创建socket\n\n```c\n#include<sys/types.h>\n#include<sys/socket.h>\nint socket(int domain, int type, int protocol);\n```\n\n- domain：底层协议簇\n  - PF_INET (Protocol Family of Internet，用于IPv4)\n  - PF_INET6 (用于IPv6)\n- type：服务类型\n  - SOCK_STREAM 流服务\n  - SOCK_UGRAM 数据报\n- protocol：一般0\n- 成功返回0，失败返回-1并设置errno\n\n#### 命名socket\n\n```c\n#include<sys/types.h>\n#include<sys/socket.h>\nint bind(int sockfd, const struct sockaddr* my_addr, socklen_t addrlen);\n```\n\n成功返回0，失败返回-1并设置errno。两种常见的errno是EACCES（被绑定的地址是受保护的地址，仅超级用户能够访问，如普通用户绑定到知名服务端口）；EADDRINUSE（被绑定的地址正在使用中）\n\n#### 监听socket\n\n```c\n#include<sys/socket.h>\nint listen(int sockfd, int backlog);\n```\n\nbacklog参数提示内核监听队列的最大长度。监听的队列的长度超过backlog，服务器将不受理新的客户连接，客户端也将收到ECONNREFUSED错误信息\n\n成功返回0，失败返回-1并设置errno\n\n#### 接受连接\n\n从监听队列中接受一个连接：\n\n```c\n#include<sys/types.h>\n#include<sys/socket.h>\nint accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);\n```\n\n成功返回一个新的连接socket，用于通信。失败返回-1并设置errno\n\n####  发起连接\n\n客户端主动与服务器建立连接：\n\n```c\n#include<sys/types.h>\n#include<sys/socket.h>\nint connect(int sockfd, const struct sockaddr *serv_addr, socklen_t addrlen);\n```\n\n成功返回0，并可通过sockfd进行通信，失败返回-1并设置errno。两种常见的errno是ECONNREFUSED（目标端口不存在）；ETIMEDOUT（连接超时）\n\n#### 关闭连接\n\n```c\n#include<unistd.h>\nint close(int fd);\n```\n\n#### TCP数据读写\n\n```c\n#include<sys/types.h>\n#include<sys/socket.h>\nssize_t recv(int sockfd, void *buf, size_t len, int flags);\nssize_t send(int sockfd, const void *buf, size_t len, int flags);\n```\n\nrecv读取sockfd上的数据，成功时返回实际读取到数据的长度，可能小于我们期望的长度len，失败返回-1并设置errno\n\nsend往sockfd上写入数据，成功时返回实际写入的数据的长度，失败返回-1并设置errno\n\nflag参数为数据收发提供额外控制\n\n#### 地址信息函数\n\n```c\n#include<sys/socket.h>\nint getsockname(int sockfd, struct sockaddr* address, socklen_t* address_len);\nint getpeername(int sockfd, struct sockaddr* address, socklen_t* address_len);\n```\n\ngetsockname获取sockfd对应的本端socket地址\n\ngetpeername获取sockfd对应的远端socket地址\n\n#### getaddrinfo & getnameinfo\n\n```c\n/******************************** \n * Client/server helper functions\n ********************************/\n/*\n * open_clientfd - Open connection to server at <hostname, port> and\n *     return a socket descriptor ready for reading and writing. This\n *     function is reentrant and protocol-independent.\n *\n *     On error, returns: \n *       -2 for getaddrinfo error\n *       -1 with errno set for other errors.\n */\n/* $begin open_clientfd */\nint open_clientfd(char *hostname, char *port) {\n    int clientfd, rc;\n    struct addrinfo hints, *listp, *p;\n\n    /* Get a list of potential server addresses */\n    memset(&hints, 0, sizeof(struct addrinfo));\n    hints.ai_socktype = SOCK_STREAM;  /* Open a connection */\n    hints.ai_flags = AI_NUMERICSERV;  /* ... using a numeric port arg. */\n    hints.ai_flags |= AI_ADDRCONFIG;  /* Recommended for connections */\n    if ((rc = getaddrinfo(hostname, port, &hints, &listp)) != 0) {\n        fprintf(stderr, \"getaddrinfo failed (%s:%s): %s\\n\", hostname, port, gai_strerror(rc));\n        return -2;\n    }\n  \n    /* Walk the list for one that we can successfully connect to */\n    for (p = listp; p; p = p->ai_next) {\n        /* Create a socket descriptor */\n        if ((clientfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) < 0) \n            continue; /* Socket failed, try the next */\n\n        /* Connect to the server */\n        if (connect(clientfd, p->ai_addr, p->ai_addrlen) != -1) \n            break; /* Success */\n        if (close(clientfd) < 0) { /* Connect failed, try another */  //line:netp:openclientfd:closefd\n            fprintf(stderr, \"open_clientfd: close failed: %s\\n\", strerror(errno));\n            return -1;\n        } \n    } \n\n    /* Clean up */\n    freeaddrinfo(listp);\n    if (!p) /* All connects failed */\n        return -1;\n    else    /* The last connect succeeded */\n        return clientfd;\n}\n/* $end open_clientfd */\n\n/*  \n * open_listenfd - Open and return a listening socket on port. This\n *     function is reentrant and protocol-independent.\n *\n *     On error, returns: \n *       -2 for getaddrinfo error\n *       -1 with errno set for other errors.\n */\n/* $begin open_listenfd */\nint open_listenfd(char *port) \n{\n    struct addrinfo hints, *listp, *p;\n    int listenfd, rc, optval=1;\n\n    /* Get a list of potential server addresses */\n    memset(&hints, 0, sizeof(struct addrinfo));\n    hints.ai_socktype = SOCK_STREAM;             /* Accept connections */\n    hints.ai_flags = AI_PASSIVE | AI_ADDRCONFIG; /* ... on any IP address */\n    hints.ai_flags |= AI_NUMERICSERV;            /* ... using port number */\n    if ((rc = getaddrinfo(NULL, port, &hints, &listp)) != 0) {\n        fprintf(stderr, \"getaddrinfo failed (port %s): %s\\n\", port, gai_strerror(rc));\n        return -2;\n    }\n\n    /* Walk the list for one that we can bind to */\n    for (p = listp; p; p = p->ai_next) {\n        /* Create a socket descriptor */\n        if ((listenfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) < 0) \n            continue;  /* Socket failed, try the next */\n\n        /* Eliminates \"Address already in use\" error from bind */\n        setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR,    //line:netp:csapp:setsockopt\n                   (const void *)&optval , sizeof(int));\n\n        /* Bind the descriptor to the address */\n        if (bind(listenfd, p->ai_addr, p->ai_addrlen) == 0)\n            break; /* Success */\n        if (close(listenfd) < 0) { /* Bind failed, try the next */\n            fprintf(stderr, \"open_listenfd close failed: %s\\n\", strerror(errno));\n            return -1;\n        }\n    }\n\n\n    /* Clean up */\n    freeaddrinfo(listp);\n    if (!p) /* No address worked */\n        return -1;\n\n    /* Make it a listening socket ready to accept connection requests */\n    if (listen(listenfd, LISTENQ) < 0) {\n        close(listenfd);\n\treturn -1;\n    }\n    return listenfd;\n}\n/* $end open_listenfd */\n```\n\n","slug":"net-programing/Linux-API","published":1,"date":"2020-11-06T15:49:17.307Z","updated":"2020-11-06T15:49:17.307Z","title":"net-programing/Linux-API","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtuao001q2kwjcvu58sif","content":"<h2 id=\"linux-常用网络api\"><a class=\"markdownIt-Anchor\" href=\"#linux-常用网络api\"></a> Linux 常用网络API</h2>\n<h4 id=\"ipv4-专用socket地址结构体\"><a class=\"markdownIt-Anchor\" href=\"#ipv4-专用socket地址结构体\"></a> IPv4 专用socket地址结构体</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">sa_family_t</span> sin_family;     <span class=\"comment\">/* 地址族：AF_INET */</span></span><br><span class=\"line\">    <span class=\"keyword\">u_int16_t</span> sin_port;         <span class=\"comment\">/* 端口号，要用网络字节序表示 */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">sin_addr</span>;</span>    <span class=\"comment\">/* IPv4地址结构体，见下面 */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">u_int32_t</span> s_addr;           <span class=\"comment\">/* IPv4地址，要用网络字节序表示 */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>所有专用socket地址（以及sockaddr_storage）类型的变量在实际使用时都需要转化为通用socket地址类型sockaddr（强制转换即可），因为所有socket编程接口使用的地址参数的类型都是sockaddr</p>\n<h4 id=\"创建socket\"><a class=\"markdownIt-Anchor\" href=\"#创建socket\"></a> 创建socket</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">socket</span><span class=\"params\">(<span class=\"keyword\">int</span> domain, <span class=\"keyword\">int</span> type, <span class=\"keyword\">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>domain：底层协议簇\n<ul>\n<li>PF_INET (Protocol Family of Internet，用于IPv4)</li>\n<li>PF_INET6 (用于IPv6)</li>\n</ul>\n</li>\n<li>type：服务类型\n<ul>\n<li>SOCK_STREAM 流服务</li>\n<li>SOCK_UGRAM 数据报</li>\n</ul>\n</li>\n<li>protocol：一般0</li>\n<li>成功返回0，失败返回-1并设置errno</li>\n</ul>\n<h4 id=\"命名socket\"><a class=\"markdownIt-Anchor\" href=\"#命名socket\"></a> 命名socket</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bind</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">const</span> struct sockaddr* my_addr, <span class=\"keyword\">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>成功返回0，失败返回-1并设置errno。两种常见的errno是EACCES（被绑定的地址是受保护的地址，仅超级用户能够访问，如普通用户绑定到知名服务端口）；EADDRINUSE（被绑定的地址正在使用中）</p>\n<h4 id=\"监听socket\"><a class=\"markdownIt-Anchor\" href=\"#监听socket\"></a> 监听socket</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">listen</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">int</span> backlog)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>backlog参数提示内核监听队列的最大长度。监听的队列的长度超过backlog，服务器将不受理新的客户连接，客户端也将收到ECONNREFUSED错误信息</p>\n<p>成功返回0，失败返回-1并设置errno</p>\n<h4 id=\"接受连接\"><a class=\"markdownIt-Anchor\" href=\"#接受连接\"></a> 接受连接</h4>\n<p>从监听队列中接受一个连接：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">accept</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct sockaddr *addr, <span class=\"keyword\">socklen_t</span> *addrlen)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>成功返回一个新的连接socket，用于通信。失败返回-1并设置errno</p>\n<h4 id=\"发起连接\"><a class=\"markdownIt-Anchor\" href=\"#发起连接\"></a> 发起连接</h4>\n<p>客户端主动与服务器建立连接：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">connect</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">const</span> struct sockaddr *serv_addr, <span class=\"keyword\">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>成功返回0，并可通过sockfd进行通信，失败返回-1并设置errno。两种常见的errno是ECONNREFUSED（目标端口不存在）；ETIMEDOUT（连接超时）</p>\n<h4 id=\"关闭连接\"><a class=\"markdownIt-Anchor\" href=\"#关闭连接\"></a> 关闭连接</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">close</span><span class=\"params\">(<span class=\"keyword\">int</span> fd)</span></span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"tcp数据读写\"><a class=\"markdownIt-Anchor\" href=\"#tcp数据读写\"></a> TCP数据读写</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">recv</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> flags)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>recv读取sockfd上的数据，成功时返回实际读取到数据的长度，可能小于我们期望的长度len，失败返回-1并设置errno</p>\n<p>send往sockfd上写入数据，成功时返回实际写入的数据的长度，失败返回-1并设置errno</p>\n<p>flag参数为数据收发提供额外控制</p>\n<h4 id=\"地址信息函数\"><a class=\"markdownIt-Anchor\" href=\"#地址信息函数\"></a> 地址信息函数</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getsockname</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct sockaddr* address, <span class=\"keyword\">socklen_t</span>* address_len)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getpeername</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct sockaddr* address, <span class=\"keyword\">socklen_t</span>* address_len)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>getsockname获取sockfd对应的本端socket地址</p>\n<p>getpeername获取sockfd对应的远端socket地址</p>\n<h4 id=\"getaddrinfo-getnameinfo\"><a class=\"markdownIt-Anchor\" href=\"#getaddrinfo-getnameinfo\"></a> getaddrinfo &amp; getnameinfo</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******************************** </span></span><br><span class=\"line\"><span class=\"comment\"> * Client/server helper functions</span></span><br><span class=\"line\"><span class=\"comment\"> ********************************/</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * open_clientfd - Open connection to server at &lt;hostname, port&gt; and</span></span><br><span class=\"line\"><span class=\"comment\"> *     return a socket descriptor ready for reading and writing. This</span></span><br><span class=\"line\"><span class=\"comment\"> *     function is reentrant and protocol-independent.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     On error, returns: </span></span><br><span class=\"line\"><span class=\"comment\"> *       -2 for getaddrinfo error</span></span><br><span class=\"line\"><span class=\"comment\"> *       -1 with errno set for other errors.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* $begin open_clientfd */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">open_clientfd</span><span class=\"params\">(<span class=\"keyword\">char</span> *hostname, <span class=\"keyword\">char</span> *port)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> clientfd, rc;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">addrinfo</span> <span class=\"title\">hints</span>, *<span class=\"title\">listp</span>, *<span class=\"title\">p</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Get a list of potential server addresses */</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;hints, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct addrinfo));</span><br><span class=\"line\">    hints.ai_socktype = SOCK_STREAM;  <span class=\"comment\">/* Open a connection */</span></span><br><span class=\"line\">    hints.ai_flags = AI_NUMERICSERV;  <span class=\"comment\">/* ... using a numeric port arg. */</span></span><br><span class=\"line\">    hints.ai_flags |= AI_ADDRCONFIG;  <span class=\"comment\">/* Recommended for connections */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((rc = getaddrinfo(hostname, port, &amp;hints, &amp;listp)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"getaddrinfo failed (%s:%s): %s\\n\"</span>, hostname, port, gai_strerror(rc));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/* Walk the list for one that we can successfully connect to */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (p = listp; p; p = p-&gt;ai_next) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Create a socket descriptor */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((clientfd = socket(p-&gt;ai_family, p-&gt;ai_socktype, p-&gt;ai_protocol)) &lt; <span class=\"number\">0</span>) </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>; <span class=\"comment\">/* Socket failed, try the next */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Connect to the server */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">connect</span>(clientfd, p-&gt;ai_addr, p-&gt;ai_addrlen) != <span class=\"number\">-1</span>) </span><br><span class=\"line\">            <span class=\"keyword\">break</span>; <span class=\"comment\">/* Success */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">close</span>(clientfd) &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">/* Connect failed, try another */</span>  <span class=\"comment\">//line:netp:openclientfd:closefd</span></span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"open_clientfd: close failed: %s\\n\"</span>, strerror(errno));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Clean up */</span></span><br><span class=\"line\">    freeaddrinfo(listp);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!p) <span class=\"comment\">/* All connects failed */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>    <span class=\"comment\">/* The last connect succeeded */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> clientfd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* $end open_clientfd */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  </span></span><br><span class=\"line\"><span class=\"comment\"> * open_listenfd - Open and return a listening socket on port. This</span></span><br><span class=\"line\"><span class=\"comment\"> *     function is reentrant and protocol-independent.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     On error, returns: </span></span><br><span class=\"line\"><span class=\"comment\"> *       -2 for getaddrinfo error</span></span><br><span class=\"line\"><span class=\"comment\"> *       -1 with errno set for other errors.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* $begin open_listenfd */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">open_listenfd</span><span class=\"params\">(<span class=\"keyword\">char</span> *port)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">addrinfo</span> <span class=\"title\">hints</span>, *<span class=\"title\">listp</span>, *<span class=\"title\">p</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> listenfd, rc, optval=<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Get a list of potential server addresses */</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;hints, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct addrinfo));</span><br><span class=\"line\">    hints.ai_socktype = SOCK_STREAM;             <span class=\"comment\">/* Accept connections */</span></span><br><span class=\"line\">    hints.ai_flags = AI_PASSIVE | AI_ADDRCONFIG; <span class=\"comment\">/* ... on any IP address */</span></span><br><span class=\"line\">    hints.ai_flags |= AI_NUMERICSERV;            <span class=\"comment\">/* ... using port number */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((rc = getaddrinfo(<span class=\"literal\">NULL</span>, port, &amp;hints, &amp;listp)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"getaddrinfo failed (port %s): %s\\n\"</span>, port, gai_strerror(rc));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Walk the list for one that we can bind to */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (p = listp; p; p = p-&gt;ai_next) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Create a socket descriptor */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((listenfd = socket(p-&gt;ai_family, p-&gt;ai_socktype, p-&gt;ai_protocol)) &lt; <span class=\"number\">0</span>) </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;  <span class=\"comment\">/* Socket failed, try the next */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Eliminates \"Address already in use\" error from bind */</span></span><br><span class=\"line\">        setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR,    <span class=\"comment\">//line:netp:csapp:setsockopt</span></span><br><span class=\"line\">                   (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *)&amp;optval , <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Bind the descriptor to the address */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bind(listenfd, p-&gt;ai_addr, p-&gt;ai_addrlen) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; <span class=\"comment\">/* Success */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">close</span>(listenfd) &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">/* Bind failed, try the next */</span></span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"open_listenfd close failed: %s\\n\"</span>, strerror(errno));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Clean up */</span></span><br><span class=\"line\">    freeaddrinfo(listp);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!p) <span class=\"comment\">/* No address worked */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Make it a listening socket ready to accept connection requests */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">listen</span>(listenfd, LISTENQ) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(listenfd);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> listenfd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* $end open_listenfd */</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"linux-常用网络api\"><a class=\"markdownIt-Anchor\" href=\"#linux-常用网络api\"></a> Linux 常用网络API</h2>\n<h4 id=\"ipv4-专用socket地址结构体\"><a class=\"markdownIt-Anchor\" href=\"#ipv4-专用socket地址结构体\"></a> IPv4 专用socket地址结构体</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">sa_family_t</span> sin_family;     <span class=\"comment\">/* 地址族：AF_INET */</span></span><br><span class=\"line\">    <span class=\"keyword\">u_int16_t</span> sin_port;         <span class=\"comment\">/* 端口号，要用网络字节序表示 */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">sin_addr</span>;</span>    <span class=\"comment\">/* IPv4地址结构体，见下面 */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">u_int32_t</span> s_addr;           <span class=\"comment\">/* IPv4地址，要用网络字节序表示 */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>所有专用socket地址（以及sockaddr_storage）类型的变量在实际使用时都需要转化为通用socket地址类型sockaddr（强制转换即可），因为所有socket编程接口使用的地址参数的类型都是sockaddr</p>\n<h4 id=\"创建socket\"><a class=\"markdownIt-Anchor\" href=\"#创建socket\"></a> 创建socket</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">socket</span><span class=\"params\">(<span class=\"keyword\">int</span> domain, <span class=\"keyword\">int</span> type, <span class=\"keyword\">int</span> protocol)</span></span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>domain：底层协议簇\n<ul>\n<li>PF_INET (Protocol Family of Internet，用于IPv4)</li>\n<li>PF_INET6 (用于IPv6)</li>\n</ul>\n</li>\n<li>type：服务类型\n<ul>\n<li>SOCK_STREAM 流服务</li>\n<li>SOCK_UGRAM 数据报</li>\n</ul>\n</li>\n<li>protocol：一般0</li>\n<li>成功返回0，失败返回-1并设置errno</li>\n</ul>\n<h4 id=\"命名socket\"><a class=\"markdownIt-Anchor\" href=\"#命名socket\"></a> 命名socket</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bind</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">const</span> struct sockaddr* my_addr, <span class=\"keyword\">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>成功返回0，失败返回-1并设置errno。两种常见的errno是EACCES（被绑定的地址是受保护的地址，仅超级用户能够访问，如普通用户绑定到知名服务端口）；EADDRINUSE（被绑定的地址正在使用中）</p>\n<h4 id=\"监听socket\"><a class=\"markdownIt-Anchor\" href=\"#监听socket\"></a> 监听socket</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">listen</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">int</span> backlog)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>backlog参数提示内核监听队列的最大长度。监听的队列的长度超过backlog，服务器将不受理新的客户连接，客户端也将收到ECONNREFUSED错误信息</p>\n<p>成功返回0，失败返回-1并设置errno</p>\n<h4 id=\"接受连接\"><a class=\"markdownIt-Anchor\" href=\"#接受连接\"></a> 接受连接</h4>\n<p>从监听队列中接受一个连接：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">accept</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct sockaddr *addr, <span class=\"keyword\">socklen_t</span> *addrlen)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>成功返回一个新的连接socket，用于通信。失败返回-1并设置errno</p>\n<h4 id=\"发起连接\"><a class=\"markdownIt-Anchor\" href=\"#发起连接\"></a> 发起连接</h4>\n<p>客户端主动与服务器建立连接：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">connect</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">const</span> struct sockaddr *serv_addr, <span class=\"keyword\">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>成功返回0，并可通过sockfd进行通信，失败返回-1并设置errno。两种常见的errno是ECONNREFUSED（目标端口不存在）；ETIMEDOUT（连接超时）</p>\n<h4 id=\"关闭连接\"><a class=\"markdownIt-Anchor\" href=\"#关闭连接\"></a> 关闭连接</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">close</span><span class=\"params\">(<span class=\"keyword\">int</span> fd)</span></span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"tcp数据读写\"><a class=\"markdownIt-Anchor\" href=\"#tcp数据读写\"></a> TCP数据读写</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">recv</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> flags)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> len, <span class=\"keyword\">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>recv读取sockfd上的数据，成功时返回实际读取到数据的长度，可能小于我们期望的长度len，失败返回-1并设置errno</p>\n<p>send往sockfd上写入数据，成功时返回实际写入的数据的长度，失败返回-1并设置errno</p>\n<p>flag参数为数据收发提供额外控制</p>\n<h4 id=\"地址信息函数\"><a class=\"markdownIt-Anchor\" href=\"#地址信息函数\"></a> 地址信息函数</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getsockname</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct sockaddr* address, <span class=\"keyword\">socklen_t</span>* address_len)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getpeername</span><span class=\"params\">(<span class=\"keyword\">int</span> sockfd, struct sockaddr* address, <span class=\"keyword\">socklen_t</span>* address_len)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>getsockname获取sockfd对应的本端socket地址</p>\n<p>getpeername获取sockfd对应的远端socket地址</p>\n<h4 id=\"getaddrinfo-getnameinfo\"><a class=\"markdownIt-Anchor\" href=\"#getaddrinfo-getnameinfo\"></a> getaddrinfo &amp; getnameinfo</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******************************** </span></span><br><span class=\"line\"><span class=\"comment\"> * Client/server helper functions</span></span><br><span class=\"line\"><span class=\"comment\"> ********************************/</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * open_clientfd - Open connection to server at &lt;hostname, port&gt; and</span></span><br><span class=\"line\"><span class=\"comment\"> *     return a socket descriptor ready for reading and writing. This</span></span><br><span class=\"line\"><span class=\"comment\"> *     function is reentrant and protocol-independent.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     On error, returns: </span></span><br><span class=\"line\"><span class=\"comment\"> *       -2 for getaddrinfo error</span></span><br><span class=\"line\"><span class=\"comment\"> *       -1 with errno set for other errors.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* $begin open_clientfd */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">open_clientfd</span><span class=\"params\">(<span class=\"keyword\">char</span> *hostname, <span class=\"keyword\">char</span> *port)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> clientfd, rc;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">addrinfo</span> <span class=\"title\">hints</span>, *<span class=\"title\">listp</span>, *<span class=\"title\">p</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Get a list of potential server addresses */</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;hints, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct addrinfo));</span><br><span class=\"line\">    hints.ai_socktype = SOCK_STREAM;  <span class=\"comment\">/* Open a connection */</span></span><br><span class=\"line\">    hints.ai_flags = AI_NUMERICSERV;  <span class=\"comment\">/* ... using a numeric port arg. */</span></span><br><span class=\"line\">    hints.ai_flags |= AI_ADDRCONFIG;  <span class=\"comment\">/* Recommended for connections */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((rc = getaddrinfo(hostname, port, &amp;hints, &amp;listp)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"getaddrinfo failed (%s:%s): %s\\n\"</span>, hostname, port, gai_strerror(rc));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/* Walk the list for one that we can successfully connect to */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (p = listp; p; p = p-&gt;ai_next) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Create a socket descriptor */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((clientfd = socket(p-&gt;ai_family, p-&gt;ai_socktype, p-&gt;ai_protocol)) &lt; <span class=\"number\">0</span>) </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>; <span class=\"comment\">/* Socket failed, try the next */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Connect to the server */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">connect</span>(clientfd, p-&gt;ai_addr, p-&gt;ai_addrlen) != <span class=\"number\">-1</span>) </span><br><span class=\"line\">            <span class=\"keyword\">break</span>; <span class=\"comment\">/* Success */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">close</span>(clientfd) &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">/* Connect failed, try another */</span>  <span class=\"comment\">//line:netp:openclientfd:closefd</span></span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"open_clientfd: close failed: %s\\n\"</span>, strerror(errno));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Clean up */</span></span><br><span class=\"line\">    freeaddrinfo(listp);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!p) <span class=\"comment\">/* All connects failed */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>    <span class=\"comment\">/* The last connect succeeded */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> clientfd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* $end open_clientfd */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*  </span></span><br><span class=\"line\"><span class=\"comment\"> * open_listenfd - Open and return a listening socket on port. This</span></span><br><span class=\"line\"><span class=\"comment\"> *     function is reentrant and protocol-independent.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *     On error, returns: </span></span><br><span class=\"line\"><span class=\"comment\"> *       -2 for getaddrinfo error</span></span><br><span class=\"line\"><span class=\"comment\"> *       -1 with errno set for other errors.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/* $begin open_listenfd */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">open_listenfd</span><span class=\"params\">(<span class=\"keyword\">char</span> *port)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">addrinfo</span> <span class=\"title\">hints</span>, *<span class=\"title\">listp</span>, *<span class=\"title\">p</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> listenfd, rc, optval=<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Get a list of potential server addresses */</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;hints, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct addrinfo));</span><br><span class=\"line\">    hints.ai_socktype = SOCK_STREAM;             <span class=\"comment\">/* Accept connections */</span></span><br><span class=\"line\">    hints.ai_flags = AI_PASSIVE | AI_ADDRCONFIG; <span class=\"comment\">/* ... on any IP address */</span></span><br><span class=\"line\">    hints.ai_flags |= AI_NUMERICSERV;            <span class=\"comment\">/* ... using port number */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((rc = getaddrinfo(<span class=\"literal\">NULL</span>, port, &amp;hints, &amp;listp)) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"getaddrinfo failed (port %s): %s\\n\"</span>, port, gai_strerror(rc));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Walk the list for one that we can bind to */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (p = listp; p; p = p-&gt;ai_next) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Create a socket descriptor */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((listenfd = socket(p-&gt;ai_family, p-&gt;ai_socktype, p-&gt;ai_protocol)) &lt; <span class=\"number\">0</span>) </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;  <span class=\"comment\">/* Socket failed, try the next */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Eliminates \"Address already in use\" error from bind */</span></span><br><span class=\"line\">        setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR,    <span class=\"comment\">//line:netp:csapp:setsockopt</span></span><br><span class=\"line\">                   (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *)&amp;optval , <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Bind the descriptor to the address */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bind(listenfd, p-&gt;ai_addr, p-&gt;ai_addrlen) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>; <span class=\"comment\">/* Success */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">close</span>(listenfd) &lt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">/* Bind failed, try the next */</span></span><br><span class=\"line\">            <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"open_listenfd close failed: %s\\n\"</span>, strerror(errno));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Clean up */</span></span><br><span class=\"line\">    freeaddrinfo(listp);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!p) <span class=\"comment\">/* No address worked */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Make it a listening socket ready to accept connection requests */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">listen</span>(listenfd, LISTENQ) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">close</span>(listenfd);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> listenfd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* $end open_listenfd */</span></span><br></pre></td></tr></table></figure>\n"},{"title":"redis数据结构-1","date":"2020-04-30T14:56:00.000Z","_content":"\n## 简单动态字符串sds\nsds 的源码主要在 sds.h 和 sds.c 中\n\n``` c\n/*\n * 保存字符串对象的结构\n */\nstruct sdshdr {\n    \n    // buf 中已占用空间的长度\n    int len;\n\n    // buf 中剩余可用空间的长度\n    int free;\n\n    // 数据空间\n    char buf[];\n};\n```\n其中 buf 数组是柔性数组，在分配的时候不占内存大小\n\nsds.h 中还有两个 inline 的静态函数，用于返回实际保存的字符串长度和可用空间的字符串长度\n``` c\n/*\n * 返回 sds 实际保存的字符串的长度\n */\nstatic inline size_t sdslen(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr))); //buf地址往回sizeof(struct sdshdr))\n    return sh->len;\n}\n```\n\n``` c\n/*\n * 返回 sds 可用空间的长度\n */\nstatic inline size_t sdsavail(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    return sh->free;\n}\n```\n这边用了一个骚操作，用 buf 的数组指针减去8字节，就得到了结构体的初始位置，也就是结构体的指针：\n<div align='center'>\n  <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/redis/20200502162607.png\" height=\"180px\">\n</div>\n这个技巧在 redis 中多处用到\n\nsds 主要接口函数声明：\n``` c\n// 根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的 sds T = O(N)\nsds sdsnewlen(const void *init, size_t initlen);\n\n// 根据给定字符串 init ，创建一个包含同样字符串的 sds T = O(N)\nsds sdsnew(const char *init);\n\n// 创建并返回一个只保存了空字符串 \"\" 的 sds T = O(1)\nsds sdsempty(void);\n\n// 返回 sds 实际保存的字符串的长度 T = O(1)\nsize_t sdslen(const sds s);\n\n// 复制给定 sds 的副本 T = O(N)\nsds sdsdup(const sds s);\n\n// 释放给定的 sds T = O(N)\nvoid sdsfree(sds s);\n\n// 返回 sds 可用空间的长度 T = O(1)\nsize_t sdsavail(const sds s);\n\n// 将 sds 扩充至指定长度，未使用的空间以 0 字节填充 T = O(N)\nsds sdsgrowzero(sds s, size_t len);\n\n// 将长度为 len 的字符串 t 追加到 sds 的字符串末尾 T = O(N)\nsds sdscatlen(sds s, const void *t, size_t len);\n\n// 将给定字符串 t 追加到 sds 的末尾 T = O(N)\nsds sdscat(sds s, const char *t);\n\n// 将另一个 sds 追加到一个 sds 的末尾 T = O(N)\nsds sdscatsds(sds s, const sds t);\n\n// 将字符串 t 的前 len 个字符复制到 sds s 当中，并在字符串的最后添加终结符 T = O(N)\nsds sdscpylen(sds s, const char *t, size_t len);\n\n// 将字符串复制到 sds 当中，覆盖原有的字符 T = O(N)\nsds sdscpy(sds s, const char *t);\n```\n\n其中几个：\n- **sdsnew**   \n  根据给定字符串 init ，创建一个包含同样字符串的 sds\n``` c\nsds sdsnew(const char *init) {\n    size_t initlen = (init == NULL) ? 0 : strlen(init);\n    return sdsnewlen(init, initlen);\n}\n```\n其中调用了：\n- **sdsnewlen**   \n  根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的\n``` c\nsds sdsnewlen(const void *init, size_t initlen) {\n\n    struct sdshdr *sh;\n\n    // 根据是否有初始化内容，选择适当的内存分配方式\n    if (init) {\n        // zmalloc 不初始化所分配的内存\n        sh = zmalloc(sizeof(struct sdshdr)+initlen+1); // 结构体+buf数组+'\\0'\n    } else {\n        // zcalloc 将分配的内存全部初始化为 0\n        sh = zcalloc(sizeof(struct sdshdr)+initlen+1);\n    }\n\n    // 内存分配失败，返回\n    if (sh == NULL) return NULL;\n\n    // 设置初始化长度\n    sh->len = initlen;\n    // 新 sds 不预留任何空间\n    sh->free = 0;\n    // 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中\n    // T = O(N)\n    if (initlen && init)\n        memcpy(sh->buf, init, initlen);\n    // 以 \\0 结尾\n    sh->buf[initlen] = '\\0';\n\n    // 返回 buf 部分，而不是整个 sdshdr\n    return (char*)sh->buf;\n}\n```\n其中 zmalloc 和 zcalloc 为 redis 使用的内存管理工具，在 zmalloc.c 和 zmalloc.h 中定义\n\n## 双端链表\n双端链表 的源码主要在 adlist.h 和 adlist.c 中\n\n双端链表节点：\n``` c\n/*\n * 双端链表节点\n */\ntypedef struct listNode {\n\n    // 前置节点\n    struct listNode *prev;\n\n    // 后置节点\n    struct listNode *next;\n\n    // 节点的值\n    void *value;\n\n} listNode;\n```\n\n双端链表结构:\n``` c\n/*\n * 双端链表结构\n */\ntypedef struct list {\n\n    // 表头节点\n    listNode *head;\n\n    // 表尾节点\n    listNode *tail;\n\n    // 节点值复制函数\n    void *(*dup)(void *ptr);\n\n    // 节点值释放函数\n    void (*free)(void *ptr);\n\n    // 节点值对比函数\n    int (*match)(void *ptr, void *key);\n\n    // 链表所包含的节点数量\n    unsigned long len;\n\n} list;\n```\n\n为了规范化的宏定义函数：\n``` c\n// 返回给定链表所包含的节点数量\n// T = O(1)\n#define listLength(l) ((l)->len)\n// 返回给定链表的表头节点\n// T = O(1)\n#define listFirst(l) ((l)->head)\n// 返回给定链表的表尾节点\n// T = O(1)\n#define listLast(l) ((l)->tail)\n// 返回给定节点的前置节点\n// T = O(1)\n#define listPrevNode(n) ((n)->prev)\n// 返回给定节点的后置节点\n// T = O(1)\n#define listNextNode(n) ((n)->next)\n// 返回给定节点的值\n// T = O(1)\n#define listNodeValue(n) ((n)->value)\n\n// 将链表 l 的值复制函数设置为 m\n// T = O(1)\n#define listSetDupMethod(l,m) ((l)->dup = (m))\n// 将链表 l 的值释放函数设置为 m\n// T = O(1)\n#define listSetFreeMethod(l,m) ((l)->free = (m))\n// 将链表的对比函数设置为 m\n// T = O(1)\n#define listSetMatchMethod(l,m) ((l)->match = (m))\n\n// 返回给定链表的值复制函数\n// T = O(1)\n#define listGetDupMethod(l) ((l)->dup)\n// 返回给定链表的值释放函数\n// T = O(1)\n#define listGetFree(l) ((l)->free)\n// 返回给定链表的值对比函数\n// T = O(1)\n#define listGetMatchMethod(l) ((l)->match)\n```\n\n几个主要接口函数：\n- **listCreate**  \n  创建一个新的链表 T = O(1)\n``` c\nlist *listCreate(void)\n{\n    struct list *list;\n\n    // 分配内存\n    if ((list = zmalloc(sizeof(*list))) == NULL)\n        return NULL;\n\n    // 初始化属性\n    list->head = list->tail = NULL;\n    list->len = 0;\n    list->dup = NULL;\n    list->free = NULL;\n    list->match = NULL;\n\n    return list;\n}\n```\n- **listRelease**  \n  释放整个链表，以及链表中所有节点\n``` c\nvoid listRelease(list *list)\n{\n    unsigned long len;\n    listNode *current, *next;\n\n    // 指向头指针\n    current = list->head;\n    // 遍历整个链表\n    len = list->len;\n    while(len--) {\n        next = current->next;\n\n        // 如果有设置值释放函数，那么调用它\n        if (list->free) list->free(current->value);\n\n        // 释放节点结构\n        zfree(current);\n\n        current = next;\n    }\n\n    // 释放链表结构\n    zfree(list);\n}\n```\n\n- **listAddNodeHead**  \n  将一个包含有给定值指针 value 的新节点添加到链表的表头\n``` c\nlist *listAddNodeHead(list *list, void *value)\n{\n    listNode *node;\n\n    // 为节点分配内存\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值指针\n    node->value = value;\n\n    // 添加节点到空链表\n    if (list->len == 0) {\n        list->head = list->tail = node;\n        node->prev = node->next = NULL;\n    // 添加节点到非空链表\n    } else {\n        node->prev = NULL;\n        node->next = list->head;\n        list->head->prev = node;\n        list->head = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n\n在 redis 双端队列中使用了迭代器这一技巧\n\n双端链表迭代器：\n``` c\n/*\n * 双端链表迭代器\n */\ntypedef struct listIter {\n\n    // 当前迭代到的节点\n    listNode *next;\n\n    // 迭代的方向\n    int direction;\n\n} listIter;\n```\n\n- **listGetIterator**  \n  为给定链表创建一个迭代器，之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点\n``` c\nlistIter *listGetIterator(list *list, int direction)\n{\n    // 为迭代器分配内存\n    listIter *iter;\n    if ((iter = zmalloc(sizeof(*iter))) == NULL) return NULL;\n\n    // 根据迭代方向，设置迭代器的起始节点\n    if (direction == AL_START_HEAD)\n        iter->next = list->head;\n    else\n        iter->next = list->tail;\n\n    // 记录迭代方向\n    iter->direction = direction;\n\n    return iter;\n}\n```\n\n- **listNext**  \n  返回迭代器当前所指向的节点  \n  这个函数其实有两个作用：返回当前迭代器指向的节点 + 使迭代器指向下一个节点（我刚开始还没明白只return了一个current，怎么把iter传出去，后来看了这个函数的使用才知道，因为函数传入的是指针，只要定义一个listIter类型的指针，一直使用该函数就能迭代了\n``` c\nlistNode *listNext(listIter *iter)\n{\n    listNode *current = iter->next;\n\n    if (current != NULL) {\n        // 根据方向选择下一个节点\n        if (iter->direction == AL_START_HEAD)\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->next;\n        else\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->prev;\n    }\n\n    return current;\n}\n```\n\n- **listDup**  \n  复制整个链表  \n  其中就使用了上述的listNext来进行迭代\n``` c\nlist *listDup(list *orig)\n{\n    list *copy;\n    listIter *iter;\n    listNode *node;\n\n    // 创建新链表\n    if ((copy = listCreate()) == NULL)\n        return NULL;\n\n    // 设置节点值处理函数\n    copy->dup = orig->dup;\n    copy->free = orig->free;\n    copy->match = orig->match;\n\n    // 迭代整个输入链表\n    iter = listGetIterator(orig, AL_START_HEAD);\n    while((node = listNext(iter)) != NULL) {\n        void *value;\n\n        // 复制节点值到新节点\n        if (copy->dup) {\n            value = copy->dup(node->value);\n            if (value == NULL) {\n                listRelease(copy);\n                listReleaseIterator(iter);\n                return NULL;\n            }\n        } else\n            value = node->value;\n\n        // 将节点添加到链表\n        if (listAddNodeTail(copy, value) == NULL) {\n            listRelease(copy);\n            listReleaseIterator(iter);\n            return NULL;\n        }\n    }\n\n    // 释放迭代器\n    listReleaseIterator(iter);\n\n    // 返回副本\n    return copy;\n}\n```\n  ","source":"_posts/redis/redis-data-structure-1.md","raw":"---\ntitle: redis数据结构-1\ndate: 2020-4-30 22:56\ntags: redis\ncategories: redis源码\n---\n\n## 简单动态字符串sds\nsds 的源码主要在 sds.h 和 sds.c 中\n\n``` c\n/*\n * 保存字符串对象的结构\n */\nstruct sdshdr {\n    \n    // buf 中已占用空间的长度\n    int len;\n\n    // buf 中剩余可用空间的长度\n    int free;\n\n    // 数据空间\n    char buf[];\n};\n```\n其中 buf 数组是柔性数组，在分配的时候不占内存大小\n\nsds.h 中还有两个 inline 的静态函数，用于返回实际保存的字符串长度和可用空间的字符串长度\n``` c\n/*\n * 返回 sds 实际保存的字符串的长度\n */\nstatic inline size_t sdslen(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr))); //buf地址往回sizeof(struct sdshdr))\n    return sh->len;\n}\n```\n\n``` c\n/*\n * 返回 sds 可用空间的长度\n */\nstatic inline size_t sdsavail(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    return sh->free;\n}\n```\n这边用了一个骚操作，用 buf 的数组指针减去8字节，就得到了结构体的初始位置，也就是结构体的指针：\n<div align='center'>\n  <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/redis/20200502162607.png\" height=\"180px\">\n</div>\n这个技巧在 redis 中多处用到\n\nsds 主要接口函数声明：\n``` c\n// 根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的 sds T = O(N)\nsds sdsnewlen(const void *init, size_t initlen);\n\n// 根据给定字符串 init ，创建一个包含同样字符串的 sds T = O(N)\nsds sdsnew(const char *init);\n\n// 创建并返回一个只保存了空字符串 \"\" 的 sds T = O(1)\nsds sdsempty(void);\n\n// 返回 sds 实际保存的字符串的长度 T = O(1)\nsize_t sdslen(const sds s);\n\n// 复制给定 sds 的副本 T = O(N)\nsds sdsdup(const sds s);\n\n// 释放给定的 sds T = O(N)\nvoid sdsfree(sds s);\n\n// 返回 sds 可用空间的长度 T = O(1)\nsize_t sdsavail(const sds s);\n\n// 将 sds 扩充至指定长度，未使用的空间以 0 字节填充 T = O(N)\nsds sdsgrowzero(sds s, size_t len);\n\n// 将长度为 len 的字符串 t 追加到 sds 的字符串末尾 T = O(N)\nsds sdscatlen(sds s, const void *t, size_t len);\n\n// 将给定字符串 t 追加到 sds 的末尾 T = O(N)\nsds sdscat(sds s, const char *t);\n\n// 将另一个 sds 追加到一个 sds 的末尾 T = O(N)\nsds sdscatsds(sds s, const sds t);\n\n// 将字符串 t 的前 len 个字符复制到 sds s 当中，并在字符串的最后添加终结符 T = O(N)\nsds sdscpylen(sds s, const char *t, size_t len);\n\n// 将字符串复制到 sds 当中，覆盖原有的字符 T = O(N)\nsds sdscpy(sds s, const char *t);\n```\n\n其中几个：\n- **sdsnew**   \n  根据给定字符串 init ，创建一个包含同样字符串的 sds\n``` c\nsds sdsnew(const char *init) {\n    size_t initlen = (init == NULL) ? 0 : strlen(init);\n    return sdsnewlen(init, initlen);\n}\n```\n其中调用了：\n- **sdsnewlen**   \n  根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的\n``` c\nsds sdsnewlen(const void *init, size_t initlen) {\n\n    struct sdshdr *sh;\n\n    // 根据是否有初始化内容，选择适当的内存分配方式\n    if (init) {\n        // zmalloc 不初始化所分配的内存\n        sh = zmalloc(sizeof(struct sdshdr)+initlen+1); // 结构体+buf数组+'\\0'\n    } else {\n        // zcalloc 将分配的内存全部初始化为 0\n        sh = zcalloc(sizeof(struct sdshdr)+initlen+1);\n    }\n\n    // 内存分配失败，返回\n    if (sh == NULL) return NULL;\n\n    // 设置初始化长度\n    sh->len = initlen;\n    // 新 sds 不预留任何空间\n    sh->free = 0;\n    // 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中\n    // T = O(N)\n    if (initlen && init)\n        memcpy(sh->buf, init, initlen);\n    // 以 \\0 结尾\n    sh->buf[initlen] = '\\0';\n\n    // 返回 buf 部分，而不是整个 sdshdr\n    return (char*)sh->buf;\n}\n```\n其中 zmalloc 和 zcalloc 为 redis 使用的内存管理工具，在 zmalloc.c 和 zmalloc.h 中定义\n\n## 双端链表\n双端链表 的源码主要在 adlist.h 和 adlist.c 中\n\n双端链表节点：\n``` c\n/*\n * 双端链表节点\n */\ntypedef struct listNode {\n\n    // 前置节点\n    struct listNode *prev;\n\n    // 后置节点\n    struct listNode *next;\n\n    // 节点的值\n    void *value;\n\n} listNode;\n```\n\n双端链表结构:\n``` c\n/*\n * 双端链表结构\n */\ntypedef struct list {\n\n    // 表头节点\n    listNode *head;\n\n    // 表尾节点\n    listNode *tail;\n\n    // 节点值复制函数\n    void *(*dup)(void *ptr);\n\n    // 节点值释放函数\n    void (*free)(void *ptr);\n\n    // 节点值对比函数\n    int (*match)(void *ptr, void *key);\n\n    // 链表所包含的节点数量\n    unsigned long len;\n\n} list;\n```\n\n为了规范化的宏定义函数：\n``` c\n// 返回给定链表所包含的节点数量\n// T = O(1)\n#define listLength(l) ((l)->len)\n// 返回给定链表的表头节点\n// T = O(1)\n#define listFirst(l) ((l)->head)\n// 返回给定链表的表尾节点\n// T = O(1)\n#define listLast(l) ((l)->tail)\n// 返回给定节点的前置节点\n// T = O(1)\n#define listPrevNode(n) ((n)->prev)\n// 返回给定节点的后置节点\n// T = O(1)\n#define listNextNode(n) ((n)->next)\n// 返回给定节点的值\n// T = O(1)\n#define listNodeValue(n) ((n)->value)\n\n// 将链表 l 的值复制函数设置为 m\n// T = O(1)\n#define listSetDupMethod(l,m) ((l)->dup = (m))\n// 将链表 l 的值释放函数设置为 m\n// T = O(1)\n#define listSetFreeMethod(l,m) ((l)->free = (m))\n// 将链表的对比函数设置为 m\n// T = O(1)\n#define listSetMatchMethod(l,m) ((l)->match = (m))\n\n// 返回给定链表的值复制函数\n// T = O(1)\n#define listGetDupMethod(l) ((l)->dup)\n// 返回给定链表的值释放函数\n// T = O(1)\n#define listGetFree(l) ((l)->free)\n// 返回给定链表的值对比函数\n// T = O(1)\n#define listGetMatchMethod(l) ((l)->match)\n```\n\n几个主要接口函数：\n- **listCreate**  \n  创建一个新的链表 T = O(1)\n``` c\nlist *listCreate(void)\n{\n    struct list *list;\n\n    // 分配内存\n    if ((list = zmalloc(sizeof(*list))) == NULL)\n        return NULL;\n\n    // 初始化属性\n    list->head = list->tail = NULL;\n    list->len = 0;\n    list->dup = NULL;\n    list->free = NULL;\n    list->match = NULL;\n\n    return list;\n}\n```\n- **listRelease**  \n  释放整个链表，以及链表中所有节点\n``` c\nvoid listRelease(list *list)\n{\n    unsigned long len;\n    listNode *current, *next;\n\n    // 指向头指针\n    current = list->head;\n    // 遍历整个链表\n    len = list->len;\n    while(len--) {\n        next = current->next;\n\n        // 如果有设置值释放函数，那么调用它\n        if (list->free) list->free(current->value);\n\n        // 释放节点结构\n        zfree(current);\n\n        current = next;\n    }\n\n    // 释放链表结构\n    zfree(list);\n}\n```\n\n- **listAddNodeHead**  \n  将一个包含有给定值指针 value 的新节点添加到链表的表头\n``` c\nlist *listAddNodeHead(list *list, void *value)\n{\n    listNode *node;\n\n    // 为节点分配内存\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值指针\n    node->value = value;\n\n    // 添加节点到空链表\n    if (list->len == 0) {\n        list->head = list->tail = node;\n        node->prev = node->next = NULL;\n    // 添加节点到非空链表\n    } else {\n        node->prev = NULL;\n        node->next = list->head;\n        list->head->prev = node;\n        list->head = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n\n在 redis 双端队列中使用了迭代器这一技巧\n\n双端链表迭代器：\n``` c\n/*\n * 双端链表迭代器\n */\ntypedef struct listIter {\n\n    // 当前迭代到的节点\n    listNode *next;\n\n    // 迭代的方向\n    int direction;\n\n} listIter;\n```\n\n- **listGetIterator**  \n  为给定链表创建一个迭代器，之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点\n``` c\nlistIter *listGetIterator(list *list, int direction)\n{\n    // 为迭代器分配内存\n    listIter *iter;\n    if ((iter = zmalloc(sizeof(*iter))) == NULL) return NULL;\n\n    // 根据迭代方向，设置迭代器的起始节点\n    if (direction == AL_START_HEAD)\n        iter->next = list->head;\n    else\n        iter->next = list->tail;\n\n    // 记录迭代方向\n    iter->direction = direction;\n\n    return iter;\n}\n```\n\n- **listNext**  \n  返回迭代器当前所指向的节点  \n  这个函数其实有两个作用：返回当前迭代器指向的节点 + 使迭代器指向下一个节点（我刚开始还没明白只return了一个current，怎么把iter传出去，后来看了这个函数的使用才知道，因为函数传入的是指针，只要定义一个listIter类型的指针，一直使用该函数就能迭代了\n``` c\nlistNode *listNext(listIter *iter)\n{\n    listNode *current = iter->next;\n\n    if (current != NULL) {\n        // 根据方向选择下一个节点\n        if (iter->direction == AL_START_HEAD)\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->next;\n        else\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->prev;\n    }\n\n    return current;\n}\n```\n\n- **listDup**  \n  复制整个链表  \n  其中就使用了上述的listNext来进行迭代\n``` c\nlist *listDup(list *orig)\n{\n    list *copy;\n    listIter *iter;\n    listNode *node;\n\n    // 创建新链表\n    if ((copy = listCreate()) == NULL)\n        return NULL;\n\n    // 设置节点值处理函数\n    copy->dup = orig->dup;\n    copy->free = orig->free;\n    copy->match = orig->match;\n\n    // 迭代整个输入链表\n    iter = listGetIterator(orig, AL_START_HEAD);\n    while((node = listNext(iter)) != NULL) {\n        void *value;\n\n        // 复制节点值到新节点\n        if (copy->dup) {\n            value = copy->dup(node->value);\n            if (value == NULL) {\n                listRelease(copy);\n                listReleaseIterator(iter);\n                return NULL;\n            }\n        } else\n            value = node->value;\n\n        // 将节点添加到链表\n        if (listAddNodeTail(copy, value) == NULL) {\n            listRelease(copy);\n            listReleaseIterator(iter);\n            return NULL;\n        }\n    }\n\n    // 释放迭代器\n    listReleaseIterator(iter);\n\n    // 返回副本\n    return copy;\n}\n```\n  ","slug":"redis/redis-data-structure-1","published":1,"updated":"2020-10-07T02:32:01.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtuar001u2kwj5pf5g99c","content":"<h2 id=\"简单动态字符串sds\"><a class=\"markdownIt-Anchor\" href=\"#简单动态字符串sds\"></a> 简单动态字符串sds</h2>\n<p>sds 的源码主要在 sds.h 和 sds.c 中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存字符串对象的结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// buf 中已占用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf 中剩余可用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据空间</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中 buf 数组是柔性数组，在分配的时候不占内存大小</p>\n<p>sds.h 中还有两个 inline 的静态函数，用于返回实际保存的字符串长度和可用空间的字符串长度</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 实际保存的字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">size_t</span> <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span> <span class=\"comment\">//buf地址往回sizeof(struct sdshdr))</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 可用空间的长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">size_t</span> <span class=\"title\">sdsavail</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这边用了一个骚操作，用 buf 的数组指针减去8字节，就得到了结构体的初始位置，也就是结构体的指针：</p>\n<div align='center'>\n  <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/redis/20200502162607.png\" height=\"180px\">\n</div>\n这个技巧在 redis 中多处用到\n<p>sds 主要接口函数声明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的 sds T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据给定字符串 init ，创建一个包含同样字符串的 sds T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnew</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *init)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建并返回一个只保存了空字符串 \"\" 的 sds T = O(1)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsempty</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回 sds 实际保存的字符串的长度 T = O(1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制给定 sds 的副本 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsdup</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放给定的 sds T = O(N)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sdsfree</span><span class=\"params\">(sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回 sds 可用空间的长度 T = O(1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">sdsavail</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 sds 扩充至指定长度，未使用的空间以 0 字节填充 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsgrowzero</span><span class=\"params\">(sds s, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将长度为 len 的字符串 t 追加到 sds 的字符串末尾 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatlen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *t, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将给定字符串 t 追加到 sds 的末尾 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscat</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将另一个 sds 追加到一个 sds 的末尾 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatsds</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> sds t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字符串 t 的前 len 个字符复制到 sds s 当中，并在字符串的最后添加终结符 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpylen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字符串复制到 sds 当中，覆盖原有的字符 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpy</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>其中几个：</p>\n<ul>\n<li><strong>sdsnew</strong><br />\n根据给定字符串 init ，创建一个包含同样字符串的 sds</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnew</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *init)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> initlen = (init == <span class=\"literal\">NULL</span>) ? <span class=\"number\">0</span> : <span class=\"built_in\">strlen</span>(init);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(init, initlen);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中调用了：</p>\n<ul>\n<li><strong>sdsnewlen</strong><br />\n根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据是否有初始化内容，选择适当的内存分配方式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (init) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zmalloc 不初始化所分配的内存</span></span><br><span class=\"line\">        sh = zmalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>); <span class=\"comment\">// 结构体+buf数组+'\\0'</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zcalloc 将分配的内存全部初始化为 0</span></span><br><span class=\"line\">        sh = zcalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存分配失败，返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置初始化长度</span></span><br><span class=\"line\">    sh-&gt;len = initlen;</span><br><span class=\"line\">    <span class=\"comment\">// 新 sds 不预留任何空间</span></span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initlen &amp;&amp; init)</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(sh-&gt;buf, init, initlen);</span><br><span class=\"line\">    <span class=\"comment\">// 以 \\0 结尾</span></span><br><span class=\"line\">    sh-&gt;buf[initlen] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回 buf 部分，而不是整个 sdshdr</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>*)sh-&gt;buf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 zmalloc 和 zcalloc 为 redis 使用的内存管理工具，在 zmalloc.c 和 zmalloc.h 中定义</p>\n<h2 id=\"双端链表\"><a class=\"markdownIt-Anchor\" href=\"#双端链表\"></a> 双端链表</h2>\n<p>双端链表 的源码主要在 adlist.h 和 adlist.c 中</p>\n<p>双端链表节点：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listNode;</span><br></pre></td></tr></table></figure>\n<p>双端链表结构:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表头节点</span></span><br><span class=\"line\">    listNode *head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表尾节点</span></span><br><span class=\"line\">    listNode *tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值复制函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *(*dup)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值释放函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*<span class=\"built_in\">free</span>)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值对比函数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">void</span> *ptr, <span class=\"keyword\">void</span> *key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表所包含的节点数量</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br></pre></td></tr></table></figure>\n<p>为了规范化的宏定义函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回给定链表所包含的节点数量</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listLength(l) ((l)-&gt;len)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的表头节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listFirst(l) ((l)-&gt;head)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的表尾节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listLast(l) ((l)-&gt;tail)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定节点的前置节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listPrevNode(n) ((n)-&gt;prev)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定节点的后置节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listNextNode(n) ((n)-&gt;next)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定节点的值</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listNodeValue(n) ((n)-&gt;value)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将链表 l 的值复制函数设置为 m</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listSetDupMethod(l,m) ((l)-&gt;dup = (m))</span></span><br><span class=\"line\"><span class=\"comment\">// 将链表 l 的值释放函数设置为 m</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listSetFreeMethod(l,m) ((l)-&gt;free = (m))</span></span><br><span class=\"line\"><span class=\"comment\">// 将链表的对比函数设置为 m</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listSetMatchMethod(l,m) ((l)-&gt;match = (m))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的值复制函数</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listGetDupMethod(l) ((l)-&gt;dup)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的值释放函数</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listGetFree(l) ((l)-&gt;free)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的值对比函数</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listGetMatchMethod(l) ((l)-&gt;match)</span></span><br></pre></td></tr></table></figure>\n<p>几个主要接口函数：</p>\n<ul>\n<li><strong>listCreate</strong><br />\n创建一个新的链表 T = O(1)</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listCreate</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">list</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"built_in\">list</span> = zmalloc(<span class=\"keyword\">sizeof</span>(*<span class=\"built_in\">list</span>))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化属性</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;dup = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span> = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;match = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listRelease</strong><br />\n释放整个链表，以及链表中所有节点</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRelease</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\">    listNode *current, *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指向头指针</span></span><br><span class=\"line\">    current = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历整个链表</span></span><br><span class=\"line\">    len = <span class=\"built_in\">list</span>-&gt;len;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(len--) &#123;</span><br><span class=\"line\">        next = current-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果有设置值释放函数，那么调用它</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>) <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>(current-&gt;value);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 释放节点结构</span></span><br><span class=\"line\">        zfree(current);</span><br><span class=\"line\"></span><br><span class=\"line\">        current = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放链表结构</span></span><br><span class=\"line\">    zfree(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listAddNodeHead</strong><br />\n将一个包含有给定值指针 value 的新节点添加到链表的表头</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listAddNodeHead</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为节点分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值指针</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到空链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        node-&gt;prev = node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到非空链表</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        node-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head-&gt;prev = node;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 redis 双端队列中使用了迭代器这一技巧</p>\n<p>双端链表迭代器：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listIter</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前迭代到的节点</span></span><br><span class=\"line\">    listNode *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代的方向</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> direction;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listIter;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listGetIterator</strong><br />\n为给定链表创建一个迭代器，之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">listIter *<span class=\"title\">listGetIterator</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> direction)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 为迭代器分配内存</span></span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((iter = zmalloc(<span class=\"keyword\">sizeof</span>(*iter))) == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据迭代方向，设置迭代器的起始节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (direction == AL_START_HEAD)</span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录迭代方向</span></span><br><span class=\"line\">    iter-&gt;direction = direction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> iter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listNext</strong><br />\n返回迭代器当前所指向的节点<br />\n这个函数其实有两个作用：返回当前迭代器指向的节点 + 使迭代器指向下一个节点（我刚开始还没明白只return了一个current，怎么把iter传出去，后来看了这个函数的使用才知道，因为函数传入的是指针，只要定义一个listIter类型的指针，一直使用该函数就能迭代了</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listNext</span><span class=\"params\">(listIter *iter)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *current = iter-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据方向选择下一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iter-&gt;direction == AL_START_HEAD)</span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listDup</strong><br />\n复制整个链表<br />\n其中就使用了上述的listNext来进行迭代</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listDup</span><span class=\"params\">(<span class=\"built_in\">list</span> *orig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">list</span> *copy;</span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建新链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((copy = listCreate()) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置节点值处理函数</span></span><br><span class=\"line\">    copy-&gt;dup = orig-&gt;dup;</span><br><span class=\"line\">    copy-&gt;<span class=\"built_in\">free</span> = orig-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">    copy-&gt;match = orig-&gt;match;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代整个输入链表</span></span><br><span class=\"line\">    iter = listGetIterator(orig, AL_START_HEAD);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((node = listNext(iter)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 复制节点值到新节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (copy-&gt;dup) &#123;</span><br><span class=\"line\">            value = copy-&gt;dup(node-&gt;value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">                listRelease(copy);</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            value = node-&gt;value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将节点添加到链表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listAddNodeTail(copy, value) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            listRelease(copy);</span><br><span class=\"line\">            listReleaseIterator(iter);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放迭代器</span></span><br><span class=\"line\">    listReleaseIterator(iter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回副本</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"简单动态字符串sds\"><a class=\"markdownIt-Anchor\" href=\"#简单动态字符串sds\"></a> 简单动态字符串sds</h2>\n<p>sds 的源码主要在 sds.h 和 sds.c 中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存字符串对象的结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// buf 中已占用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf 中剩余可用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据空间</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中 buf 数组是柔性数组，在分配的时候不占内存大小</p>\n<p>sds.h 中还有两个 inline 的静态函数，用于返回实际保存的字符串长度和可用空间的字符串长度</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 实际保存的字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">size_t</span> <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span> <span class=\"comment\">//buf地址往回sizeof(struct sdshdr))</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 可用空间的长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">size_t</span> <span class=\"title\">sdsavail</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这边用了一个骚操作，用 buf 的数组指针减去8字节，就得到了结构体的初始位置，也就是结构体的指针：</p>\n<div align='center'>\n  <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/redis/20200502162607.png\" height=\"180px\">\n</div>\n这个技巧在 redis 中多处用到\n<p>sds 主要接口函数声明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的 sds T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据给定字符串 init ，创建一个包含同样字符串的 sds T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnew</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *init)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建并返回一个只保存了空字符串 \"\" 的 sds T = O(1)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsempty</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回 sds 实际保存的字符串的长度 T = O(1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制给定 sds 的副本 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsdup</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放给定的 sds T = O(N)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sdsfree</span><span class=\"params\">(sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回 sds 可用空间的长度 T = O(1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">sdsavail</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 sds 扩充至指定长度，未使用的空间以 0 字节填充 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsgrowzero</span><span class=\"params\">(sds s, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将长度为 len 的字符串 t 追加到 sds 的字符串末尾 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatlen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *t, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将给定字符串 t 追加到 sds 的末尾 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscat</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将另一个 sds 追加到一个 sds 的末尾 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatsds</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> sds t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字符串 t 的前 len 个字符复制到 sds s 当中，并在字符串的最后添加终结符 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpylen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字符串复制到 sds 当中，覆盖原有的字符 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpy</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>其中几个：</p>\n<ul>\n<li><strong>sdsnew</strong><br />\n根据给定字符串 init ，创建一个包含同样字符串的 sds</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnew</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *init)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> initlen = (init == <span class=\"literal\">NULL</span>) ? <span class=\"number\">0</span> : <span class=\"built_in\">strlen</span>(init);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(init, initlen);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中调用了：</p>\n<ul>\n<li><strong>sdsnewlen</strong><br />\n根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据是否有初始化内容，选择适当的内存分配方式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (init) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zmalloc 不初始化所分配的内存</span></span><br><span class=\"line\">        sh = zmalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>); <span class=\"comment\">// 结构体+buf数组+'\\0'</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zcalloc 将分配的内存全部初始化为 0</span></span><br><span class=\"line\">        sh = zcalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存分配失败，返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置初始化长度</span></span><br><span class=\"line\">    sh-&gt;len = initlen;</span><br><span class=\"line\">    <span class=\"comment\">// 新 sds 不预留任何空间</span></span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initlen &amp;&amp; init)</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(sh-&gt;buf, init, initlen);</span><br><span class=\"line\">    <span class=\"comment\">// 以 \\0 结尾</span></span><br><span class=\"line\">    sh-&gt;buf[initlen] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回 buf 部分，而不是整个 sdshdr</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>*)sh-&gt;buf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 zmalloc 和 zcalloc 为 redis 使用的内存管理工具，在 zmalloc.c 和 zmalloc.h 中定义</p>\n<h2 id=\"双端链表\"><a class=\"markdownIt-Anchor\" href=\"#双端链表\"></a> 双端链表</h2>\n<p>双端链表 的源码主要在 adlist.h 和 adlist.c 中</p>\n<p>双端链表节点：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listNode;</span><br></pre></td></tr></table></figure>\n<p>双端链表结构:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表头节点</span></span><br><span class=\"line\">    listNode *head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表尾节点</span></span><br><span class=\"line\">    listNode *tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值复制函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *(*dup)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值释放函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*<span class=\"built_in\">free</span>)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值对比函数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">void</span> *ptr, <span class=\"keyword\">void</span> *key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表所包含的节点数量</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br></pre></td></tr></table></figure>\n<p>为了规范化的宏定义函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回给定链表所包含的节点数量</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listLength(l) ((l)-&gt;len)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的表头节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listFirst(l) ((l)-&gt;head)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的表尾节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listLast(l) ((l)-&gt;tail)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定节点的前置节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listPrevNode(n) ((n)-&gt;prev)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定节点的后置节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listNextNode(n) ((n)-&gt;next)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定节点的值</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listNodeValue(n) ((n)-&gt;value)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将链表 l 的值复制函数设置为 m</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listSetDupMethod(l,m) ((l)-&gt;dup = (m))</span></span><br><span class=\"line\"><span class=\"comment\">// 将链表 l 的值释放函数设置为 m</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listSetFreeMethod(l,m) ((l)-&gt;free = (m))</span></span><br><span class=\"line\"><span class=\"comment\">// 将链表的对比函数设置为 m</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listSetMatchMethod(l,m) ((l)-&gt;match = (m))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的值复制函数</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listGetDupMethod(l) ((l)-&gt;dup)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的值释放函数</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listGetFree(l) ((l)-&gt;free)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的值对比函数</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listGetMatchMethod(l) ((l)-&gt;match)</span></span><br></pre></td></tr></table></figure>\n<p>几个主要接口函数：</p>\n<ul>\n<li><strong>listCreate</strong><br />\n创建一个新的链表 T = O(1)</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listCreate</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">list</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"built_in\">list</span> = zmalloc(<span class=\"keyword\">sizeof</span>(*<span class=\"built_in\">list</span>))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化属性</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;dup = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span> = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;match = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listRelease</strong><br />\n释放整个链表，以及链表中所有节点</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRelease</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\">    listNode *current, *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指向头指针</span></span><br><span class=\"line\">    current = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历整个链表</span></span><br><span class=\"line\">    len = <span class=\"built_in\">list</span>-&gt;len;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(len--) &#123;</span><br><span class=\"line\">        next = current-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果有设置值释放函数，那么调用它</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>) <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>(current-&gt;value);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 释放节点结构</span></span><br><span class=\"line\">        zfree(current);</span><br><span class=\"line\"></span><br><span class=\"line\">        current = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放链表结构</span></span><br><span class=\"line\">    zfree(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listAddNodeHead</strong><br />\n将一个包含有给定值指针 value 的新节点添加到链表的表头</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listAddNodeHead</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为节点分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值指针</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到空链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        node-&gt;prev = node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到非空链表</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        node-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head-&gt;prev = node;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 redis 双端队列中使用了迭代器这一技巧</p>\n<p>双端链表迭代器：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listIter</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前迭代到的节点</span></span><br><span class=\"line\">    listNode *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代的方向</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> direction;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listIter;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listGetIterator</strong><br />\n为给定链表创建一个迭代器，之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">listIter *<span class=\"title\">listGetIterator</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> direction)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 为迭代器分配内存</span></span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((iter = zmalloc(<span class=\"keyword\">sizeof</span>(*iter))) == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据迭代方向，设置迭代器的起始节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (direction == AL_START_HEAD)</span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录迭代方向</span></span><br><span class=\"line\">    iter-&gt;direction = direction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> iter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listNext</strong><br />\n返回迭代器当前所指向的节点<br />\n这个函数其实有两个作用：返回当前迭代器指向的节点 + 使迭代器指向下一个节点（我刚开始还没明白只return了一个current，怎么把iter传出去，后来看了这个函数的使用才知道，因为函数传入的是指针，只要定义一个listIter类型的指针，一直使用该函数就能迭代了</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listNext</span><span class=\"params\">(listIter *iter)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *current = iter-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据方向选择下一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iter-&gt;direction == AL_START_HEAD)</span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listDup</strong><br />\n复制整个链表<br />\n其中就使用了上述的listNext来进行迭代</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listDup</span><span class=\"params\">(<span class=\"built_in\">list</span> *orig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">list</span> *copy;</span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建新链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((copy = listCreate()) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置节点值处理函数</span></span><br><span class=\"line\">    copy-&gt;dup = orig-&gt;dup;</span><br><span class=\"line\">    copy-&gt;<span class=\"built_in\">free</span> = orig-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">    copy-&gt;match = orig-&gt;match;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代整个输入链表</span></span><br><span class=\"line\">    iter = listGetIterator(orig, AL_START_HEAD);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((node = listNext(iter)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 复制节点值到新节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (copy-&gt;dup) &#123;</span><br><span class=\"line\">            value = copy-&gt;dup(node-&gt;value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">                listRelease(copy);</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            value = node-&gt;value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将节点添加到链表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listAddNodeTail(copy, value) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            listRelease(copy);</span><br><span class=\"line\">            listReleaseIterator(iter);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放迭代器</span></span><br><span class=\"line\">    listReleaseIterator(iter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回副本</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"GDB commands Summary","date":"2020-10-05T16:48:00.000Z","_content":"\n## Summary of GDB commands for x86-64 Systems\n\n做csapp的lab时偶然发现了这个，存一下...\n\n[原文地址](http://csapp.cs.cmu.edu/3e/docs/gdbnotes-x86-64.txt)\n\n### Starting:\n|Command|\n|---|\n|gdb|\n|gdb \\<file\\>|\n\n### Running and stopping\n|Command|Effect|\n|---|---|\n|quit|Exit gdb|\n|run|Run program|\n|run 1 2 3|Run program with command-line arguments 1 2 3|\n|kill|Stop the program|\n|quit|Exit gdb|\n|Ctrl-d|Exit gdb|\n\nNote: Ctrl-C does not exit from gdb, but halts the current gdb command\n\n### Breakpoints\n|Command|Effect|\n|---|---|\n|break sum|Set breakpoint at the entry to function sum|\n|break *0x80483c3|Set breakpoint at address 0x80483c3|\n|delete 1|Delete breakpoint 1|\n|disable 1|Disable the breakpoint 1 (gdb numbers each breakpoint you create)|\n|enable 1|Enable breakpoint 1|\n|delete|Delete all breakpoints|\n|clear sum|Clear any breakpoints at the entry to function sum|\n\n### Execution\n|Command|Effect|\n|---|---|\n|stepi|Execute one instruction|\n|stepi 4|Execute four instructions|\n|nexti|Like stepi, but proceed through function calls without stopping|\n|step|Execute one C statement|\n|continue|Resume execution until the next breakpoint|\n|until 3|Continue executing until program hits breakpoint 3|\n|finish|Resume execution until current function returns|\n|call sum(1, 2)|Call sum(1,2) and print return value|\n\n### Examining code\n|Command|Effect|\n|---|---|\n|disas|Disassemble current function|\n|disas sum|Disassemble function sum|\n|disas 0x80483b7|Disassemble function around 0x80483b7|\n|disas 0x80483b7 0x80483c7|Disassemble code within specified address range|\n|||\n|print /x \\$rip|Print program counter in hex|\n|print /d \\$rip|Print program counter in decimal|\n|print /t \\$rip|Print program counter in binary|\n\n## Examining data\n|Command|Effect|\n|---|---|\n|print /d \\$rax|Print contents of %rax in decimal|\n|print /x \\$rax|Print contents of %rax in hex|\n|print /t \\$rax|Print contents of %rax in binary|\n|print /d (int)\\$rax|Print contents of %rax in decimal after sign-extending lower 32-bits.|\n\nYou need this to print 32-bit, negative numbers stored in the lower 32 bits of %rax. For example, if the lower 32-bits of %rax store 0xffffffff, you will see\n\n``` bash\n(gdb) print $rax\n$1 = 4294967295\n(gdb) print (int)$rax\n$2 = -1\n(gdb)\n```\n\n|Command|Effect|\n|---|---|\n|print 0x100|Print decimal representation of 0x100|\n|print /x 555|Print hex representation of 555|\n|print /x (\\$rsp+8)|Print (contents of %rsp) + 8 in hex|\n|print *(int *) 0xbffff890|Print integer at address 0xbffff890|\n|print *(int *) (\\$rsp+8)|Print integer at address %rsp + 8|\n|print (char *) 0xbfff890|Examine a string stored at 0xbffff890|\n|||\n|x/w   0xbffff890|Examine (4-byte) word starting at address 0xbffff890|\n|x/w   \\$rsp|Examine (4-byte) word starting at address in \\$rsp|\n|x/wd  \\$rsp|Examine (4-byte) word starting at address in \\$rsp. Print in decimal|\n|x/2w  \\$rsp|Examine two (4-byte) words starting at address in \\$rsp|\n|x/2wd \\$rsp|Examine two (4-byte) words starting at address in \\$rsp. Print in decimal|\n|x/g   \\$rsp|Examine (8-byte) word starting at address in \\$rsp.|\n|x/gd  \\$rsp|Examine (8-byte) word starting at address in \\$rsp. Print in decimal|\n|x/a   \\$rsp|Examine address in $rsp. Print as offset from previous global symbol.|\n|x/s   0xbffff890|Examine a string stored at 0xbffff890|\n|x/20b sum|Examine first 20 opcode bytes of function sum|\n|x/10i sum|Examine first 10 instructions of function sum|\n\nNote: the format string for the 'x' command has the general form x/[NUM][SIZE][FORMAT] where\n\n> NUM  = number of objects to display\n> SIZE = size of each object (b=byte, h=half-word, w=word, g=giant (quad-word))\n> FORMAT = how to display each object (d=decimal, x=hex, o=octal, etc.)\n\nIf you don't specify SIZE or FORMAT, either a default value, or the last value you specified in a previous 'print' or 'x' command is used.\n\n### Useful information\n|Command|Effect|\n|---|---|\n|backtrace|Print the current address and stack backtrace|\n|where|Print the current address and stack backtrace|\n|||\n|info program|Print current status of the program)|\n|info functions|Print functions in program|\n|info stack|Print backtrace of the stack)|\n|info frame|Print information about the current stack frame|\n|info registers|Print registers and their contents|\n|info breakpoints|Print status of user-settable breakpoints|\n|||\n|display /FMT EXPR|Print expression EXPR using format FMT every time GDB stops|\n|undisplay|Turn off display mode|\n|help|Get information about gdb|\n","source":"_posts/tools/GDB-summary.md","raw":"---\ntitle: GDB commands Summary\ndate: 2020-10-6 0:48\ntags:\n- CSAPP\n- Labs\ncategories:\n- 编译\n- 调试工具\n---\n\n## Summary of GDB commands for x86-64 Systems\n\n做csapp的lab时偶然发现了这个，存一下...\n\n[原文地址](http://csapp.cs.cmu.edu/3e/docs/gdbnotes-x86-64.txt)\n\n### Starting:\n|Command|\n|---|\n|gdb|\n|gdb \\<file\\>|\n\n### Running and stopping\n|Command|Effect|\n|---|---|\n|quit|Exit gdb|\n|run|Run program|\n|run 1 2 3|Run program with command-line arguments 1 2 3|\n|kill|Stop the program|\n|quit|Exit gdb|\n|Ctrl-d|Exit gdb|\n\nNote: Ctrl-C does not exit from gdb, but halts the current gdb command\n\n### Breakpoints\n|Command|Effect|\n|---|---|\n|break sum|Set breakpoint at the entry to function sum|\n|break *0x80483c3|Set breakpoint at address 0x80483c3|\n|delete 1|Delete breakpoint 1|\n|disable 1|Disable the breakpoint 1 (gdb numbers each breakpoint you create)|\n|enable 1|Enable breakpoint 1|\n|delete|Delete all breakpoints|\n|clear sum|Clear any breakpoints at the entry to function sum|\n\n### Execution\n|Command|Effect|\n|---|---|\n|stepi|Execute one instruction|\n|stepi 4|Execute four instructions|\n|nexti|Like stepi, but proceed through function calls without stopping|\n|step|Execute one C statement|\n|continue|Resume execution until the next breakpoint|\n|until 3|Continue executing until program hits breakpoint 3|\n|finish|Resume execution until current function returns|\n|call sum(1, 2)|Call sum(1,2) and print return value|\n\n### Examining code\n|Command|Effect|\n|---|---|\n|disas|Disassemble current function|\n|disas sum|Disassemble function sum|\n|disas 0x80483b7|Disassemble function around 0x80483b7|\n|disas 0x80483b7 0x80483c7|Disassemble code within specified address range|\n|||\n|print /x \\$rip|Print program counter in hex|\n|print /d \\$rip|Print program counter in decimal|\n|print /t \\$rip|Print program counter in binary|\n\n## Examining data\n|Command|Effect|\n|---|---|\n|print /d \\$rax|Print contents of %rax in decimal|\n|print /x \\$rax|Print contents of %rax in hex|\n|print /t \\$rax|Print contents of %rax in binary|\n|print /d (int)\\$rax|Print contents of %rax in decimal after sign-extending lower 32-bits.|\n\nYou need this to print 32-bit, negative numbers stored in the lower 32 bits of %rax. For example, if the lower 32-bits of %rax store 0xffffffff, you will see\n\n``` bash\n(gdb) print $rax\n$1 = 4294967295\n(gdb) print (int)$rax\n$2 = -1\n(gdb)\n```\n\n|Command|Effect|\n|---|---|\n|print 0x100|Print decimal representation of 0x100|\n|print /x 555|Print hex representation of 555|\n|print /x (\\$rsp+8)|Print (contents of %rsp) + 8 in hex|\n|print *(int *) 0xbffff890|Print integer at address 0xbffff890|\n|print *(int *) (\\$rsp+8)|Print integer at address %rsp + 8|\n|print (char *) 0xbfff890|Examine a string stored at 0xbffff890|\n|||\n|x/w   0xbffff890|Examine (4-byte) word starting at address 0xbffff890|\n|x/w   \\$rsp|Examine (4-byte) word starting at address in \\$rsp|\n|x/wd  \\$rsp|Examine (4-byte) word starting at address in \\$rsp. Print in decimal|\n|x/2w  \\$rsp|Examine two (4-byte) words starting at address in \\$rsp|\n|x/2wd \\$rsp|Examine two (4-byte) words starting at address in \\$rsp. Print in decimal|\n|x/g   \\$rsp|Examine (8-byte) word starting at address in \\$rsp.|\n|x/gd  \\$rsp|Examine (8-byte) word starting at address in \\$rsp. Print in decimal|\n|x/a   \\$rsp|Examine address in $rsp. Print as offset from previous global symbol.|\n|x/s   0xbffff890|Examine a string stored at 0xbffff890|\n|x/20b sum|Examine first 20 opcode bytes of function sum|\n|x/10i sum|Examine first 10 instructions of function sum|\n\nNote: the format string for the 'x' command has the general form x/[NUM][SIZE][FORMAT] where\n\n> NUM  = number of objects to display\n> SIZE = size of each object (b=byte, h=half-word, w=word, g=giant (quad-word))\n> FORMAT = how to display each object (d=decimal, x=hex, o=octal, etc.)\n\nIf you don't specify SIZE or FORMAT, either a default value, or the last value you specified in a previous 'print' or 'x' command is used.\n\n### Useful information\n|Command|Effect|\n|---|---|\n|backtrace|Print the current address and stack backtrace|\n|where|Print the current address and stack backtrace|\n|||\n|info program|Print current status of the program)|\n|info functions|Print functions in program|\n|info stack|Print backtrace of the stack)|\n|info frame|Print information about the current stack frame|\n|info registers|Print registers and their contents|\n|info breakpoints|Print status of user-settable breakpoints|\n|||\n|display /FMT EXPR|Print expression EXPR using format FMT every time GDB stops|\n|undisplay|Turn off display mode|\n|help|Get information about gdb|\n","slug":"tools/GDB-summary","published":1,"updated":"2020-10-19T13:04:31.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckicwtuat001x2kwj5agp8atk","content":"<h2 id=\"summary-of-gdb-commands-for-x86-64-systems\"><a class=\"markdownIt-Anchor\" href=\"#summary-of-gdb-commands-for-x86-64-systems\"></a> Summary of GDB commands for x86-64 Systems</h2>\n<p>做csapp的lab时偶然发现了这个，存一下…</p>\n<p><a href=\"http://csapp.cs.cmu.edu/3e/docs/gdbnotes-x86-64.txt\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<h3 id=\"starting\"><a class=\"markdownIt-Anchor\" href=\"#starting\"></a> Starting:</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gdb</td>\n</tr>\n<tr>\n<td>gdb &lt;file&gt;</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"running-and-stopping\"><a class=\"markdownIt-Anchor\" href=\"#running-and-stopping\"></a> Running and stopping</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>quit</td>\n<td>Exit gdb</td>\n</tr>\n<tr>\n<td>run</td>\n<td>Run program</td>\n</tr>\n<tr>\n<td>run 1 2 3</td>\n<td>Run program with command-line arguments 1 2 3</td>\n</tr>\n<tr>\n<td>kill</td>\n<td>Stop the program</td>\n</tr>\n<tr>\n<td>quit</td>\n<td>Exit gdb</td>\n</tr>\n<tr>\n<td>Ctrl-d</td>\n<td>Exit gdb</td>\n</tr>\n</tbody>\n</table>\n<p>Note: Ctrl-C does not exit from gdb, but halts the current gdb command</p>\n<h3 id=\"breakpoints\"><a class=\"markdownIt-Anchor\" href=\"#breakpoints\"></a> Breakpoints</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>break sum</td>\n<td>Set breakpoint at the entry to function sum</td>\n</tr>\n<tr>\n<td>break *0x80483c3</td>\n<td>Set breakpoint at address 0x80483c3</td>\n</tr>\n<tr>\n<td>delete 1</td>\n<td>Delete breakpoint 1</td>\n</tr>\n<tr>\n<td>disable 1</td>\n<td>Disable the breakpoint 1 (gdb numbers each breakpoint you create)</td>\n</tr>\n<tr>\n<td>enable 1</td>\n<td>Enable breakpoint 1</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>Delete all breakpoints</td>\n</tr>\n<tr>\n<td>clear sum</td>\n<td>Clear any breakpoints at the entry to function sum</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"execution\"><a class=\"markdownIt-Anchor\" href=\"#execution\"></a> Execution</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>stepi</td>\n<td>Execute one instruction</td>\n</tr>\n<tr>\n<td>stepi 4</td>\n<td>Execute four instructions</td>\n</tr>\n<tr>\n<td>nexti</td>\n<td>Like stepi, but proceed through function calls without stopping</td>\n</tr>\n<tr>\n<td>step</td>\n<td>Execute one C statement</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>Resume execution until the next breakpoint</td>\n</tr>\n<tr>\n<td>until 3</td>\n<td>Continue executing until program hits breakpoint 3</td>\n</tr>\n<tr>\n<td>finish</td>\n<td>Resume execution until current function returns</td>\n</tr>\n<tr>\n<td>call sum(1, 2)</td>\n<td>Call sum(1,2) and print return value</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"examining-code\"><a class=\"markdownIt-Anchor\" href=\"#examining-code\"></a> Examining code</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>disas</td>\n<td>Disassemble current function</td>\n</tr>\n<tr>\n<td>disas sum</td>\n<td>Disassemble function sum</td>\n</tr>\n<tr>\n<td>disas 0x80483b7</td>\n<td>Disassemble function around 0x80483b7</td>\n</tr>\n<tr>\n<td>disas 0x80483b7 0x80483c7</td>\n<td>Disassemble code within specified address range</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>print /x $rip</td>\n<td>Print program counter in hex</td>\n</tr>\n<tr>\n<td>print /d $rip</td>\n<td>Print program counter in decimal</td>\n</tr>\n<tr>\n<td>print /t $rip</td>\n<td>Print program counter in binary</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"examining-data\"><a class=\"markdownIt-Anchor\" href=\"#examining-data\"></a> Examining data</h2>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>print /d $rax</td>\n<td>Print contents of %rax in decimal</td>\n</tr>\n<tr>\n<td>print /x $rax</td>\n<td>Print contents of %rax in hex</td>\n</tr>\n<tr>\n<td>print /t $rax</td>\n<td>Print contents of %rax in binary</td>\n</tr>\n<tr>\n<td>print /d (int)$rax</td>\n<td>Print contents of %rax in decimal after sign-extending lower 32-bits.</td>\n</tr>\n</tbody>\n</table>\n<p>You need this to print 32-bit, negative numbers stored in the lower 32 bits of %rax. For example, if the lower 32-bits of %rax store 0xffffffff, you will see</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) <span class=\"built_in\">print</span> <span class=\"variable\">$rax</span></span><br><span class=\"line\"><span class=\"variable\">$1</span> = 4294967295</span><br><span class=\"line\">(gdb) <span class=\"built_in\">print</span> (int)<span class=\"variable\">$rax</span></span><br><span class=\"line\"><span class=\"variable\">$2</span> = -1</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>print 0x100</td>\n<td>Print decimal representation of 0x100</td>\n</tr>\n<tr>\n<td>print /x 555</td>\n<td>Print hex representation of 555</td>\n</tr>\n<tr>\n<td>print /x ($rsp+8)</td>\n<td>Print (contents of %rsp) + 8 in hex</td>\n</tr>\n<tr>\n<td>print *(int *) 0xbffff890</td>\n<td>Print integer at address 0xbffff890</td>\n</tr>\n<tr>\n<td>print *(int *) ($rsp+8)</td>\n<td>Print integer at address %rsp + 8</td>\n</tr>\n<tr>\n<td>print (char *) 0xbfff890</td>\n<td>Examine a string stored at 0xbffff890</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>x/w   0xbffff890</td>\n<td>Examine (4-byte) word starting at address 0xbffff890</td>\n</tr>\n<tr>\n<td>x/w   $rsp</td>\n<td>Examine (4-byte) word starting at address in $rsp</td>\n</tr>\n<tr>\n<td>x/wd  $rsp</td>\n<td>Examine (4-byte) word starting at address in $rsp. Print in decimal</td>\n</tr>\n<tr>\n<td>x/2w  $rsp</td>\n<td>Examine two (4-byte) words starting at address in $rsp</td>\n</tr>\n<tr>\n<td>x/2wd $rsp</td>\n<td>Examine two (4-byte) words starting at address in $rsp. Print in decimal</td>\n</tr>\n<tr>\n<td>x/g   $rsp</td>\n<td>Examine (8-byte) word starting at address in $rsp.</td>\n</tr>\n<tr>\n<td>x/gd  $rsp</td>\n<td>Examine (8-byte) word starting at address in $rsp. Print in decimal</td>\n</tr>\n<tr>\n<td>x/a   $rsp</td>\n<td>Examine address in $rsp. Print as offset from previous global symbol.</td>\n</tr>\n<tr>\n<td>x/s   0xbffff890</td>\n<td>Examine a string stored at 0xbffff890</td>\n</tr>\n<tr>\n<td>x/20b sum</td>\n<td>Examine first 20 opcode bytes of function sum</td>\n</tr>\n<tr>\n<td>x/10i sum</td>\n<td>Examine first 10 instructions of function sum</td>\n</tr>\n</tbody>\n</table>\n<p>Note: the format string for the ‘x’ command has the general form x/[NUM][SIZE][FORMAT] where</p>\n<blockquote>\n<p>NUM  = number of objects to display<br />\nSIZE = size of each object (b=byte, h=half-word, w=word, g=giant (quad-word))<br />\nFORMAT = how to display each object (d=decimal, x=hex, o=octal, etc.)</p>\n</blockquote>\n<p>If you don’t specify SIZE or FORMAT, either a default value, or the last value you specified in a previous ‘print’ or ‘x’ command is used.</p>\n<h3 id=\"useful-information\"><a class=\"markdownIt-Anchor\" href=\"#useful-information\"></a> Useful information</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>backtrace</td>\n<td>Print the current address and stack backtrace</td>\n</tr>\n<tr>\n<td>where</td>\n<td>Print the current address and stack backtrace</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>info program</td>\n<td>Print current status of the program)</td>\n</tr>\n<tr>\n<td>info functions</td>\n<td>Print functions in program</td>\n</tr>\n<tr>\n<td>info stack</td>\n<td>Print backtrace of the stack)</td>\n</tr>\n<tr>\n<td>info frame</td>\n<td>Print information about the current stack frame</td>\n</tr>\n<tr>\n<td>info registers</td>\n<td>Print registers and their contents</td>\n</tr>\n<tr>\n<td>info breakpoints</td>\n<td>Print status of user-settable breakpoints</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>display /FMT EXPR</td>\n<td>Print expression EXPR using format FMT every time GDB stops</td>\n</tr>\n<tr>\n<td>undisplay</td>\n<td>Turn off display mode</td>\n</tr>\n<tr>\n<td>help</td>\n<td>Get information about gdb</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"summary-of-gdb-commands-for-x86-64-systems\"><a class=\"markdownIt-Anchor\" href=\"#summary-of-gdb-commands-for-x86-64-systems\"></a> Summary of GDB commands for x86-64 Systems</h2>\n<p>做csapp的lab时偶然发现了这个，存一下…</p>\n<p><a href=\"http://csapp.cs.cmu.edu/3e/docs/gdbnotes-x86-64.txt\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<h3 id=\"starting\"><a class=\"markdownIt-Anchor\" href=\"#starting\"></a> Starting:</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gdb</td>\n</tr>\n<tr>\n<td>gdb &lt;file&gt;</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"running-and-stopping\"><a class=\"markdownIt-Anchor\" href=\"#running-and-stopping\"></a> Running and stopping</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>quit</td>\n<td>Exit gdb</td>\n</tr>\n<tr>\n<td>run</td>\n<td>Run program</td>\n</tr>\n<tr>\n<td>run 1 2 3</td>\n<td>Run program with command-line arguments 1 2 3</td>\n</tr>\n<tr>\n<td>kill</td>\n<td>Stop the program</td>\n</tr>\n<tr>\n<td>quit</td>\n<td>Exit gdb</td>\n</tr>\n<tr>\n<td>Ctrl-d</td>\n<td>Exit gdb</td>\n</tr>\n</tbody>\n</table>\n<p>Note: Ctrl-C does not exit from gdb, but halts the current gdb command</p>\n<h3 id=\"breakpoints\"><a class=\"markdownIt-Anchor\" href=\"#breakpoints\"></a> Breakpoints</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>break sum</td>\n<td>Set breakpoint at the entry to function sum</td>\n</tr>\n<tr>\n<td>break *0x80483c3</td>\n<td>Set breakpoint at address 0x80483c3</td>\n</tr>\n<tr>\n<td>delete 1</td>\n<td>Delete breakpoint 1</td>\n</tr>\n<tr>\n<td>disable 1</td>\n<td>Disable the breakpoint 1 (gdb numbers each breakpoint you create)</td>\n</tr>\n<tr>\n<td>enable 1</td>\n<td>Enable breakpoint 1</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>Delete all breakpoints</td>\n</tr>\n<tr>\n<td>clear sum</td>\n<td>Clear any breakpoints at the entry to function sum</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"execution\"><a class=\"markdownIt-Anchor\" href=\"#execution\"></a> Execution</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>stepi</td>\n<td>Execute one instruction</td>\n</tr>\n<tr>\n<td>stepi 4</td>\n<td>Execute four instructions</td>\n</tr>\n<tr>\n<td>nexti</td>\n<td>Like stepi, but proceed through function calls without stopping</td>\n</tr>\n<tr>\n<td>step</td>\n<td>Execute one C statement</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>Resume execution until the next breakpoint</td>\n</tr>\n<tr>\n<td>until 3</td>\n<td>Continue executing until program hits breakpoint 3</td>\n</tr>\n<tr>\n<td>finish</td>\n<td>Resume execution until current function returns</td>\n</tr>\n<tr>\n<td>call sum(1, 2)</td>\n<td>Call sum(1,2) and print return value</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"examining-code\"><a class=\"markdownIt-Anchor\" href=\"#examining-code\"></a> Examining code</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>disas</td>\n<td>Disassemble current function</td>\n</tr>\n<tr>\n<td>disas sum</td>\n<td>Disassemble function sum</td>\n</tr>\n<tr>\n<td>disas 0x80483b7</td>\n<td>Disassemble function around 0x80483b7</td>\n</tr>\n<tr>\n<td>disas 0x80483b7 0x80483c7</td>\n<td>Disassemble code within specified address range</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>print /x $rip</td>\n<td>Print program counter in hex</td>\n</tr>\n<tr>\n<td>print /d $rip</td>\n<td>Print program counter in decimal</td>\n</tr>\n<tr>\n<td>print /t $rip</td>\n<td>Print program counter in binary</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"examining-data\"><a class=\"markdownIt-Anchor\" href=\"#examining-data\"></a> Examining data</h2>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>print /d $rax</td>\n<td>Print contents of %rax in decimal</td>\n</tr>\n<tr>\n<td>print /x $rax</td>\n<td>Print contents of %rax in hex</td>\n</tr>\n<tr>\n<td>print /t $rax</td>\n<td>Print contents of %rax in binary</td>\n</tr>\n<tr>\n<td>print /d (int)$rax</td>\n<td>Print contents of %rax in decimal after sign-extending lower 32-bits.</td>\n</tr>\n</tbody>\n</table>\n<p>You need this to print 32-bit, negative numbers stored in the lower 32 bits of %rax. For example, if the lower 32-bits of %rax store 0xffffffff, you will see</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) <span class=\"built_in\">print</span> <span class=\"variable\">$rax</span></span><br><span class=\"line\"><span class=\"variable\">$1</span> = 4294967295</span><br><span class=\"line\">(gdb) <span class=\"built_in\">print</span> (int)<span class=\"variable\">$rax</span></span><br><span class=\"line\"><span class=\"variable\">$2</span> = -1</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>print 0x100</td>\n<td>Print decimal representation of 0x100</td>\n</tr>\n<tr>\n<td>print /x 555</td>\n<td>Print hex representation of 555</td>\n</tr>\n<tr>\n<td>print /x ($rsp+8)</td>\n<td>Print (contents of %rsp) + 8 in hex</td>\n</tr>\n<tr>\n<td>print *(int *) 0xbffff890</td>\n<td>Print integer at address 0xbffff890</td>\n</tr>\n<tr>\n<td>print *(int *) ($rsp+8)</td>\n<td>Print integer at address %rsp + 8</td>\n</tr>\n<tr>\n<td>print (char *) 0xbfff890</td>\n<td>Examine a string stored at 0xbffff890</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>x/w   0xbffff890</td>\n<td>Examine (4-byte) word starting at address 0xbffff890</td>\n</tr>\n<tr>\n<td>x/w   $rsp</td>\n<td>Examine (4-byte) word starting at address in $rsp</td>\n</tr>\n<tr>\n<td>x/wd  $rsp</td>\n<td>Examine (4-byte) word starting at address in $rsp. Print in decimal</td>\n</tr>\n<tr>\n<td>x/2w  $rsp</td>\n<td>Examine two (4-byte) words starting at address in $rsp</td>\n</tr>\n<tr>\n<td>x/2wd $rsp</td>\n<td>Examine two (4-byte) words starting at address in $rsp. Print in decimal</td>\n</tr>\n<tr>\n<td>x/g   $rsp</td>\n<td>Examine (8-byte) word starting at address in $rsp.</td>\n</tr>\n<tr>\n<td>x/gd  $rsp</td>\n<td>Examine (8-byte) word starting at address in $rsp. Print in decimal</td>\n</tr>\n<tr>\n<td>x/a   $rsp</td>\n<td>Examine address in $rsp. Print as offset from previous global symbol.</td>\n</tr>\n<tr>\n<td>x/s   0xbffff890</td>\n<td>Examine a string stored at 0xbffff890</td>\n</tr>\n<tr>\n<td>x/20b sum</td>\n<td>Examine first 20 opcode bytes of function sum</td>\n</tr>\n<tr>\n<td>x/10i sum</td>\n<td>Examine first 10 instructions of function sum</td>\n</tr>\n</tbody>\n</table>\n<p>Note: the format string for the ‘x’ command has the general form x/[NUM][SIZE][FORMAT] where</p>\n<blockquote>\n<p>NUM  = number of objects to display<br />\nSIZE = size of each object (b=byte, h=half-word, w=word, g=giant (quad-word))<br />\nFORMAT = how to display each object (d=decimal, x=hex, o=octal, etc.)</p>\n</blockquote>\n<p>If you don’t specify SIZE or FORMAT, either a default value, or the last value you specified in a previous ‘print’ or ‘x’ command is used.</p>\n<h3 id=\"useful-information\"><a class=\"markdownIt-Anchor\" href=\"#useful-information\"></a> Useful information</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>backtrace</td>\n<td>Print the current address and stack backtrace</td>\n</tr>\n<tr>\n<td>where</td>\n<td>Print the current address and stack backtrace</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>info program</td>\n<td>Print current status of the program)</td>\n</tr>\n<tr>\n<td>info functions</td>\n<td>Print functions in program</td>\n</tr>\n<tr>\n<td>info stack</td>\n<td>Print backtrace of the stack)</td>\n</tr>\n<tr>\n<td>info frame</td>\n<td>Print information about the current stack frame</td>\n</tr>\n<tr>\n<td>info registers</td>\n<td>Print registers and their contents</td>\n</tr>\n<tr>\n<td>info breakpoints</td>\n<td>Print status of user-settable breakpoints</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>display /FMT EXPR</td>\n<td>Print expression EXPR using format FMT every time GDB stops</td>\n</tr>\n<tr>\n<td>undisplay</td>\n<td>Turn off display mode</td>\n</tr>\n<tr>\n<td>help</td>\n<td>Get information about gdb</td>\n</tr>\n</tbody>\n</table>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckicwtu8h00002kwj43thf01b","category_id":"ckicwtu8s00022kwjhgd1a7wt","_id":"ckicwtu9u000d2kwj425d1tj5"},{"post_id":"ckicwtu8p00012kwjbfdwfrt0","category_id":"ckicwtu8s00022kwjhgd1a7wt","_id":"ckicwtu9z000k2kwj0l6t0097"},{"post_id":"ckicwtu9t000c2kwj1gue85ao","category_id":"ckfwrkg640001jwv7fl4j6nki","_id":"ckicwtua2000o2kwjdg6offq2"},{"post_id":"ckicwtu9t000c2kwj1gue85ao","category_id":"ckfwrv6rl0000i8v7c1l0gw7p","_id":"ckicwtua3000r2kwj8hl79jg9"},{"post_id":"ckicwtu9w000h2kwj0t2x5eub","category_id":"ckfwrkg640001jwv7fl4j6nki","_id":"ckicwtua5000u2kwj3mb5b672"},{"post_id":"ckicwtu9w000h2kwj0t2x5eub","category_id":"ckfwrv6rl0000i8v7c1l0gw7p","_id":"ckicwtua9000z2kwj4v40eawg"},{"post_id":"ckicwtu9r000a2kwj005t14ux","category_id":"ckicwtu9v000e2kwjhguo60wj","_id":"ckicwtuab00122kwje1v0aqdj"},{"post_id":"ckicwtu9y000j2kwj32l18stz","category_id":"ckfwrkg640001jwv7fl4j6nki","_id":"ckicwtuae00172kwj7uwq4jpi"},{"post_id":"ckicwtu9y000j2kwj32l18stz","category_id":"ckfwrv6rl0000i8v7c1l0gw7p","_id":"ckicwtuaf001a2kwje5cb3a0a"},{"post_id":"ckicwtua0000m2kwjaqvcgcti","category_id":"ckfwrkg640001jwv7fl4j6nki","_id":"ckicwtuai001e2kwjbwq1ciku"},{"post_id":"ckicwtua8000y2kwjba4wgrvh","category_id":"ckfwrkg640001jwv7fl4j6nki","_id":"ckicwtuaj001h2kwj4agtfsa6"},{"post_id":"ckicwtua8000y2kwjba4wgrvh","category_id":"ckfwrz4la0003qwv77lnx21qn","_id":"ckicwtual001k2kwjesd2cnpu"},{"post_id":"ckicwtua2000q2kwje9tehhby","category_id":"ckicwtua6000v2kwjbl39bpoo","_id":"ckicwtuao001o2kwje0m5clbf"},{"post_id":"ckicwtuaa00112kwjgsai3g5b","category_id":"ckfwrkg640001jwv7fl4j6nki","_id":"ckicwtuaq001r2kwjc4p6888c"},{"post_id":"ckicwtuaa00112kwjgsai3g5b","category_id":"ckfwrz4la0003qwv77lnx21qn","_id":"ckicwtuas001v2kwj0em44wwr"},{"post_id":"ckicwtuab00142kwjdrryadaw","category_id":"ckicwtua6000v2kwjbl39bpoo","_id":"ckicwtuau001y2kwjgs8e6ed1"},{"post_id":"ckicwtuae00192kwjbzz023x3","category_id":"ckicwtua6000v2kwjbl39bpoo","_id":"ckicwtuav00212kwj0meycg9t"},{"post_id":"ckicwtua4000t2kwj7hef2la8","category_id":"ckicwtua6000v2kwjbl39bpoo","_id":"ckicwtuaw00232kwj1wj1bznb"},{"post_id":"ckicwtuag001c2kwj2b878v9m","category_id":"ckicwtua6000v2kwjbl39bpoo","_id":"ckicwtuax00262kwj0rtec4km"},{"post_id":"ckicwtuai001g2kwj2o7l2goi","category_id":"ckicwtua6000v2kwjbl39bpoo","_id":"ckicwtuax00282kwj2g7oci2w"},{"post_id":"ckicwtuak001j2kwjbvyr1b9v","category_id":"ckicwtua6000v2kwjbl39bpoo","_id":"ckicwtuay002b2kwj2655g1wa"},{"post_id":"ckicwtuam001n2kwj4ynzfou4","category_id":"ckicwtua6000v2kwjbl39bpoo","_id":"ckicwtuay002d2kwj0ecr82jx"},{"post_id":"ckicwtuar001u2kwj5pf5g99c","category_id":"ckfi8ds1z0003bkv70jfb51ue","_id":"ckicwtuaz002g2kwj1ja59mo6"},{"post_id":"ckicwtuat001x2kwj5agp8atk","category_id":"ckfwrkg640001jwv7fl4j6nki","_id":"ckicwtub0002i2kwj5a8x6vl9"},{"post_id":"ckicwtuat001x2kwj5agp8atk","category_id":"ckfwrkg680004jwv72vfybgcm","_id":"ckicwtub0002k2kwj2bsl4bk4"}],"PostTag":[{"post_id":"ckicwtu8h00002kwj43thf01b","tag_id":"ckicwtu9e00032kwj2kcobaj8","_id":"ckicwtu9r00092kwj8kpr2w1s"},{"post_id":"ckicwtu8h00002kwj43thf01b","tag_id":"ckfwrkg670002jwv77igxd6ss","_id":"ckicwtu9t000b2kwjcq4h75yi"},{"post_id":"ckicwtu8p00012kwjbfdwfrt0","tag_id":"ckicwtu9e00032kwj2kcobaj8","_id":"ckicwtu9w000g2kwjhr08ce6k"},{"post_id":"ckicwtu9t000c2kwj1gue85ao","tag_id":"ckfmadwsc000264v700uaf4e2","_id":"ckicwtu9y000i2kwjd5vc2iob"},{"post_id":"ckicwtu9t000c2kwj1gue85ao","tag_id":"ckfmadwsd000364v76nj66p3x","_id":"ckicwtua0000l2kwjccspcz3v"},{"post_id":"ckicwtu9t000c2kwj1gue85ao","tag_id":"ckfmadwsd000564v738n84jsd","_id":"ckicwtua2000p2kwj5k16bxuc"},{"post_id":"ckicwtu9w000h2kwj0t2x5eub","tag_id":"ckfmadwsc000264v700uaf4e2","_id":"ckicwtua4000s2kwj6x5i3neb"},{"post_id":"ckicwtu9w000h2kwj0t2x5eub","tag_id":"ckfmadwsd000364v76nj66p3x","_id":"ckicwtua7000x2kwjdp4f4l8w"},{"post_id":"ckicwtu9w000h2kwj0t2x5eub","tag_id":"ckfmadwsd000564v738n84jsd","_id":"ckicwtua900102kwjfoyd9yko"},{"post_id":"ckicwtu9y000j2kwj32l18stz","tag_id":"ckfmadwsc000264v700uaf4e2","_id":"ckicwtuab00132kwj1ypv8gg7"},{"post_id":"ckicwtu9y000j2kwj32l18stz","tag_id":"ckfmadwsd000364v76nj66p3x","_id":"ckicwtuae00182kwj434p2rpu"},{"post_id":"ckicwtu9y000j2kwj32l18stz","tag_id":"ckfmadwsd000564v738n84jsd","_id":"ckicwtuag001b2kwjgi3r5u4f"},{"post_id":"ckicwtua0000m2kwjaqvcgcti","tag_id":"ckfwrv6rn0001i8v70c0g5mmg","_id":"ckicwtuai001f2kwjf4pjgqkf"},{"post_id":"ckicwtua0000m2kwjaqvcgcti","tag_id":"ckfwrkg670002jwv77igxd6ss","_id":"ckicwtuak001i2kwjdkgx6yko"},{"post_id":"ckicwtu9r000a2kwj005t14ux","tag_id":"ckicwtu9v000f2kwj9gij923l","_id":"ckicwtuam001m2kwj68xa1n68"},{"post_id":"ckicwtu9r000a2kwj005t14ux","tag_id":"ckicwtua1000n2kwj871x7dur","_id":"ckicwtuao001p2kwj6zqnd9zn"},{"post_id":"ckicwtua8000y2kwjba4wgrvh","tag_id":"ckfwrv6rn0001i8v70c0g5mmg","_id":"ckicwtuar001t2kwj8r4y6utn"},{"post_id":"ckicwtua8000y2kwjba4wgrvh","tag_id":"ckfwrkg670002jwv77igxd6ss","_id":"ckicwtuas001w2kwj1ensbes5"},{"post_id":"ckicwtuaa00112kwjgsai3g5b","tag_id":"ckfwrv6rn0001i8v70c0g5mmg","_id":"ckicwtuau00202kwj7rwygzan"},{"post_id":"ckicwtua2000q2kwje9tehhby","tag_id":"ckicwtua7000w2kwj3wunc22f","_id":"ckicwtuaw00222kwj4xqxa542"},{"post_id":"ckicwtua2000q2kwje9tehhby","tag_id":"ckicwtuad00162kwjbhcq1q44","_id":"ckicwtuax00252kwjgjqv6n90"},{"post_id":"ckicwtuam001n2kwj4ynzfou4","tag_id":"ckicwtuad00162kwjbhcq1q44","_id":"ckicwtuax00272kwj9p28edoq"},{"post_id":"ckicwtua4000t2kwj7hef2la8","tag_id":"ckicwtuah001d2kwj46elbxsi","_id":"ckicwtuax00292kwj2or4ddr9"},{"post_id":"ckicwtua4000t2kwj7hef2la8","tag_id":"ckicwtuad00162kwjbhcq1q44","_id":"ckicwtuay002c2kwjh4a2bbu5"},{"post_id":"ckicwtuar001u2kwj5pf5g99c","tag_id":"ckfi8ds200004bkv7hgnmg7s3","_id":"ckicwtuaz002e2kwjfal899tl"},{"post_id":"ckicwtuat001x2kwj5agp8atk","tag_id":"ckfwrv6rn0001i8v70c0g5mmg","_id":"ckicwtub0002h2kwjh5xs3woh"},{"post_id":"ckicwtuat001x2kwj5agp8atk","tag_id":"ckfwrkg670002jwv77igxd6ss","_id":"ckicwtub0002j2kwjg1j8em4z"},{"post_id":"ckicwtuab00142kwjdrryadaw","tag_id":"ckicwtuaq001s2kwj1psrf1px","_id":"ckicwtub1002m2kwj8rla9cxy"},{"post_id":"ckicwtuab00142kwjdrryadaw","tag_id":"ckicwtuad00162kwjbhcq1q44","_id":"ckicwtub1002n2kwjgogics9q"},{"post_id":"ckicwtuae00192kwjbzz023x3","tag_id":"ckicwtuaw00242kwj8ew496uc","_id":"ckicwtub1002o2kwj2gu9cqh7"},{"post_id":"ckicwtuae00192kwjbzz023x3","tag_id":"ckicwtuad00162kwjbhcq1q44","_id":"ckicwtub2002p2kwjcb8uh97i"},{"post_id":"ckicwtuag001c2kwj2b878v9m","tag_id":"ckicwtuay002a2kwj1fw07hjf","_id":"ckicwtub2002q2kwj7tbgdsec"},{"post_id":"ckicwtuag001c2kwj2b878v9m","tag_id":"ckicwtuad00162kwjbhcq1q44","_id":"ckicwtub2002r2kwj2jdn1ygr"},{"post_id":"ckicwtuai001g2kwj2o7l2goi","tag_id":"ckicwtuaz002f2kwj0scmco55","_id":"ckicwtub2002s2kwjgzjyeuvd"},{"post_id":"ckicwtuai001g2kwj2o7l2goi","tag_id":"ckicwtuad00162kwjbhcq1q44","_id":"ckicwtub2002t2kwjewf8c3bv"},{"post_id":"ckicwtuak001j2kwjbvyr1b9v","tag_id":"ckicwtub0002l2kwj0aojey1a","_id":"ckicwtub2002u2kwja2sr4dqc"},{"post_id":"ckicwtuak001j2kwjbvyr1b9v","tag_id":"ckicwtuad00162kwjbhcq1q44","_id":"ckicwtub2002v2kwj75f82pwm"}],"Tag":[{"name":"redis","_id":"ckfi8ds200004bkv7hgnmg7s3"},{"name":"CS143","_id":"ckfmadwsc000264v700uaf4e2"},{"name":"词法分析","_id":"ckfmadwsd000364v76nj66p3x"},{"name":"Lex","_id":"ckfmadwsd000564v738n84jsd"},{"name":"Labs","_id":"ckfwrkg670002jwv77igxd6ss"},{"name":"CSAPP","_id":"ckfwrv6rn0001i8v70c0g5mmg"},{"name":"6.824","_id":"ckicwtu9e00032kwj2kcobaj8"},{"name":"tuple","_id":"ckicwtu9v000f2kwj9gij923l"},{"name":"STL","_id":"ckicwtua1000n2kwj871x7dur"},{"name":"回溯","_id":"ckicwtua7000w2kwj3wunc22f"},{"name":"LeetCode","_id":"ckicwtuad00162kwjbhcq1q44"},{"name":"DFS","_id":"ckicwtuah001d2kwj46elbxsi"},{"name":"双指针","_id":"ckicwtuaq001s2kwj1psrf1px"},{"name":"动态规划","_id":"ckicwtuaw00242kwj8ew496uc"},{"name":"链表","_id":"ckicwtuay002a2kwj1fw07hjf"},{"name":"滑动窗口","_id":"ckicwtuaz002f2kwj0scmco55"},{"name":"二叉树","_id":"ckicwtub0002l2kwj0aojey1a"}]}}