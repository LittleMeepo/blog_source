{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":0,"renderable":1},{"_id":"themes/melody/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":0,"renderable":1},{"_id":"themes/melody/source/css/404.styl","path":"css/404.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/katex.js","path":"js/katex.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":0,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/melody/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","path":"js/third-party/reveal/markdown.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","path":"js/third-party/reveal/marked.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","path":"js/third-party/reveal/math.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","path":"js/third-party/reveal/notes.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","path":"js/third-party/reveal/zoom.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","path":"js/third-party/reveal/reveal.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","path":"js/third-party/reveal/highlight.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/melody/.eslintignore","hash":"719a633358c168ec04b544a5a306fc454471f72f","modified":1601037382778},{"_id":"themes/melody/.eslintrc","hash":"2c75ddb670b21591023b2c4f52ecfb02578b5eae","modified":1601037382779},{"_id":"themes/melody/.travis.demo.yml","hash":"977db46c56f95e0b475326ee7499890aa16bd971","modified":1601037382779},{"_id":"themes/melody/.gitignore","hash":"371c0a57184696c2069b146fc8ccaa285ca7626c","modified":1601037382779},{"_id":"themes/melody/CHANGELOG.md","hash":"1bd1bad3e3450b69f4b303459ddd18c9ec545e9a","modified":1601037382779},{"_id":"themes/melody/FAQ.md","hash":"2e4871193be2bbade191c1064216072cbe61ab72","modified":1601037382780},{"_id":"themes/melody/LICENSE","hash":"f6ad35196b942786fa91aedc1c0f45bf89de3fd3","modified":1601037382780},{"_id":"themes/melody/README.md","hash":"afbc589a9023a2b827f611e880e2b63d573e9d6c","modified":1601037382781},{"_id":"themes/melody/_config.yml","hash":"06d5f00811b8fc68d2a391180af7cbe8a3b848c9","modified":1601037382781},{"_id":"themes/melody/package.json","hash":"ec19e33a67d5ff52d4fb941477fb4c3494f44a07","modified":1601037382796},{"_id":"themes/melody/stylus_format.json","hash":"53008fbf66531953489ab0f2ce166576b7ba1ab7","modified":1601037382823},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1601037382797},{"_id":"source/_data/melody.yml","hash":"63befb0371f120a0813ca16bf7f99336587b8d63","modified":1601037382742},{"_id":"source/404/index.md","hash":"2c14b9904deb95acc8b333e2a504277c0248e2e9","modified":1601037382741},{"_id":"source/_posts/Redis数据结构-1.md","hash":"89fdd6da26503267e90f27cfcc426c5ed9de6563","modified":1601037382742},{"_id":"source/categories/index.md","hash":"0396991f73be7ac45dfca08d5a002b3aefbc9258","modified":1601037382743},{"_id":"source/gallery/index.md","hash":"4be8ee7f6bac009ec9485b12bf90e7c9d5089d07","modified":1601037382743},{"_id":"source/slides/index.md","hash":"18b2ddf71852b9c329f83924b271a83f4f760468","modified":1601037382743},{"_id":"source/tags/index.md","hash":"d44dd78c0e5d39535af493ab67be48ab3e6ad57e","modified":1601037382744},{"_id":"themes/melody/languages/default.yml","hash":"4f87bdc1526111b59785f1dce1025435f7ed8e97","modified":1601037382781},{"_id":"themes/melody/languages/en.yml","hash":"4f87bdc1526111b59785f1dce1025435f7ed8e97","modified":1601037382782},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"1868dda88a019692d1993d5ee6b1b854f1da9d88","modified":1601037382782},{"_id":"themes/melody/layout/404.pug","hash":"0ad5d251ba70edad5c04a45d13ca6a8db3bf7b42","modified":1601037382782},{"_id":"themes/melody/layout/archive.pug","hash":"f3198ed4d59ca9d0423060a428106a857247a8f8","modified":1601037382783},{"_id":"themes/melody/layout/category.pug","hash":"27fe85787ee1e4bba75a6eadbf86f7ffc58cb66a","modified":1601037382783},{"_id":"themes/melody/layout/gallery.pug","hash":"1470a86b329eb5c60d6fa6a7bafa25ddf1255f97","modified":1601037382783},{"_id":"themes/melody/layout/index.pug","hash":"d15a36b5c8f1bec367888edb358e70b47eb15ea9","modified":1601037382795},{"_id":"themes/melody/layout/post.pug","hash":"40cb5814e69027ac030792a3b8d72bb43811f8e6","modified":1601037382795},{"_id":"themes/melody/layout/page.pug","hash":"bbcd45cc14b69e260cf7bf851d1926dedc5cd3be","modified":1601037382795},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1601037382796},{"_id":"themes/melody/layout/tag.pug","hash":"6b5c5c08e9a6773a4fce8583fdf614a784beb045","modified":1601037382796},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"b18e4a809de37da54ea914452ce4a24785fa7621","modified":1601037382797},{"_id":"themes/melody/scripts/replace-config.js","hash":"9d5378898a068e77b5e601c950b631144bd743cf","modified":1601037382797},{"_id":"themes/melody/source/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1601037382822},{"_id":"themes/melody/source/favicon.ico","hash":"af1eb9adcd8e0a46786da960f6a22f3dcab8c819","modified":1601037382806},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1601037382809},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"92c27adaf87d1108da8ba31c31ceae0e2083484c","modified":1601037382784},{"_id":"themes/melody/layout/includes/config.pug","hash":"42e523fef2e9f285d989d494f0a6fce485921719","modified":1601037382786},{"_id":"themes/melody/layout/includes/footer.pug","hash":"c5968d30a668c3d1b8e658d784b661799d3ba48a","modified":1601037382787},{"_id":"themes/melody/layout/includes/head.pug","hash":"5c5ad5baa1d44bd4264cc1af0042123ace8aa853","modified":1601037382788},{"_id":"themes/melody/layout/includes/header.pug","hash":"2d6ab2df1c048654c5b32eeed789e19949853d93","modified":1601037382788},{"_id":"themes/melody/layout/includes/layout.pug","hash":"80e59c4023baa2504bff0e9a69efab3314f8ffdb","modified":1601037382789},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"11a7d975f7e44932ea509a1a9d29f3e1ddece73e","modified":1601037382790},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"f37dc3576cc45ad3da097b58f420b5b523d8a9a5","modified":1601037382790},{"_id":"themes/melody/layout/includes/nav.pug","hash":"e1f5053a66a48b6fb6c4390ae55f5bd8e397ff8e","modified":1601037382790},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"5fd5e002d0ab203489c840451e4fa9d3535610e2","modified":1601037382793},{"_id":"themes/melody/source/css/404.styl","hash":"e16201381c7f064f1923a12a23136cec6db0a8a0","modified":1601037382798},{"_id":"themes/melody/source/css/index.styl","hash":"c2823ad6013df237993eea5cf190c313270da4db","modified":1601037382805},{"_id":"themes/melody/source/css/var.styl","hash":"bfce8a6dd838762e3db0b0052887220eb260dc7b","modified":1601037382805},{"_id":"themes/melody/source/js/copy.js","hash":"a3a7c3158ea23a3bf63f7900750cc0928b73e25f","modified":1601037382808},{"_id":"themes/melody/source/js/fancybox.js","hash":"91d2acc362c03d905b2d40bda42e08c0ae81c4f7","modified":1601037382809},{"_id":"themes/melody/source/js/fireworks.js","hash":"f4f902392525133028f501bef2afa6b1045b5b9c","modified":1601037382809},{"_id":"themes/melody/source/js/head.js","hash":"24bc79d4382730d79174cdc2cd3de6368dee8034","modified":1601037382809},{"_id":"themes/melody/source/js/scroll.js","hash":"ec2d51d4c98af4e1162a79e430340a7aeb3a7165","modified":1601037382810},{"_id":"themes/melody/source/js/katex.js","hash":"8cc3bcbfd489f86714e815dc6ab8bad466c49664","modified":1601037382810},{"_id":"themes/melody/source/js/sidebar.js","hash":"6906dcca3a6b9bd46489ca378bc1e74e454168ac","modified":1601037382811},{"_id":"themes/melody/source/js/utils.js","hash":"5ff6609b1d674f7879f30e491bdd3c69139704da","modified":1601037382822},{"_id":"themes/melody/source/js/transition.js","hash":"24db2b0ae93ea925fb18be6d466365a4cd9f6576","modified":1601037382822},{"_id":"themes/melody/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1601037382807},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1601037382788},{"_id":"themes/melody/source/img/avatar.png","hash":"af1eb9adcd8e0a46786da960f6a22f3dcab8c819","modified":1601037382808},{"_id":"themes/melody/layout/includes/404/404-nav.pug","hash":"f085a65214c2656ef6a104a2ae9fa1f8fbc196c1","modified":1601037382784},{"_id":"themes/melody/layout/includes/404/layout.pug","hash":"24e9cee9d7c96712fffc404671d88f1d9c0a5a9b","modified":1601037382784},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"0d753ace1190deebd9173279ab5369e4a30c53a8","modified":1601037382785},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"590bc5af43bc55182157dbac65e7cd8bf39f410d","modified":1601037382785},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"b8c1344a2760a46774f1894967c879d72802556d","modified":1601037382786},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"97f524092775c9b7e618c691df40b4bce9e121ac","modified":1601037382785},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"81e10998d5a2d28857f1c32e2d8b1ba1d84ce0f8","modified":1601037382786},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"1ffb80147fd443144ca6cf0230515f229eba6745","modified":1601037382786},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"760be9ea92e5eb6959f37b76b9c13fb627893b0a","modified":1601037382787},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1601037382788},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"05c080cbd236b7d94765350cc699b92736ca4609","modified":1601037382789},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"cde884e97dd980bf05910934ce1d52ef3bd5df9c","modified":1601037382789},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"3d2b2de0e199ab1fb151f41f2bbaac909f3d3d12","modified":1601037382791},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"66b4f4e8119e987cd3f9907298689a1408a05859","modified":1601037382791},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"205aff585f7763b61b8597c6121e6d8c5f9329a4","modified":1601037382791},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"171ce0b25aad4f5f4095f5da0caa7e9d26664a03","modified":1601037382793},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"cacee97b98943fecc3ad50c1b45f71a4cf2e8c4b","modified":1601037382794},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"055d41a0cc135b8fb02da8faa1df5faacb8fc13d","modified":1601037382792},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"c1ab921b1874d0026a7e1c23833600e3ea158881","modified":1601037382792},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"42794c93723016ce1f23b81325e723a6f23f72d0","modified":1601037382792},{"_id":"themes/melody/layout/includes/third-party/canvas-ribbon.pug","hash":"a72c4b5943e9e88588983ab1c1cfeaf210142c56","modified":1601037382794},{"_id":"themes/melody/layout/includes/third-party/katex.pug","hash":"19ffed43fa22c3bf1c8d974a8d33f73a9a67d098","modified":1601037382794},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"0afc0e488ef64f5cb27b9fc90b13f0f9e9f958a5","modified":1601037382794},{"_id":"themes/melody/source/css/_global/index.styl","hash":"a6ad6d2675e975883855a1fa3a634c7ba06d4685","modified":1601037382799},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"4e761f65c28f9df474fa2bd4d891c22db1aafa27","modified":1601037382799},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"ca5913698ddd97a55adcc98097038e4190cd7b58","modified":1601037382800},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"89af8e4eb6adacee6693b3df46d87a0b1b2b0d2d","modified":1601037382800},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"0168c78d28fbc8996ad9e1764457a6526404515b","modified":1601037382803},{"_id":"themes/melody/source/css/_search/index.styl","hash":"b16e4c15ad5844096f427eb3bdb49c5bb0bbcaf7","modified":1601037382803},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"adb2663fcfee1c84461231472f228aa82c6478bd","modified":1601037382804},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"3b32040e894978ec9be6569f44fd5557734f2340","modified":1601037382800},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"cb6db6151a49db6af0f7f6c8ee4c84872a75e437","modified":1601037382801},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"41fe374cfa854be779b07d91f918836e8c03d54a","modified":1601037382801},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"65420e8415cc117916c8b13f214d3a76815692dd","modified":1601037382801},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"ad5dc99b438588f92115592ed2d65a47c980720d","modified":1601037382802},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"01e135d129bb66f278039f6d2780e4462319395a","modified":1601037382802},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"29b02d3c319d84ab98dddec449f4bc83fbfdad36","modified":1601037382802},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1601037382804},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1601037382805},{"_id":"themes/melody/source/js/search/algolia.js","hash":"8a6673cb1616b50a5ac8b2dc20fb3475bc32039f","modified":1601037382811},{"_id":"themes/melody/source/js/search/local-search.js","hash":"a642a93fb52ebc87f05e5d3cee38618013fda539","modified":1601037382811},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"7c9416c1b444773b2d82e797131d6047364645a3","modified":1601037382812},{"_id":"themes/melody/source/js/third-party/canvas-ribbon.js","hash":"48abc9e33d90de08a49d63e1bcd21defe0461309","modified":1601037382812},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"0acabccbb20d722141fa15b37d535807092b2c88","modified":1601037382813},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"15a9dc404e02f2cd9b46cc71293b65671976567b","modified":1601037382821},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1601037382821},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1601037382814},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1601037382818},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","hash":"abd5391551b7b4e0cc0511c4b5c5ccfe66100f1b","modified":1601037382819},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1601037382819},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1601037382819},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1601037382820},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"e34a3faf6e51034de612d15700e059fe82dba310","modified":1601037382814},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1601037382820},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1601037382818},{"_id":"public/search.xml","hash":"b5f6dc34802bf8eec1bd2fbf9d377643ab729129","modified":1602575852390},{"_id":"public/404.html","hash":"32c04b1bc5307fe8e53fe6407fb088c49b1b3e76","modified":1601037486855},{"_id":"public/categories/index.html","hash":"a8384d7993d3d46739e55cb31d53ea5d3b108cac","modified":1602038863003},{"_id":"public/gallery/index.html","hash":"ac4309b9ad31ef2daf0801a673f43db61ce3e3f4","modified":1602038863003},{"_id":"public/slides/index.html","hash":"b7ff1f176c0a562968dc62bb88e096977ffb22ac","modified":1602038863003},{"_id":"public/tags/index.html","hash":"8f6ee4f93e5c34a09a8a11ea31cf7eeb5bac04a6","modified":1602038863003},{"_id":"public/index.html","hash":"03403599f86bc7328455c930ee214eb1e7530a6d","modified":1602575852390},{"_id":"public/archives/index.html","hash":"8ec455077a7d05a66e2459fccb9916d27a6d14c9","modified":1602042258586},{"_id":"public/archives/2020/index.html","hash":"88fc5ac83f8058e61e253b25dfc161c73e6efc55","modified":1602042258586},{"_id":"public/archives/2020/04/index.html","hash":"48acf59ffe5c7dd03343d664fe466d8ba0c1d4a6","modified":1602038863003},{"_id":"public/categories/redis源码/index.html","hash":"bc3554e07c56e638e24593aafee75708f5ec359e","modified":1602038863003},{"_id":"public/2020/04/30/Redis数据结构-1/index.html","hash":"0a4bf1f0e718659f2ceeef53a75604978ca66d8d","modified":1601916920416},{"_id":"public/tags/redis/index.html","hash":"390290bad128042edde29cd752611608ea90d895","modified":1602038863003},{"_id":"public/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1601037486855},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1601037486855},{"_id":"public/favicon.ico","hash":"af1eb9adcd8e0a46786da960f6a22f3dcab8c819","modified":1601037486855},{"_id":"public/img/avatar.png","hash":"af1eb9adcd8e0a46786da960f6a22f3dcab8c819","modified":1601037486855},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1601037486855},{"_id":"public/css/404.css","hash":"712ecbf4ac203ab5f1ea92989c0f0062a3d0aca9","modified":1601037486855},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1601037486855},{"_id":"public/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1601037486855},{"_id":"public/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1601037486855},{"_id":"public/js/fireworks.js","hash":"17d5770d46d9b531b675b129835561146290af83","modified":1601037486855},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1601037486855},{"_id":"public/js/head.js","hash":"555e9caa046d5a174af8d20c75e9e89c25aabb6c","modified":1601037486855},{"_id":"public/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1601037486855},{"_id":"public/js/scroll.js","hash":"467f883ca2ace0c0fb46ae24919223560a6fb72c","modified":1601037486855},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1601037486855},{"_id":"public/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1601037486855},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1601037486855},{"_id":"public/js/search/local-search.js","hash":"b7e77c27097d9d3ced13618912069d1ddf1cd64a","modified":1601037486855},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1601037486855},{"_id":"public/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1601037486855},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1601037486855},{"_id":"public/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1601037486855},{"_id":"public/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1601037486855},{"_id":"public/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1601037486855},{"_id":"public/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1601037486855},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1601037486855},{"_id":"public/css/index.css","hash":"76df2b0a1b49c203be5f25ad0d54e4361610496a","modified":1601037486855},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1601037486855},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1601037486855},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1601037486855},{"_id":"public/js/third-party/reveal/marked.min.js","hash":"37f3186f93ec854f56bf745a5988a89225e8da6c","modified":1601037486855},{"_id":"public/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1601037486855},{"_id":"public/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1601037486855},{"_id":"source/_posts/cs143-1.md","hash":"364804dc518112769906be0a7ea501d2f006b1b4","modified":1601916639058},{"_id":"public/categories/编译-编译原理/index.html","hash":"8c56ee38d7c633b09ca4014084640ff3c3ae6fd6","modified":1601916233857},{"_id":"public/archives/2020/09/index.html","hash":"f9ccbb053acdd01806aba0d8be73441e912f016c","modified":1602038863003},{"_id":"public/tags/CS143/index.html","hash":"88145256b0723863362cfdd1648fe5d54ee9d531","modified":1602038863003},{"_id":"public/tags/词法分析/index.html","hash":"69b7317eabac1a959577fe16d1f60f9d6569c1fe","modified":1602038863003},{"_id":"public/tags/Lex/index.html","hash":"6ce6edd5d335e67c9b715e6c4137efcca2281e03","modified":1602038863003},{"_id":"public/2020/09/28/cs143-1/index.html","hash":"13e185d73a751ce848a97309a261eecea16ce28f","modified":1602038863003},{"_id":"source/_posts/cs143-2.md","hash":"c933a12e1ff57f00853c390923140a66d4293ffd","modified":1601916646549},{"_id":"public/2020/09/28/cs143-2/index.html","hash":"0033eb58c52d65840a367acea9e51a3e9d5f5b84","modified":1601689273080},{"_id":"source/_posts/cs143-3.md","hash":"92e7e71196f4ca1aacdf1953299fe31bfdf3377f","modified":1602086557097},{"_id":"public/archives/2020/10/index.html","hash":"8d2d29ee82a1a31126f89c2a451f9aa21d50adac","modified":1602042258586},{"_id":"public/2020/10/03/cs143-2/index.html","hash":"e5a9dfcff1d5c809b99d434b3bac973ddc4a6a64","modified":1602038863003},{"_id":"public/2020/09/28/cs143-3/index.html","hash":"a2c53a38d8873cc4d4ff434326686943707458cd","modified":1601717351471},{"_id":"source/_posts/GDB-summary.md","hash":"aa030adf1ebac5c5813b7822a03405b914993077","modified":1602124705910},{"_id":"source/_posts/csapp-bomblab.md","hash":"74bfdb00a883229e5337e6bbdd3cb196c12db9a4","modified":1602125573295},{"_id":"source/_posts/csapp-datalab.md","hash":"ba9324e9b6317a5bb0dfb2953c92095764271ce4","modified":1601916914113},{"_id":"public/categories/编译/index.html","hash":"83f37e3c80fd799c9167189a000ca4b220e82f1b","modified":1602042258586},{"_id":"public/categories/编译/调试工具/index.html","hash":"7a9c87004f2688730b10091e1627d0eda5c13f26","modified":1602038863003},{"_id":"public/tags/Labs/index.html","hash":"4290d7f787c79c16b48f4efd57a23ec262a5eae0","modified":1602038863003},{"_id":"public/2020/10/06/cs143-3/index.html","hash":"d26cebf9c153dd2797067c6d3151de58a2fca4b7","modified":1602575852390},{"_id":"public/2020/10/06/GDB-summary/index.html","hash":"b5ddd86896dbc27f6cd361f265702831dd72b031","modified":1602575852390},{"_id":"public/categories/编译/编译原理/index.html","hash":"709a718c082d007f45c69338164eeb43d5b4b0b1","modified":1602038863003},{"_id":"public/tags/CSAPP/index.html","hash":"c50817ed62e488826b797ab3ae12040f9dfefa66","modified":1602042258586},{"_id":"public/2020/10/05/csapp-datalab/index.html","hash":"532e45bca55f59f31828f3d0c5da84c0fba696bb","modified":1602038863003},{"_id":"public/categories/编译/汇编/index.html","hash":"d3d8d2647f6050a22b9d794dc211b8511fa4ccdf","modified":1602042258586},{"_id":"public/2020/10/06/csapp-bomblab/index.html","hash":"6ab4a82faa515ec897bf53dc44d1c69979327a5e","modified":1602575852390},{"_id":"source/_posts/csapp-pre-datalab.md","hash":"56023cee5f3b908f7c7e837d95d295f841506fe7","modified":1602038727499},{"_id":"source/_posts/redis-data-structure-1.md","hash":"89fdd6da26503267e90f27cfcc426c5ed9de6563","modified":1601037382742},{"_id":"public/2020/10/06/csapp-pre-datalab/index.html","hash":"017a8f8647096c44fe4857b918fda15e8ead2e6a","modified":1602038863003},{"_id":"public/2020/04/30/redis-data-structure-1/index.html","hash":"5eece748b20cb146ab0aedc03c40b413beab8100","modified":1602038863003},{"_id":"source/_posts/csapp-pre-bomblab.md","hash":"56023cee5f3b908f7c7e837d95d295f841506fe7","modified":1602038727499},{"_id":"public/2020/10/06/csapp-pre-bomblab/index.html","hash":"5a97d6116f5b8d898cf24ec1c18b9cd3d2afe813","modified":1602042258586}],"Category":[{"name":"redis源码","_id":"ckfi8ds1z0003bkv70jfb51ue"},{"name":"编译 编译原理","_id":"ckfmadwsa000164v7d4wd0nlk"},{"name":"编译","_id":"ckfwrkg640001jwv7fl4j6nki"},{"name":"调试工具","parent":"ckfwrkg640001jwv7fl4j6nki","_id":"ckfwrkg680004jwv72vfybgcm"},{"name":"编译原理","parent":"ckfwrkg640001jwv7fl4j6nki","_id":"ckfwrv6rl0000i8v7c1l0gw7p"},{"name":"汇编","parent":"ckfwrkg640001jwv7fl4j6nki","_id":"ckfwrz4la0003qwv77lnx21qn"}],"Data":[{"_id":"melody","data":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null}}],"Page":[{"title":"404","date":"2019-10-13T07:49:05.000Z","layout":"404","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2019-10-13 15:49:05\nlayout: 404\npermalink: /404\n---","updated":"2020-09-25T12:36:22.741Z","path":"/404.html","comments":1,"_id":"ckfi8ds1p0000bkv7cuf16rov","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":""},{"title":"分类","date":"2018-01-04T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\n---","updated":"2020-09-25T12:36:22.743Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckfi8ds1w0002bkv7bm0k8w92","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":""},{"title":"Gallery","date":"2018-01-04T16:00:00.000Z","type":"gallery","_content":"","source":"gallery/index.md","raw":"---\ntitle: Gallery\ndate: 2018-01-05 00:00:00\ntype: \"gallery\"\n---","updated":"2020-09-25T12:36:22.743Z","path":"gallery/index.html","comments":1,"layout":"page","_id":"ckfi8ds200005bkv7arw6c0wz","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":""},{"title":"Slides","date":"2018-01-04T16:00:00.000Z","type":"slides","_content":"","source":"slides/index.md","raw":"---\ntitle: Slides\ndate: 2018-01-05 00:00:00\ntype: \"slides\"\n---","updated":"2020-09-25T12:36:22.743Z","path":"slides/index.html","comments":1,"layout":"page","_id":"ckfi8dt2d0008bkv72kwl7erl","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":""},{"title":"标签","date":"2018-01-04T16:00:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\n---","updated":"2020-09-25T12:36:22.744Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckfi8dt2e0009bkv7epu0e80w","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":""}],"Post":[{"title":"CS143 编译原理-1","date":"2020-09-28T08:41:00.000Z","_content":"\n- 编译器结构\n  1. 词法分析 (Lexical Analysis)\n  2. 语法分析 (Parsing)\n  3. 语义分析 (Semantic Analysis)\n  4. 优化 (Optimization)\n  5. 代码生成 (Code Generation)\n\n早期的编译器和现在的编译器的对比：\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927155639.png\" width=\"500px\"> </div>\n\n\n现在的编译器花了更多的时间在优化上面\n\n## 词法分析\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160531.png\" width=\"500px\"> </div>\n\n\n\"Words\" => \"Tokens Class\": **Identifier**, **keywords**, '**(**', '**)**', **numbers**, ...\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160906.png\" width=\"500px\"> </div>\n\n\n词法分析器将字符子串分类成Tokens，传递给**Parser**\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927161438.png\" width=\"500px\"> </div>\n\n\n- Left-to-right scan => lookahead sometimes required 有时候需要向前几个字符参考，来确定当前的token\n\n### 正则语言 Regular Languages\n\n- Regular expressions\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164524.png\" width=\"280px\"> </div>\n\n\n\n**Epsilon**不是空集，是一个只包含空字符的集合\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164758.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927165627.png\" width=\"500px\"> </div>\n\ngrammar: 文法\n\n- Regular expressions (syntax) specify regular languages (set of strings)\n\n### 形式化语言 Formal Languages\n\n- **Def.** Let $\\sum$ be a set of characters (an alphabet). \n\n  A **language** over $\\sum$ is a set of strings of characters drawn from $\\sum$\n\n- Meaning function $L$ maps **syntax** to **semantics** $L: Exp\\rightarrow Sets\\ of\\ Strings$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927172527.png\" width=\"500px\"> </div>\n\n- Meaning is many to one\n  - Never one to many!\n\n### Lexical Specifications\n\n- $AA^*=A^+$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232010.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232447.png\" width=\"500px\"> </div>\n\n最后一个表示补集\n\n- 如何预测一个s是不是属于L(R)\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232857.png\" width=\"500px\"> </div>\n\n写出所有类型token的正则表达式\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232923.png\" width=\"500px\"> </div>\n\n\n构建R，R能匹配所有类型的token\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927234514.png\" width=\"500px\"> </div>\n\n\n检查前缀是不是属于R，如果属于R，则一定属于R中的某个token类Rj，删除匹配完成的前缀接着进行第三步\n\n**一些问题**：\n\n1. 当较短和较长的字符串都匹配时，选较长的  \"Maximal Match\"\n\n2. 当同一个字符串和多个正则表达式匹配时，根据优先级\n\n3. What if no rule matches? 添加一个错误类，优先级设置成最低\n\n### 有限自动机\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928001815.png\" width=\"450px\"> </div>\n\n\n有限自动机是一种算法的实现\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928002027.png\" width=\"450px\"> </div>\n\n- 在一个状态，读取一些输入，变成另一个状态\n- 如果读完输入，最后处于接受状态，则accept，否则就reject\n\n#### DFA (Deterministic Finite Automata) 确定的有限状态自动机\n\n- 对于一个input，只能有一个转换\n- NO $\\epsilon$-moves\n- 执行更快，因为每一步都没有选择\n\n#### NFA (Nondeterministic Finite Automata) 不确定的优先状态自动机\n\n- 对于一个input，可以有多个转换\n- have $\\epsilon$-moves\n- smaller\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928153706.png\" width=\"250px\"> </div>\n\n\n### 正则表达式 => NFAs\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161156.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154159.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154222.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160059.png\" width=\"500px\"> </div>\n\n一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160203.png\" width=\"500px\"> </div>\n\n### NFA to DFA\n\n- $\\epsilon -closure$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160434.png\" width=\"500px\"> </div>\n\n相应的**DFA**：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161008.png\" width=\"500px\"> </div>\n\n### Implementing Finite Automata\n\nDFA可以用一张二维的表来表示：\n\n1. 一维是states\n2. 一维是输入符号\n3. 表中是转换的下一个states\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161404.png\" width=\"250px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161500.png\" width=\"500px\"> </div>\n\n一种更加节省空间的做法：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161534.png\" width=\"500px\"> </div>\n\nNFA直接转换成table：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161835.png\" width=\"500px\"> </div>\n\n节省空间，但是这样比NFA=>DFA=>table慢","source":"_posts/cs143-1.md","raw":"---\ntitle: CS143 编译原理-1\ndate: 2020-9-28 16:41\ntags: \n- CS143\n- 词法分析\n- Lex\ncategories: \n- 编译\n- 编译原理\n---\n\n- 编译器结构\n  1. 词法分析 (Lexical Analysis)\n  2. 语法分析 (Parsing)\n  3. 语义分析 (Semantic Analysis)\n  4. 优化 (Optimization)\n  5. 代码生成 (Code Generation)\n\n早期的编译器和现在的编译器的对比：\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927155639.png\" width=\"500px\"> </div>\n\n\n现在的编译器花了更多的时间在优化上面\n\n## 词法分析\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160531.png\" width=\"500px\"> </div>\n\n\n\"Words\" => \"Tokens Class\": **Identifier**, **keywords**, '**(**', '**)**', **numbers**, ...\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160906.png\" width=\"500px\"> </div>\n\n\n词法分析器将字符子串分类成Tokens，传递给**Parser**\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927161438.png\" width=\"500px\"> </div>\n\n\n- Left-to-right scan => lookahead sometimes required 有时候需要向前几个字符参考，来确定当前的token\n\n### 正则语言 Regular Languages\n\n- Regular expressions\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164524.png\" width=\"280px\"> </div>\n\n\n\n**Epsilon**不是空集，是一个只包含空字符的集合\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164758.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927165627.png\" width=\"500px\"> </div>\n\ngrammar: 文法\n\n- Regular expressions (syntax) specify regular languages (set of strings)\n\n### 形式化语言 Formal Languages\n\n- **Def.** Let $\\sum$ be a set of characters (an alphabet). \n\n  A **language** over $\\sum$ is a set of strings of characters drawn from $\\sum$\n\n- Meaning function $L$ maps **syntax** to **semantics** $L: Exp\\rightarrow Sets\\ of\\ Strings$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927172527.png\" width=\"500px\"> </div>\n\n- Meaning is many to one\n  - Never one to many!\n\n### Lexical Specifications\n\n- $AA^*=A^+$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232010.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232447.png\" width=\"500px\"> </div>\n\n最后一个表示补集\n\n- 如何预测一个s是不是属于L(R)\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232857.png\" width=\"500px\"> </div>\n\n写出所有类型token的正则表达式\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232923.png\" width=\"500px\"> </div>\n\n\n构建R，R能匹配所有类型的token\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927234514.png\" width=\"500px\"> </div>\n\n\n检查前缀是不是属于R，如果属于R，则一定属于R中的某个token类Rj，删除匹配完成的前缀接着进行第三步\n\n**一些问题**：\n\n1. 当较短和较长的字符串都匹配时，选较长的  \"Maximal Match\"\n\n2. 当同一个字符串和多个正则表达式匹配时，根据优先级\n\n3. What if no rule matches? 添加一个错误类，优先级设置成最低\n\n### 有限自动机\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928001815.png\" width=\"450px\"> </div>\n\n\n有限自动机是一种算法的实现\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928002027.png\" width=\"450px\"> </div>\n\n- 在一个状态，读取一些输入，变成另一个状态\n- 如果读完输入，最后处于接受状态，则accept，否则就reject\n\n#### DFA (Deterministic Finite Automata) 确定的有限状态自动机\n\n- 对于一个input，只能有一个转换\n- NO $\\epsilon$-moves\n- 执行更快，因为每一步都没有选择\n\n#### NFA (Nondeterministic Finite Automata) 不确定的优先状态自动机\n\n- 对于一个input，可以有多个转换\n- have $\\epsilon$-moves\n- smaller\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928153706.png\" width=\"250px\"> </div>\n\n\n### 正则表达式 => NFAs\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161156.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154159.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154222.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160059.png\" width=\"500px\"> </div>\n\n一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160203.png\" width=\"500px\"> </div>\n\n### NFA to DFA\n\n- $\\epsilon -closure$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160434.png\" width=\"500px\"> </div>\n\n相应的**DFA**：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161008.png\" width=\"500px\"> </div>\n\n### Implementing Finite Automata\n\nDFA可以用一张二维的表来表示：\n\n1. 一维是states\n2. 一维是输入符号\n3. 表中是转换的下一个states\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161404.png\" width=\"250px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161500.png\" width=\"500px\"> </div>\n\n一种更加节省空间的做法：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161534.png\" width=\"500px\"> </div>\n\nNFA直接转换成table：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161835.png\" width=\"500px\"> </div>\n\n节省空间，但是这样比NFA=>DFA=>table慢","slug":"cs143-1","published":1,"updated":"2020-10-05T16:50:39.058Z","_id":"ckfmadws4000064v78537caxf","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>编译器结构\n<ol>\n<li>词法分析 (Lexical Analysis)</li>\n<li>语法分析 (Parsing)</li>\n<li>语义分析 (Semantic Analysis)</li>\n<li>优化 (Optimization)</li>\n<li>代码生成 (Code Generation)</li>\n</ol>\n</li>\n</ul>\n<p>早期的编译器和现在的编译器的对比：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927155639.png\" width=\"500px\"> </div>\n<p>现在的编译器花了更多的时间在优化上面</p>\n<h2 id=\"词法分析\"><a class=\"markdownIt-Anchor\" href=\"#词法分析\"></a> 词法分析</h2>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160531.png\" width=\"500px\"> </div>\n<p>“Words” =&gt; “Tokens Class”: <strong>Identifier</strong>, <strong>keywords</strong>, ‘<strong>(</strong>’, ‘<strong>)</strong>’, <strong>numbers</strong>, …</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160906.png\" width=\"500px\"> </div>\n<p>词法分析器将字符子串分类成Tokens，传递给<strong>Parser</strong></p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927161438.png\" width=\"500px\"> </div>\n<ul>\n<li>Left-to-right scan =&gt; lookahead sometimes required 有时候需要向前几个字符参考，来确定当前的token</li>\n</ul>\n<h3 id=\"正则语言-regular-languages\"><a class=\"markdownIt-Anchor\" href=\"#正则语言-regular-languages\"></a> 正则语言 Regular Languages</h3>\n<ul>\n<li>Regular expressions</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164524.png\" width=\"280px\"> </div>\n<p><strong>Epsilon</strong>不是空集，是一个只包含空字符的集合</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164758.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927165627.png\" width=\"500px\"> </div>\n<p>grammar: 文法</p>\n<ul>\n<li>Regular expressions (syntax) specify regular languages (set of strings)</li>\n</ul>\n<h3 id=\"形式化语言-formal-languages\"><a class=\"markdownIt-Anchor\" href=\"#形式化语言-formal-languages\"></a> 形式化语言 Formal Languages</h3>\n<ul>\n<li>\n<p><strong>Def.</strong> Let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> be a set of characters (an alphabet).</p>\n<p>A <strong>language</strong> over <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> is a set of strings of characters drawn from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span></p>\n</li>\n<li>\n<p>Meaning function <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span></span></span></span> maps <strong>syntax</strong> to <strong>semantics</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo>:</mo><mi>E</mi><mi>x</mi><mi>p</mi><mo>→</mo><mi>S</mi><mi>e</mi><mi>t</mi><mi>s</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">L: Exp\\rightarrow Sets\\ of\\ Strings</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">s</span></span></span></span></p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927172527.png\" width=\"500px\"> </div>\n<ul>\n<li>Meaning is many to one\n<ul>\n<li>Never one to many!</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"lexical-specifications\"><a class=\"markdownIt-Anchor\" href=\"#lexical-specifications\"></a> Lexical Specifications</h3>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><msup><mi>A</mi><mo>∗</mo></msup><mo>=</mo><msup><mi>A</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">AA^*=A^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.688696em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232010.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232447.png\" width=\"500px\"> </div>\n<p>最后一个表示补集</p>\n<ul>\n<li>如何预测一个s是不是属于L®</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232857.png\" width=\"500px\"> </div>\n<p>写出所有类型token的正则表达式</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232923.png\" width=\"500px\"> </div>\n<p>构建R，R能匹配所有类型的token</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927234514.png\" width=\"500px\"> </div>\n<p>检查前缀是不是属于R，如果属于R，则一定属于R中的某个token类Rj，删除匹配完成的前缀接着进行第三步</p>\n<p><strong>一些问题</strong>：</p>\n<ol>\n<li>\n<p>当较短和较长的字符串都匹配时，选较长的  “Maximal Match”</p>\n</li>\n<li>\n<p>当同一个字符串和多个正则表达式匹配时，根据优先级</p>\n</li>\n<li>\n<p>What if no rule matches? 添加一个错误类，优先级设置成最低</p>\n</li>\n</ol>\n<h3 id=\"有限自动机\"><a class=\"markdownIt-Anchor\" href=\"#有限自动机\"></a> 有限自动机</h3>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928001815.png\" width=\"450px\"> </div>\n<p>有限自动机是一种算法的实现</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928002027.png\" width=\"450px\"> </div>\n<ul>\n<li>在一个状态，读取一些输入，变成另一个状态</li>\n<li>如果读完输入，最后处于接受状态，则accept，否则就reject</li>\n</ul>\n<h4 id=\"dfa-deterministic-finite-automata-确定的有限状态自动机\"><a class=\"markdownIt-Anchor\" href=\"#dfa-deterministic-finite-automata-确定的有限状态自动机\"></a> DFA (Deterministic Finite Automata) 确定的有限状态自动机</h4>\n<ul>\n<li>对于一个input，只能有一个转换</li>\n<li>NO <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ϵ</span></span></span></span>-moves</li>\n<li>执行更快，因为每一步都没有选择</li>\n</ul>\n<h4 id=\"nfa-nondeterministic-finite-automata-不确定的优先状态自动机\"><a class=\"markdownIt-Anchor\" href=\"#nfa-nondeterministic-finite-automata-不确定的优先状态自动机\"></a> NFA (Nondeterministic Finite Automata) 不确定的优先状态自动机</h4>\n<ul>\n<li>对于一个input，可以有多个转换</li>\n<li>have <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ϵ</span></span></span></span>-moves</li>\n<li>smaller</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928153706.png\" width=\"250px\"> </div>\n<h3 id=\"正则表达式-nfas\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式-nfas\"></a> 正则表达式 =&gt; NFAs</h3>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161156.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154159.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154222.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160059.png\" width=\"500px\"> </div>\n<p>一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160203.png\" width=\"500px\"> </div>\n<h3 id=\"nfa-to-dfa\"><a class=\"markdownIt-Anchor\" href=\"#nfa-to-dfa\"></a> NFA to DFA</h3>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi><mo>−</mo><mi>c</mi><mi>l</mi><mi>o</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon -closure</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">ϵ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160434.png\" width=\"500px\"> </div>\n<p>相应的<strong>DFA</strong>：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161008.png\" width=\"500px\"> </div>\n<h3 id=\"implementing-finite-automata\"><a class=\"markdownIt-Anchor\" href=\"#implementing-finite-automata\"></a> Implementing Finite Automata</h3>\n<p>DFA可以用一张二维的表来表示：</p>\n<ol>\n<li>一维是states</li>\n<li>一维是输入符号</li>\n<li>表中是转换的下一个states</li>\n</ol>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161404.png\" width=\"250px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161500.png\" width=\"500px\"> </div>\n<p>一种更加节省空间的做法：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161534.png\" width=\"500px\"> </div>\n<p>NFA直接转换成table：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161835.png\" width=\"500px\"> </div>\n<p>节省空间，但是这样比NFA=&gt;DFA=&gt;table慢</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<ul>\n<li>编译器结构\n<ol>\n<li>词法分析 (Lexical Analysis)</li>\n<li>语法分析 (Parsing)</li>\n<li>语义分析 (Semantic Analysis)</li>\n<li>优化 (Optimization)</li>\n<li>代码生成 (Code Generation)</li>\n</ol>\n</li>\n</ul>\n<p>早期的编译器和现在的编译器的对比：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927155639.png\" width=\"500px\"> </div>\n<p>现在的编译器花了更多的时间在优化上面</p>\n<h2 id=\"词法分析\"><a class=\"markdownIt-Anchor\" href=\"#词法分析\"></a> 词法分析</h2>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160531.png\" width=\"500px\"> </div>\n<p>“Words” =&gt; “Tokens Class”: <strong>Identifier</strong>, <strong>keywords</strong>, ‘<strong>(</strong>’, ‘<strong>)</strong>’, <strong>numbers</strong>, …</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927160906.png\" width=\"500px\"> </div>\n<p>词法分析器将字符子串分类成Tokens，传递给<strong>Parser</strong></p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927161438.png\" width=\"500px\"> </div>\n<ul>\n<li>Left-to-right scan =&gt; lookahead sometimes required 有时候需要向前几个字符参考，来确定当前的token</li>\n</ul>\n<h3 id=\"正则语言-regular-languages\"><a class=\"markdownIt-Anchor\" href=\"#正则语言-regular-languages\"></a> 正则语言 Regular Languages</h3>\n<ul>\n<li>Regular expressions</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164524.png\" width=\"280px\"> </div>\n<p><strong>Epsilon</strong>不是空集，是一个只包含空字符的集合</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927164758.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927165627.png\" width=\"500px\"> </div>\n<p>grammar: 文法</p>\n<ul>\n<li>Regular expressions (syntax) specify regular languages (set of strings)</li>\n</ul>\n<h3 id=\"形式化语言-formal-languages\"><a class=\"markdownIt-Anchor\" href=\"#形式化语言-formal-languages\"></a> 形式化语言 Formal Languages</h3>\n<ul>\n<li>\n<p><strong>Def.</strong> Let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> be a set of characters (an alphabet).</p>\n<p>A <strong>language</strong> over <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span> is a set of strings of characters drawn from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∑</mo></mrow><annotation encoding=\"application/x-tex\">\\sum</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span></span></span></span></p>\n</li>\n<li>\n<p>Meaning function <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span></span></span></span> maps <strong>syntax</strong> to <strong>semantics</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mo>:</mo><mi>E</mi><mi>x</mi><mi>p</mi><mo>→</mo><mi>S</mi><mi>e</mi><mi>t</mi><mi>s</mi><mtext> </mtext><mi>o</mi><mi>f</mi><mtext> </mtext><mi>S</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">L: Exp\\rightarrow Sets\\ of\\ Strings</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathdefault\">x</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\"> </span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">s</span></span></span></span></p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927172527.png\" width=\"500px\"> </div>\n<ul>\n<li>Meaning is many to one\n<ul>\n<li>Never one to many!</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"lexical-specifications\"><a class=\"markdownIt-Anchor\" href=\"#lexical-specifications\"></a> Lexical Specifications</h3>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><msup><mi>A</mi><mo>∗</mo></msup><mo>=</mo><msup><mi>A</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">AA^*=A^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.688696em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232010.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232447.png\" width=\"500px\"> </div>\n<p>最后一个表示补集</p>\n<ul>\n<li>如何预测一个s是不是属于L®</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232857.png\" width=\"500px\"> </div>\n<p>写出所有类型token的正则表达式</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927232923.png\" width=\"500px\"> </div>\n<p>构建R，R能匹配所有类型的token</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200927234514.png\" width=\"500px\"> </div>\n<p>检查前缀是不是属于R，如果属于R，则一定属于R中的某个token类Rj，删除匹配完成的前缀接着进行第三步</p>\n<p><strong>一些问题</strong>：</p>\n<ol>\n<li>\n<p>当较短和较长的字符串都匹配时，选较长的  “Maximal Match”</p>\n</li>\n<li>\n<p>当同一个字符串和多个正则表达式匹配时，根据优先级</p>\n</li>\n<li>\n<p>What if no rule matches? 添加一个错误类，优先级设置成最低</p>\n</li>\n</ol>\n<h3 id=\"有限自动机\"><a class=\"markdownIt-Anchor\" href=\"#有限自动机\"></a> 有限自动机</h3>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928001815.png\" width=\"450px\"> </div>\n<p>有限自动机是一种算法的实现</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928002027.png\" width=\"450px\"> </div>\n<ul>\n<li>在一个状态，读取一些输入，变成另一个状态</li>\n<li>如果读完输入，最后处于接受状态，则accept，否则就reject</li>\n</ul>\n<h4 id=\"dfa-deterministic-finite-automata-确定的有限状态自动机\"><a class=\"markdownIt-Anchor\" href=\"#dfa-deterministic-finite-automata-确定的有限状态自动机\"></a> DFA (Deterministic Finite Automata) 确定的有限状态自动机</h4>\n<ul>\n<li>对于一个input，只能有一个转换</li>\n<li>NO <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ϵ</span></span></span></span>-moves</li>\n<li>执行更快，因为每一步都没有选择</li>\n</ul>\n<h4 id=\"nfa-nondeterministic-finite-automata-不确定的优先状态自动机\"><a class=\"markdownIt-Anchor\" href=\"#nfa-nondeterministic-finite-automata-不确定的优先状态自动机\"></a> NFA (Nondeterministic Finite Automata) 不确定的优先状态自动机</h4>\n<ul>\n<li>对于一个input，可以有多个转换</li>\n<li>have <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ϵ</span></span></span></span>-moves</li>\n<li>smaller</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928153706.png\" width=\"250px\"> </div>\n<h3 id=\"正则表达式-nfas\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式-nfas\"></a> 正则表达式 =&gt; NFAs</h3>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161156.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154159.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928154222.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160059.png\" width=\"500px\"> </div>\n<p>一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160203.png\" width=\"500px\"> </div>\n<h3 id=\"nfa-to-dfa\"><a class=\"markdownIt-Anchor\" href=\"#nfa-to-dfa\"></a> NFA to DFA</h3>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi><mo>−</mo><mi>c</mi><mi>l</mi><mi>o</mi><mi>s</mi><mi>u</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon -closure</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">ϵ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928160434.png\" width=\"500px\"> </div>\n<p>相应的<strong>DFA</strong>：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161008.png\" width=\"500px\"> </div>\n<h3 id=\"implementing-finite-automata\"><a class=\"markdownIt-Anchor\" href=\"#implementing-finite-automata\"></a> Implementing Finite Automata</h3>\n<p>DFA可以用一张二维的表来表示：</p>\n<ol>\n<li>一维是states</li>\n<li>一维是输入符号</li>\n<li>表中是转换的下一个states</li>\n</ol>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161404.png\" width=\"250px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161500.png\" width=\"500px\"> </div>\n<p>一种更加节省空间的做法：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161534.png\" width=\"500px\"> </div>\n<p>NFA直接转换成table：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/1/20200928161835.png\" width=\"500px\"> </div>\n<p>节省空间，但是这样比NFA=&gt;DFA=&gt;table慢</p>\n"},{"title":"CS143 编译原理-2","date":"2020-10-03T05:02:00.000Z","_content":"\n## 语法分析1\n\n有些语法（比如**括号嵌套匹配**无法使用正则表达式来表示）\n\n**Paring**:\n\n- **Input**: sequence of tokens from lexer （token序列）\n- **Output**: parse tree of the program （语法树）\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225221.png\" width=\"500px\"> </div> \n\n### 上下文无关文法 (Context-Free Grammers CFGs)\n\n- 不是所有的strings都是合法的程序，所以需要Language来描述有效的strings，需要一个方法来区分有效和无效的strings\n\n- 编程语言通常具有递归形式，CFGs可以是递归结构的一种自然标记\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225954.png\" width=\"350px\"> </div>\n\n终结符T 非终结符N 一个产生式集合\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928235823.png\" width=\"400px\"> </div>\n\n从一个符号S开始，不断用产生式替换右边，直到右边没有非终结符为止\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000352.png\" width=\"400px\"> </div>\n\n一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000519.png\" width=\"400px\"> </div>\n\nCFG的目标：\n\n1. 输出\"yes\" or \"no\"；并且输出语法树\n2. 处理error\n3. CFG的实现（e.g., bison）\n\n### 推导\n\n- Grammar $E\\rightarrow E+E|E*E|(E)|id$\n- String $id*id+id$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929203505.png\" width=\"500px\"> </div>\n\n这个例子的是left-most derivation，在每一步替换最左的non-terminal\n\nright-most 和 left-most derivations 形成相同的parse tree\n\n**A parse tree has**:\n\n1. Terminals at the leaves\n2. Non-terminals at the interior nodes\n\n一个derivation定义了一颗parse tree\n\n### 二义性 Ambiguity\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929205102.png\" width=\"500px\"> </div>\n\n一个grammer是ambiguity的如果有超过一颗parse tree\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201001113537.png\" width=\"500px\"> </div>\n\n解决ambiguity的方法是重写grammer，改变优先级；或者可以通过定义优先级\n\n### Error Handing\n\n- Panic mode\n- Error productions\n- Automatic local or global correction\n\n### AST 抽象语法树\n\n像parse trees但是忽略了一些细节\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002144333.png\" width=\"300px\"> </div>\n\n- 从具体的语义抽象 => 更加紧凑 & 简单\n\n- 编译器中重要的数据结构\n\n### 递归下降解析 Recursive Descent Parsing\n\n(第一个parsing算法)\n\n一个top-down parsing算法\n\n- The parse tree is constructed \n  - From the top\n  - From left to right\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002152907.png\" width=\"500px\"> </div>\n\n#### 递归下降算法的一般描述\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200003.png\" width=\"400px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200134.png\" width=\"400px\"> </div>\n\n- check TOKEN和当前输入流中所指的对象是否相等\n\n- 检查和S的某一个产生式是否匹配\n\n- 检查和S的任何产生式是否匹配\n\n一个编码的例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201258.png\" width=\"400px\"> </div>\n\n(PLUS: ' + ')\n\n- save保存初始指针\n- 第一个产生式返回false则尝试第二个\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201618.png\" width=\"500px\"> </div>\n\n#### Limitations 递归下降的局限性\n\n一旦找到一个能够用在非终结符元素的产生式的话，那么就没有回滚操作\n\n- If a production for non-terminal X succeeds\n  - Cannot backtrack to try a different production for X later\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002204605.png\" width=\"800px\"> </div>\n\n- 这边所讲的递归下降并不通用，但是容易实现\n- 通过提取左因子 left factoring，可以对这个算法进行rewrite\n\n### 左递归 Left Recursion\n\n递归下降算法中的主要难点\n\n左递归的例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205539.png\" width=\"300px\"> </div>\n\n**Left Recursion 左递归**:\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205631.png\" width=\"500px\"> </div>\n\n$$S\\rightarrow Sa \\rightarrow Saa \\rightarrow Saaa \\dots$$\n\n**递归下降算法**不适用于**左递归**情形\n\n左递归语法的一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210207.png\" width=\"500px\"> </div>\n\n主要原因是$\\beta$是最后的推导产生的，却在第一个位置，这不符合从左到右解析的原则\n\n**可以使用右递归语法 right-recursion 进行重写**\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210454.png\" width=\"500px\"> </div>\n\n*Dragon Book*中有消除左递归的具体算法\n\n小结：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002211241.png\" width=\"350px\"> </div>\n\n一般编译器中都会采取手写praser的做法，如gcc\n\n### 预测解析 Predictive Parsing\n\n- 类似递归下降，但是praser能预测使用哪个产生式\n  - looking at the next few tokens\n  - 不回滚\n\n- 预测praser能接受LL(k)语法 (left-to-right, left-most derivation, look forward k tokens)\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003003010.png\" width=\"350px\"> </div>\n\n在递归下降算法中，每一步都有许多产生式选择，如果选择错了就回滚\n\n在LL(1)中，每一步都只有一种选择\n\n#### We need to left-factor the grammar 提取左公因子\n\n**目的**：消除一个非终结符的多个产生式的公共前缀\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003111250.png\" width=\"250px\"> </div>\n\n通过提取左公因式，可以将产生式的执行推迟进行，先prase公共的非终结符\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113332.png\" width=\"500px\"> </div>\n\n通过grammar生成parsing table\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113423.png\" width=\"500px\"> </div>\n\n- 方法与递归下降类似，除了\n  - 对于最左的非终结符S\n  - look at下一个token\n  - 在表中找到对应的产生式\n\n- 用一个栈来存放之前的parse tree，栈顶是当前要parse的非终结符或者终结符\n\n算法：\n\n($符号表示end of input)\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113459.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113532.png\" width=\"500px\"> </div>\n\n","source":"_posts/cs143-2.md","raw":"---\ntitle: CS143 编译原理-2\ndate: 2020-10-3 13:02\ntags: \n- CS143\n- 词法分析\n- Lex\ncategories: \n- 编译\n- 编译原理\n---\n\n## 语法分析1\n\n有些语法（比如**括号嵌套匹配**无法使用正则表达式来表示）\n\n**Paring**:\n\n- **Input**: sequence of tokens from lexer （token序列）\n- **Output**: parse tree of the program （语法树）\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225221.png\" width=\"500px\"> </div> \n\n### 上下文无关文法 (Context-Free Grammers CFGs)\n\n- 不是所有的strings都是合法的程序，所以需要Language来描述有效的strings，需要一个方法来区分有效和无效的strings\n\n- 编程语言通常具有递归形式，CFGs可以是递归结构的一种自然标记\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225954.png\" width=\"350px\"> </div>\n\n终结符T 非终结符N 一个产生式集合\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928235823.png\" width=\"400px\"> </div>\n\n从一个符号S开始，不断用产生式替换右边，直到右边没有非终结符为止\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000352.png\" width=\"400px\"> </div>\n\n一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000519.png\" width=\"400px\"> </div>\n\nCFG的目标：\n\n1. 输出\"yes\" or \"no\"；并且输出语法树\n2. 处理error\n3. CFG的实现（e.g., bison）\n\n### 推导\n\n- Grammar $E\\rightarrow E+E|E*E|(E)|id$\n- String $id*id+id$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929203505.png\" width=\"500px\"> </div>\n\n这个例子的是left-most derivation，在每一步替换最左的non-terminal\n\nright-most 和 left-most derivations 形成相同的parse tree\n\n**A parse tree has**:\n\n1. Terminals at the leaves\n2. Non-terminals at the interior nodes\n\n一个derivation定义了一颗parse tree\n\n### 二义性 Ambiguity\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929205102.png\" width=\"500px\"> </div>\n\n一个grammer是ambiguity的如果有超过一颗parse tree\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201001113537.png\" width=\"500px\"> </div>\n\n解决ambiguity的方法是重写grammer，改变优先级；或者可以通过定义优先级\n\n### Error Handing\n\n- Panic mode\n- Error productions\n- Automatic local or global correction\n\n### AST 抽象语法树\n\n像parse trees但是忽略了一些细节\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002144333.png\" width=\"300px\"> </div>\n\n- 从具体的语义抽象 => 更加紧凑 & 简单\n\n- 编译器中重要的数据结构\n\n### 递归下降解析 Recursive Descent Parsing\n\n(第一个parsing算法)\n\n一个top-down parsing算法\n\n- The parse tree is constructed \n  - From the top\n  - From left to right\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002152907.png\" width=\"500px\"> </div>\n\n#### 递归下降算法的一般描述\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200003.png\" width=\"400px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200134.png\" width=\"400px\"> </div>\n\n- check TOKEN和当前输入流中所指的对象是否相等\n\n- 检查和S的某一个产生式是否匹配\n\n- 检查和S的任何产生式是否匹配\n\n一个编码的例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201258.png\" width=\"400px\"> </div>\n\n(PLUS: ' + ')\n\n- save保存初始指针\n- 第一个产生式返回false则尝试第二个\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201618.png\" width=\"500px\"> </div>\n\n#### Limitations 递归下降的局限性\n\n一旦找到一个能够用在非终结符元素的产生式的话，那么就没有回滚操作\n\n- If a production for non-terminal X succeeds\n  - Cannot backtrack to try a different production for X later\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002204605.png\" width=\"800px\"> </div>\n\n- 这边所讲的递归下降并不通用，但是容易实现\n- 通过提取左因子 left factoring，可以对这个算法进行rewrite\n\n### 左递归 Left Recursion\n\n递归下降算法中的主要难点\n\n左递归的例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205539.png\" width=\"300px\"> </div>\n\n**Left Recursion 左递归**:\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205631.png\" width=\"500px\"> </div>\n\n$$S\\rightarrow Sa \\rightarrow Saa \\rightarrow Saaa \\dots$$\n\n**递归下降算法**不适用于**左递归**情形\n\n左递归语法的一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210207.png\" width=\"500px\"> </div>\n\n主要原因是$\\beta$是最后的推导产生的，却在第一个位置，这不符合从左到右解析的原则\n\n**可以使用右递归语法 right-recursion 进行重写**\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210454.png\" width=\"500px\"> </div>\n\n*Dragon Book*中有消除左递归的具体算法\n\n小结：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002211241.png\" width=\"350px\"> </div>\n\n一般编译器中都会采取手写praser的做法，如gcc\n\n### 预测解析 Predictive Parsing\n\n- 类似递归下降，但是praser能预测使用哪个产生式\n  - looking at the next few tokens\n  - 不回滚\n\n- 预测praser能接受LL(k)语法 (left-to-right, left-most derivation, look forward k tokens)\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003003010.png\" width=\"350px\"> </div>\n\n在递归下降算法中，每一步都有许多产生式选择，如果选择错了就回滚\n\n在LL(1)中，每一步都只有一种选择\n\n#### We need to left-factor the grammar 提取左公因子\n\n**目的**：消除一个非终结符的多个产生式的公共前缀\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003111250.png\" width=\"250px\"> </div>\n\n通过提取左公因式，可以将产生式的执行推迟进行，先prase公共的非终结符\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113332.png\" width=\"500px\"> </div>\n\n通过grammar生成parsing table\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113423.png\" width=\"500px\"> </div>\n\n- 方法与递归下降类似，除了\n  - 对于最左的非终结符S\n  - look at下一个token\n  - 在表中找到对应的产生式\n\n- 用一个栈来存放之前的parse tree，栈顶是当前要parse的非终结符或者终结符\n\n算法：\n\n($符号表示end of input)\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113459.png\" width=\"500px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113532.png\" width=\"500px\"> </div>\n\n","slug":"cs143-2","published":1,"updated":"2020-10-05T16:50:46.549Z","_id":"ckft0fvp40000dsv73idcbnq3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"语法分析1\"><a class=\"markdownIt-Anchor\" href=\"#语法分析1\"></a> 语法分析1</h2>\n<p>有些语法（比如<strong>括号嵌套匹配</strong>无法使用正则表达式来表示）</p>\n<p><strong>Paring</strong>:</p>\n<ul>\n<li><strong>Input</strong>: sequence of tokens from lexer （token序列）</li>\n<li><strong>Output</strong>: parse tree of the program （语法树）</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225221.png\" width=\"500px\"> </div> \n<h3 id=\"上下文无关文法-context-free-grammers-cfgs\"><a class=\"markdownIt-Anchor\" href=\"#上下文无关文法-context-free-grammers-cfgs\"></a> 上下文无关文法 (Context-Free Grammers CFGs)</h3>\n<ul>\n<li>\n<p>不是所有的strings都是合法的程序，所以需要Language来描述有效的strings，需要一个方法来区分有效和无效的strings</p>\n</li>\n<li>\n<p>编程语言通常具有递归形式，CFGs可以是递归结构的一种自然标记</p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225954.png\" width=\"350px\"> </div>\n<p>终结符T 非终结符N 一个产生式集合</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928235823.png\" width=\"400px\"> </div>\n<p>从一个符号S开始，不断用产生式替换右边，直到右边没有非终结符为止</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000352.png\" width=\"400px\"> </div>\n<p>一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000519.png\" width=\"400px\"> </div>\n<p>CFG的目标：</p>\n<ol>\n<li>输出&quot;yes&quot; or “no”；并且输出语法树</li>\n<li>处理error</li>\n<li>CFG的实现（e.g., bison）</li>\n</ol>\n<h3 id=\"推导\"><a class=\"markdownIt-Anchor\" href=\"#推导\"></a> 推导</h3>\n<ul>\n<li>Grammar <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mo>→</mo><mi>E</mi><mo>+</mo><mi>E</mi><mi mathvariant=\"normal\">∣</mi><mi>E</mi><mo>∗</mo><mi>E</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">E\\rightarrow E+E|E*E|(E)|id</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">∣</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span></span></span></span></li>\n<li>String <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>d</mi><mo>∗</mo><mi>i</mi><mi>d</mi><mo>+</mo><mi>i</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">id*id+id</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929203505.png\" width=\"500px\"> </div>\n<p>这个例子的是left-most derivation，在每一步替换最左的non-terminal</p>\n<p>right-most 和 left-most derivations 形成相同的parse tree</p>\n<p><strong>A parse tree has</strong>:</p>\n<ol>\n<li>Terminals at the leaves</li>\n<li>Non-terminals at the interior nodes</li>\n</ol>\n<p>一个derivation定义了一颗parse tree</p>\n<h3 id=\"二义性-ambiguity\"><a class=\"markdownIt-Anchor\" href=\"#二义性-ambiguity\"></a> 二义性 Ambiguity</h3>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929205102.png\" width=\"500px\"> </div>\n<p>一个grammer是ambiguity的如果有超过一颗parse tree</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201001113537.png\" width=\"500px\"> </div>\n<p>解决ambiguity的方法是重写grammer，改变优先级；或者可以通过定义优先级</p>\n<h3 id=\"error-handing\"><a class=\"markdownIt-Anchor\" href=\"#error-handing\"></a> Error Handing</h3>\n<ul>\n<li>Panic mode</li>\n<li>Error productions</li>\n<li>Automatic local or global correction</li>\n</ul>\n<h3 id=\"ast-抽象语法树\"><a class=\"markdownIt-Anchor\" href=\"#ast-抽象语法树\"></a> AST 抽象语法树</h3>\n<p>像parse trees但是忽略了一些细节</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002144333.png\" width=\"300px\"> </div>\n<ul>\n<li>\n<p>从具体的语义抽象 =&gt; 更加紧凑 &amp; 简单</p>\n</li>\n<li>\n<p>编译器中重要的数据结构</p>\n</li>\n</ul>\n<h3 id=\"递归下降解析-recursive-descent-parsing\"><a class=\"markdownIt-Anchor\" href=\"#递归下降解析-recursive-descent-parsing\"></a> 递归下降解析 Recursive Descent Parsing</h3>\n<p>(第一个parsing算法)</p>\n<p>一个top-down parsing算法</p>\n<ul>\n<li>The parse tree is constructed\n<ul>\n<li>From the top</li>\n<li>From left to right</li>\n</ul>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002152907.png\" width=\"500px\"> </div>\n<h4 id=\"递归下降算法的一般描述\"><a class=\"markdownIt-Anchor\" href=\"#递归下降算法的一般描述\"></a> 递归下降算法的一般描述</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200003.png\" width=\"400px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200134.png\" width=\"400px\"> </div>\n<ul>\n<li>\n<p>check TOKEN和当前输入流中所指的对象是否相等</p>\n</li>\n<li>\n<p>检查和S的某一个产生式是否匹配</p>\n</li>\n<li>\n<p>检查和S的任何产生式是否匹配</p>\n</li>\n</ul>\n<p>一个编码的例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201258.png\" width=\"400px\"> </div>\n<p>(PLUS: ’ + ')</p>\n<ul>\n<li>save保存初始指针</li>\n<li>第一个产生式返回false则尝试第二个</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201618.png\" width=\"500px\"> </div>\n<h4 id=\"limitations-递归下降的局限性\"><a class=\"markdownIt-Anchor\" href=\"#limitations-递归下降的局限性\"></a> Limitations 递归下降的局限性</h4>\n<p>一旦找到一个能够用在非终结符元素的产生式的话，那么就没有回滚操作</p>\n<ul>\n<li>If a production for non-terminal X succeeds\n<ul>\n<li>Cannot backtrack to try a different production for X later</li>\n</ul>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002204605.png\" width=\"800px\"> </div>\n<ul>\n<li>这边所讲的递归下降并不通用，但是容易实现</li>\n<li>通过提取左因子 left factoring，可以对这个算法进行rewrite</li>\n</ul>\n<h3 id=\"左递归-left-recursion\"><a class=\"markdownIt-Anchor\" href=\"#左递归-left-recursion\"></a> 左递归 Left Recursion</h3>\n<p>递归下降算法中的主要难点</p>\n<p>左递归的例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205539.png\" width=\"300px\"> </div>\n<p><strong>Left Recursion 左递归</strong>:</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205631.png\" width=\"500px\"> </div>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>→</mo><mi>S</mi><mi>a</mi><mo>→</mo><mi>S</mi><mi>a</mi><mi>a</mi><mo>→</mo><mi>S</mi><mi>a</mi><mi>a</mi><mi>a</mi><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">S\\rightarrow Sa \\rightarrow Saa \\rightarrow Saaa \\dots\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span></span></p>\n<p><strong>递归下降算法</strong>不适用于<strong>左递归</strong>情形</p>\n<p>左递归语法的一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210207.png\" width=\"500px\"> </div>\n<p>主要原因是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span>是最后的推导产生的，却在第一个位置，这不符合从左到右解析的原则</p>\n<p><strong>可以使用右递归语法 right-recursion 进行重写</strong></p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210454.png\" width=\"500px\"> </div>\n<p><em>Dragon Book</em>中有消除左递归的具体算法</p>\n<p>小结：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002211241.png\" width=\"350px\"> </div>\n<p>一般编译器中都会采取手写praser的做法，如gcc</p>\n<h3 id=\"预测解析-predictive-parsing\"><a class=\"markdownIt-Anchor\" href=\"#预测解析-predictive-parsing\"></a> 预测解析 Predictive Parsing</h3>\n<ul>\n<li>\n<p>类似递归下降，但是praser能预测使用哪个产生式</p>\n<ul>\n<li>looking at the next few tokens</li>\n<li>不回滚</li>\n</ul>\n</li>\n<li>\n<p>预测praser能接受LL(k)语法 (left-to-right, left-most derivation, look forward k tokens)</p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003003010.png\" width=\"350px\"> </div>\n<p>在递归下降算法中，每一步都有许多产生式选择，如果选择错了就回滚</p>\n<p>在LL(1)中，每一步都只有一种选择</p>\n<h4 id=\"we-need-to-left-factor-the-grammar-提取左公因子\"><a class=\"markdownIt-Anchor\" href=\"#we-need-to-left-factor-the-grammar-提取左公因子\"></a> We need to left-factor the grammar 提取左公因子</h4>\n<p><strong>目的</strong>：消除一个非终结符的多个产生式的公共前缀</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003111250.png\" width=\"250px\"> </div>\n<p>通过提取左公因式，可以将产生式的执行推迟进行，先prase公共的非终结符</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113332.png\" width=\"500px\"> </div>\n<p>通过grammar生成parsing table</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113423.png\" width=\"500px\"> </div>\n<ul>\n<li>\n<p>方法与递归下降类似，除了</p>\n<ul>\n<li>对于最左的非终结符S</li>\n<li>look at下一个token</li>\n<li>在表中找到对应的产生式</li>\n</ul>\n</li>\n<li>\n<p>用一个栈来存放之前的parse tree，栈顶是当前要parse的非终结符或者终结符</p>\n</li>\n</ul>\n<p>算法：</p>\n<p>($符号表示end of input)</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113459.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113532.png\" width=\"500px\"> </div>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"语法分析1\"><a class=\"markdownIt-Anchor\" href=\"#语法分析1\"></a> 语法分析1</h2>\n<p>有些语法（比如<strong>括号嵌套匹配</strong>无法使用正则表达式来表示）</p>\n<p><strong>Paring</strong>:</p>\n<ul>\n<li><strong>Input</strong>: sequence of tokens from lexer （token序列）</li>\n<li><strong>Output</strong>: parse tree of the program （语法树）</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225221.png\" width=\"500px\"> </div> \n<h3 id=\"上下文无关文法-context-free-grammers-cfgs\"><a class=\"markdownIt-Anchor\" href=\"#上下文无关文法-context-free-grammers-cfgs\"></a> 上下文无关文法 (Context-Free Grammers CFGs)</h3>\n<ul>\n<li>\n<p>不是所有的strings都是合法的程序，所以需要Language来描述有效的strings，需要一个方法来区分有效和无效的strings</p>\n</li>\n<li>\n<p>编程语言通常具有递归形式，CFGs可以是递归结构的一种自然标记</p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928225954.png\" width=\"350px\"> </div>\n<p>终结符T 非终结符N 一个产生式集合</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200928235823.png\" width=\"400px\"> </div>\n<p>从一个符号S开始，不断用产生式替换右边，直到右边没有非终结符为止</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000352.png\" width=\"400px\"> </div>\n<p>一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929000519.png\" width=\"400px\"> </div>\n<p>CFG的目标：</p>\n<ol>\n<li>输出&quot;yes&quot; or “no”；并且输出语法树</li>\n<li>处理error</li>\n<li>CFG的实现（e.g., bison）</li>\n</ol>\n<h3 id=\"推导\"><a class=\"markdownIt-Anchor\" href=\"#推导\"></a> 推导</h3>\n<ul>\n<li>Grammar <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi><mo>→</mo><mi>E</mi><mo>+</mo><mi>E</mi><mi mathvariant=\"normal\">∣</mi><mi>E</mi><mo>∗</mo><mi>E</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">E\\rightarrow E+E|E*E|(E)|id</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord\">∣</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span></span></span></span></li>\n<li>String <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>d</mi><mo>∗</mo><mi>i</mi><mi>d</mi><mo>+</mo><mi>i</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">id*id+id</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929203505.png\" width=\"500px\"> </div>\n<p>这个例子的是left-most derivation，在每一步替换最左的non-terminal</p>\n<p>right-most 和 left-most derivations 形成相同的parse tree</p>\n<p><strong>A parse tree has</strong>:</p>\n<ol>\n<li>Terminals at the leaves</li>\n<li>Non-terminals at the interior nodes</li>\n</ol>\n<p>一个derivation定义了一颗parse tree</p>\n<h3 id=\"二义性-ambiguity\"><a class=\"markdownIt-Anchor\" href=\"#二义性-ambiguity\"></a> 二义性 Ambiguity</h3>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20200929205102.png\" width=\"500px\"> </div>\n<p>一个grammer是ambiguity的如果有超过一颗parse tree</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201001113537.png\" width=\"500px\"> </div>\n<p>解决ambiguity的方法是重写grammer，改变优先级；或者可以通过定义优先级</p>\n<h3 id=\"error-handing\"><a class=\"markdownIt-Anchor\" href=\"#error-handing\"></a> Error Handing</h3>\n<ul>\n<li>Panic mode</li>\n<li>Error productions</li>\n<li>Automatic local or global correction</li>\n</ul>\n<h3 id=\"ast-抽象语法树\"><a class=\"markdownIt-Anchor\" href=\"#ast-抽象语法树\"></a> AST 抽象语法树</h3>\n<p>像parse trees但是忽略了一些细节</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002144333.png\" width=\"300px\"> </div>\n<ul>\n<li>\n<p>从具体的语义抽象 =&gt; 更加紧凑 &amp; 简单</p>\n</li>\n<li>\n<p>编译器中重要的数据结构</p>\n</li>\n</ul>\n<h3 id=\"递归下降解析-recursive-descent-parsing\"><a class=\"markdownIt-Anchor\" href=\"#递归下降解析-recursive-descent-parsing\"></a> 递归下降解析 Recursive Descent Parsing</h3>\n<p>(第一个parsing算法)</p>\n<p>一个top-down parsing算法</p>\n<ul>\n<li>The parse tree is constructed\n<ul>\n<li>From the top</li>\n<li>From left to right</li>\n</ul>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002152907.png\" width=\"500px\"> </div>\n<h4 id=\"递归下降算法的一般描述\"><a class=\"markdownIt-Anchor\" href=\"#递归下降算法的一般描述\"></a> 递归下降算法的一般描述</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200003.png\" width=\"400px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002200134.png\" width=\"400px\"> </div>\n<ul>\n<li>\n<p>check TOKEN和当前输入流中所指的对象是否相等</p>\n</li>\n<li>\n<p>检查和S的某一个产生式是否匹配</p>\n</li>\n<li>\n<p>检查和S的任何产生式是否匹配</p>\n</li>\n</ul>\n<p>一个编码的例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201258.png\" width=\"400px\"> </div>\n<p>(PLUS: ’ + ')</p>\n<ul>\n<li>save保存初始指针</li>\n<li>第一个产生式返回false则尝试第二个</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002201618.png\" width=\"500px\"> </div>\n<h4 id=\"limitations-递归下降的局限性\"><a class=\"markdownIt-Anchor\" href=\"#limitations-递归下降的局限性\"></a> Limitations 递归下降的局限性</h4>\n<p>一旦找到一个能够用在非终结符元素的产生式的话，那么就没有回滚操作</p>\n<ul>\n<li>If a production for non-terminal X succeeds\n<ul>\n<li>Cannot backtrack to try a different production for X later</li>\n</ul>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002204605.png\" width=\"800px\"> </div>\n<ul>\n<li>这边所讲的递归下降并不通用，但是容易实现</li>\n<li>通过提取左因子 left factoring，可以对这个算法进行rewrite</li>\n</ul>\n<h3 id=\"左递归-left-recursion\"><a class=\"markdownIt-Anchor\" href=\"#左递归-left-recursion\"></a> 左递归 Left Recursion</h3>\n<p>递归下降算法中的主要难点</p>\n<p>左递归的例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205539.png\" width=\"300px\"> </div>\n<p><strong>Left Recursion 左递归</strong>:</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002205631.png\" width=\"500px\"> </div>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>→</mo><mi>S</mi><mi>a</mi><mo>→</mo><mi>S</mi><mi>a</mi><mi>a</mi><mo>→</mo><mi>S</mi><mi>a</mi><mi>a</mi><mi>a</mi><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">S\\rightarrow Sa \\rightarrow Saa \\rightarrow Saaa \\dots\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span></span></p>\n<p><strong>递归下降算法</strong>不适用于<strong>左递归</strong>情形</p>\n<p>左递归语法的一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210207.png\" width=\"500px\"> </div>\n<p>主要原因是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span>是最后的推导产生的，却在第一个位置，这不符合从左到右解析的原则</p>\n<p><strong>可以使用右递归语法 right-recursion 进行重写</strong></p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002210454.png\" width=\"500px\"> </div>\n<p><em>Dragon Book</em>中有消除左递归的具体算法</p>\n<p>小结：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201002211241.png\" width=\"350px\"> </div>\n<p>一般编译器中都会采取手写praser的做法，如gcc</p>\n<h3 id=\"预测解析-predictive-parsing\"><a class=\"markdownIt-Anchor\" href=\"#预测解析-predictive-parsing\"></a> 预测解析 Predictive Parsing</h3>\n<ul>\n<li>\n<p>类似递归下降，但是praser能预测使用哪个产生式</p>\n<ul>\n<li>looking at the next few tokens</li>\n<li>不回滚</li>\n</ul>\n</li>\n<li>\n<p>预测praser能接受LL(k)语法 (left-to-right, left-most derivation, look forward k tokens)</p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003003010.png\" width=\"350px\"> </div>\n<p>在递归下降算法中，每一步都有许多产生式选择，如果选择错了就回滚</p>\n<p>在LL(1)中，每一步都只有一种选择</p>\n<h4 id=\"we-need-to-left-factor-the-grammar-提取左公因子\"><a class=\"markdownIt-Anchor\" href=\"#we-need-to-left-factor-the-grammar-提取左公因子\"></a> We need to left-factor the grammar 提取左公因子</h4>\n<p><strong>目的</strong>：消除一个非终结符的多个产生式的公共前缀</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003111250.png\" width=\"250px\"> </div>\n<p>通过提取左公因式，可以将产生式的执行推迟进行，先prase公共的非终结符</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113332.png\" width=\"500px\"> </div>\n<p>通过grammar生成parsing table</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113423.png\" width=\"500px\"> </div>\n<ul>\n<li>\n<p>方法与递归下降类似，除了</p>\n<ul>\n<li>对于最左的非终结符S</li>\n<li>look at下一个token</li>\n<li>在表中找到对应的产生式</li>\n</ul>\n</li>\n<li>\n<p>用一个栈来存放之前的parse tree，栈顶是当前要parse的非终结符或者终结符</p>\n</li>\n</ul>\n<p>算法：</p>\n<p>($符号表示end of input)</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113459.png\" width=\"500px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/2/20201003113532.png\" width=\"500px\"> </div>\n"},{"title":"CS143 编译原理-3","date":"2020-10-05T16:43:00.000Z","_content":"\n## 语法分析2\n\n### First集\n\n#### 如何构建parsing table 构建LL(1)parsing table需要哪些条件\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003132022.png\" width=\"600px\"> </div>\n\n[上图解释]\n\n给定$A, \\alpha, t$ 在什么情况下$T[A, t]=\\alpha$能成立？\n\n第一种情况，$\\alpha$通过一步或多步推导能推出t，且t处在第一个位置，这时候说t属于$\\alpha$的First集；\n\n第二种情况，$\\alpha$不能直接推出t（t不属于$\\alpha$的First集），但A能推出$\\alpha$，$\\alpha$能推出$\\epsilon$，且在某个产生式中t位置在A后，则$T[A, t]=\\alpha$也能成立，且称t属于A的Follow集\n\n#### 定义\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135005.png\" width=\"300px\"> </div>\n\n一些可推规则：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135447.png\" width=\"500px\"> </div>\n\n求First集的一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003140150.png\" width=\"500px\"> </div>\n\n### Follow集\n\n#### 定义\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003162550.png\" width=\"300px\"> </div>\n\n一些可推规则：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163011.png\" width=\"400px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163151.png\" width=\"400px\"> </div>\n\n求First集的一个例子，需要用到First集：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003164657.png\" width=\"600px\"> </div>\n\n### LL(1) Pasring Tables\n\n使用First集和Follow集来构建LL(1) parsing table\n\n目的：对于CFG G，构建一个parsing table T\n\n对每一个在G中的产生式进行以下算法：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170101.png\" width=\"400px\"> </div>\n\n考虑每个生成式在右侧第一个位置能生成什么\n\n一个生成LL(1) parsing table 的例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170958.png\" width=\"550px\"> </div>\n\n如果走到了表格中的空白区域则说明解析错误\n\n如果对一个左递归的grammar构建parsing table：\n\n- $S\\rightarrow Sa|b$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003171506.png\" width=\"400px\"> </div>\n\n构建出来的parsing table中的某些单元格中可能存在多种选择，则这个语法不是LL(1)的\n\n[not left factored] [left recursive] [ambiguous] [other] 都不是LL(1)的，实际上大多数编程语言的CFG都不是LL(1)的，LL(1)语法太弱\n\n### 自下而上的解析 Bottom-Up Parsing\n\n自下而上解析比自上而下解析更加通用，且也高效，用到了自上而下的思想，是大多数编译器首选的方法\n\n- 自下而上解析不需要left-factored语法\n\n一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201004104247.png\" width=\"500px\"> </div>\n\n**reduce 规约**\n\n![20201007153346](C:\\Users\\jxhnw\\Desktop\\image\\20201007153346.png)\n\n关于bottom-up parsing的重要**Fact #1**：\n\nbottom-up parsing是最右推导的反向实现\n\n![20201007154748](C:\\Users\\jxhnw\\Desktop\\image\\20201007154748.png)\n\n### 移位规约解析 Shift Reduce Parsing\n\n![20201007155055](C:\\Users\\jxhnw\\Desktop\\image\\20201007155055.png)\n\n$\\omega$一定是终结符，才能使用$X\\rightarrow \\beta$\n\n![20201007163859](C:\\Users\\jxhnw\\Desktop\\image\\20201007163859.png)\n\n右边的substring是还未parse的，左边的substring包含终结符和非终结符","source":"_posts/cs143-3.md","raw":"---\ntitle: CS143 编译原理-3\ndate: 2020-10-6 0:43\ntags: \n- CS143\n- 词法分析\n- Lex\ncategories: \n- 编译\n- 编译原理\n---\n\n## 语法分析2\n\n### First集\n\n#### 如何构建parsing table 构建LL(1)parsing table需要哪些条件\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003132022.png\" width=\"600px\"> </div>\n\n[上图解释]\n\n给定$A, \\alpha, t$ 在什么情况下$T[A, t]=\\alpha$能成立？\n\n第一种情况，$\\alpha$通过一步或多步推导能推出t，且t处在第一个位置，这时候说t属于$\\alpha$的First集；\n\n第二种情况，$\\alpha$不能直接推出t（t不属于$\\alpha$的First集），但A能推出$\\alpha$，$\\alpha$能推出$\\epsilon$，且在某个产生式中t位置在A后，则$T[A, t]=\\alpha$也能成立，且称t属于A的Follow集\n\n#### 定义\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135005.png\" width=\"300px\"> </div>\n\n一些可推规则：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135447.png\" width=\"500px\"> </div>\n\n求First集的一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003140150.png\" width=\"500px\"> </div>\n\n### Follow集\n\n#### 定义\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003162550.png\" width=\"300px\"> </div>\n\n一些可推规则：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163011.png\" width=\"400px\"> </div>\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163151.png\" width=\"400px\"> </div>\n\n求First集的一个例子，需要用到First集：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003164657.png\" width=\"600px\"> </div>\n\n### LL(1) Pasring Tables\n\n使用First集和Follow集来构建LL(1) parsing table\n\n目的：对于CFG G，构建一个parsing table T\n\n对每一个在G中的产生式进行以下算法：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170101.png\" width=\"400px\"> </div>\n\n考虑每个生成式在右侧第一个位置能生成什么\n\n一个生成LL(1) parsing table 的例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170958.png\" width=\"550px\"> </div>\n\n如果走到了表格中的空白区域则说明解析错误\n\n如果对一个左递归的grammar构建parsing table：\n\n- $S\\rightarrow Sa|b$\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003171506.png\" width=\"400px\"> </div>\n\n构建出来的parsing table中的某些单元格中可能存在多种选择，则这个语法不是LL(1)的\n\n[not left factored] [left recursive] [ambiguous] [other] 都不是LL(1)的，实际上大多数编程语言的CFG都不是LL(1)的，LL(1)语法太弱\n\n### 自下而上的解析 Bottom-Up Parsing\n\n自下而上解析比自上而下解析更加通用，且也高效，用到了自上而下的思想，是大多数编译器首选的方法\n\n- 自下而上解析不需要left-factored语法\n\n一个例子：\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201004104247.png\" width=\"500px\"> </div>\n\n**reduce 规约**\n\n![20201007153346](C:\\Users\\jxhnw\\Desktop\\image\\20201007153346.png)\n\n关于bottom-up parsing的重要**Fact #1**：\n\nbottom-up parsing是最右推导的反向实现\n\n![20201007154748](C:\\Users\\jxhnw\\Desktop\\image\\20201007154748.png)\n\n### 移位规约解析 Shift Reduce Parsing\n\n![20201007155055](C:\\Users\\jxhnw\\Desktop\\image\\20201007155055.png)\n\n$\\omega$一定是终结符，才能使用$X\\rightarrow \\beta$\n\n![20201007163859](C:\\Users\\jxhnw\\Desktop\\image\\20201007163859.png)\n\n右边的substring是还未parse的，左边的substring包含终结符和非终结符","slug":"cs143-3","published":1,"updated":"2020-10-07T16:02:37.097Z","_id":"ckfth5oz40000fcv7g89w1y3v","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"语法分析2\"><a class=\"markdownIt-Anchor\" href=\"#语法分析2\"></a> 语法分析2</h2>\n<h3 id=\"first集\"><a class=\"markdownIt-Anchor\" href=\"#first集\"></a> First集</h3>\n<h4 id=\"如何构建parsing-table-构建ll1parsing-table需要哪些条件\"><a class=\"markdownIt-Anchor\" href=\"#如何构建parsing-table-构建ll1parsing-table需要哪些条件\"></a> 如何构建parsing table 构建LL(1)parsing table需要哪些条件</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003132022.png\" width=\"600px\"> </div>\n<p>[上图解释]</p>\n<p>给定<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>α</mi><mo separator=\"true\">,</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">A, \\alpha, t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span> 在什么情况下<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo stretchy=\"false\">[</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">T[A, t]=\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>能成立？</p>\n<p>第一种情况，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>通过一步或多步推导能推出t，且t处在第一个位置，这时候说t属于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>的First集；</p>\n<p>第二种情况，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>不能直接推出t（t不属于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>的First集），但A能推出<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>能推出<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ϵ</span></span></span></span>，且在某个产生式中t位置在A后，则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo stretchy=\"false\">[</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">T[A, t]=\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>也能成立，且称t属于A的Follow集</p>\n<h4 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\"></a> 定义</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135005.png\" width=\"300px\"> </div>\n<p>一些可推规则：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135447.png\" width=\"500px\"> </div>\n<p>求First集的一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003140150.png\" width=\"500px\"> </div>\n<h3 id=\"follow集\"><a class=\"markdownIt-Anchor\" href=\"#follow集\"></a> Follow集</h3>\n<h4 id=\"定义-2\"><a class=\"markdownIt-Anchor\" href=\"#定义-2\"></a> 定义</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003162550.png\" width=\"300px\"> </div>\n<p>一些可推规则：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163011.png\" width=\"400px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163151.png\" width=\"400px\"> </div>\n<p>求First集的一个例子，需要用到First集：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003164657.png\" width=\"600px\"> </div>\n<h3 id=\"ll1-pasring-tables\"><a class=\"markdownIt-Anchor\" href=\"#ll1-pasring-tables\"></a> LL(1) Pasring Tables</h3>\n<p>使用First集和Follow集来构建LL(1) parsing table</p>\n<p>目的：对于CFG G，构建一个parsing table T</p>\n<p>对每一个在G中的产生式进行以下算法：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170101.png\" width=\"400px\"> </div>\n<p>考虑每个生成式在右侧第一个位置能生成什么</p>\n<p>一个生成LL(1) parsing table 的例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170958.png\" width=\"550px\"> </div>\n<p>如果走到了表格中的空白区域则说明解析错误</p>\n<p>如果对一个左递归的grammar构建parsing table：</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>→</mo><mi>S</mi><mi>a</mi><mi mathvariant=\"normal\">∣</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">S\\rightarrow Sa|b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">b</span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003171506.png\" width=\"400px\"> </div>\n<p>构建出来的parsing table中的某些单元格中可能存在多种选择，则这个语法不是LL(1)的</p>\n<p>[not left factored] [left recursive] [ambiguous] [other] 都不是LL(1)的，实际上大多数编程语言的CFG都不是LL(1)的，LL(1)语法太弱</p>\n<h3 id=\"自下而上的解析-bottom-up-parsing\"><a class=\"markdownIt-Anchor\" href=\"#自下而上的解析-bottom-up-parsing\"></a> 自下而上的解析 Bottom-Up Parsing</h3>\n<p>自下而上解析比自上而下解析更加通用，且也高效，用到了自上而下的思想，是大多数编译器首选的方法</p>\n<ul>\n<li>自下而上解析不需要left-factored语法</li>\n</ul>\n<p>一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201004104247.png\" width=\"500px\"> </div>\n<p><strong>reduce 规约</strong></p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007153346.png\" alt=\"20201007153346\" /></p>\n<p>关于bottom-up parsing的重要<strong>Fact #1</strong>：</p>\n<p>bottom-up parsing是最右推导的反向实现</p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007154748.png\" alt=\"20201007154748\" /></p>\n<h3 id=\"移位规约解析-shift-reduce-parsing\"><a class=\"markdownIt-Anchor\" href=\"#移位规约解析-shift-reduce-parsing\"></a> 移位规约解析 Shift Reduce Parsing</h3>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007155055.png\" alt=\"20201007155055\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span>一定是终结符，才能使用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">X\\rightarrow \\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span></p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007163859.png\" alt=\"20201007163859\" /></p>\n<p>右边的substring是还未parse的，左边的substring包含终结符和非终结符</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"语法分析2\"><a class=\"markdownIt-Anchor\" href=\"#语法分析2\"></a> 语法分析2</h2>\n<h3 id=\"first集\"><a class=\"markdownIt-Anchor\" href=\"#first集\"></a> First集</h3>\n<h4 id=\"如何构建parsing-table-构建ll1parsing-table需要哪些条件\"><a class=\"markdownIt-Anchor\" href=\"#如何构建parsing-table-构建ll1parsing-table需要哪些条件\"></a> 如何构建parsing table 构建LL(1)parsing table需要哪些条件</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003132022.png\" width=\"600px\"> </div>\n<p>[上图解释]</p>\n<p>给定<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo separator=\"true\">,</mo><mi>α</mi><mo separator=\"true\">,</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">A, \\alpha, t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span> 在什么情况下<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo stretchy=\"false\">[</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">T[A, t]=\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>能成立？</p>\n<p>第一种情况，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>通过一步或多步推导能推出t，且t处在第一个位置，这时候说t属于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>的First集；</p>\n<p>第二种情况，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>不能直接推出t（t不属于<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>的First集），但A能推出<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>能推出<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">ϵ</span></span></span></span>，且在某个产生式中t位置在A后，则<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mo stretchy=\"false\">[</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>t</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">T[A, t]=\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">α</span></span></span></span>也能成立，且称t属于A的Follow集</p>\n<h4 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\"></a> 定义</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135005.png\" width=\"300px\"> </div>\n<p>一些可推规则：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003135447.png\" width=\"500px\"> </div>\n<p>求First集的一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003140150.png\" width=\"500px\"> </div>\n<h3 id=\"follow集\"><a class=\"markdownIt-Anchor\" href=\"#follow集\"></a> Follow集</h3>\n<h4 id=\"定义-2\"><a class=\"markdownIt-Anchor\" href=\"#定义-2\"></a> 定义</h4>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003162550.png\" width=\"300px\"> </div>\n<p>一些可推规则：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163011.png\" width=\"400px\"> </div>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003163151.png\" width=\"400px\"> </div>\n<p>求First集的一个例子，需要用到First集：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003164657.png\" width=\"600px\"> </div>\n<h3 id=\"ll1-pasring-tables\"><a class=\"markdownIt-Anchor\" href=\"#ll1-pasring-tables\"></a> LL(1) Pasring Tables</h3>\n<p>使用First集和Follow集来构建LL(1) parsing table</p>\n<p>目的：对于CFG G，构建一个parsing table T</p>\n<p>对每一个在G中的产生式进行以下算法：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170101.png\" width=\"400px\"> </div>\n<p>考虑每个生成式在右侧第一个位置能生成什么</p>\n<p>一个生成LL(1) parsing table 的例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003170958.png\" width=\"550px\"> </div>\n<p>如果走到了表格中的空白区域则说明解析错误</p>\n<p>如果对一个左递归的grammar构建parsing table：</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>→</mo><mi>S</mi><mi>a</mi><mi mathvariant=\"normal\">∣</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">S\\rightarrow Sa|b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathdefault\">a</span><span class=\"mord\">∣</span><span class=\"mord mathdefault\">b</span></span></span></span></li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201003171506.png\" width=\"400px\"> </div>\n<p>构建出来的parsing table中的某些单元格中可能存在多种选择，则这个语法不是LL(1)的</p>\n<p>[not left factored] [left recursive] [ambiguous] [other] 都不是LL(1)的，实际上大多数编程语言的CFG都不是LL(1)的，LL(1)语法太弱</p>\n<h3 id=\"自下而上的解析-bottom-up-parsing\"><a class=\"markdownIt-Anchor\" href=\"#自下而上的解析-bottom-up-parsing\"></a> 自下而上的解析 Bottom-Up Parsing</h3>\n<p>自下而上解析比自上而下解析更加通用，且也高效，用到了自上而下的思想，是大多数编译器首选的方法</p>\n<ul>\n<li>自下而上解析不需要left-factored语法</li>\n</ul>\n<p>一个例子：</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/cs143/3/20201004104247.png\" width=\"500px\"> </div>\n<p><strong>reduce 规约</strong></p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007153346.png\" alt=\"20201007153346\" /></p>\n<p>关于bottom-up parsing的重要<strong>Fact #1</strong>：</p>\n<p>bottom-up parsing是最右推导的反向实现</p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007154748.png\" alt=\"20201007154748\" /></p>\n<h3 id=\"移位规约解析-shift-reduce-parsing\"><a class=\"markdownIt-Anchor\" href=\"#移位规约解析-shift-reduce-parsing\"></a> 移位规约解析 Shift Reduce Parsing</h3>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007155055.png\" alt=\"20201007155055\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>ω</mi></mrow><annotation encoding=\"application/x-tex\">\\omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ω</span></span></span></span>一定是终结符，才能使用<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi><mo>→</mo><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">X\\rightarrow \\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">β</span></span></span></span></p>\n<p><img src=\"C:%5CUsers%5Cjxhnw%5CDesktop%5Cimage%5C20201007163859.png\" alt=\"20201007163859\" /></p>\n<p>右边的substring是还未parse的，左边的substring包含终结符和非终结符</p>\n"},{"title":"GDB commands Summary","date":"2020-10-05T16:48:00.000Z","_content":"\n## Summary of GDB commands for x86-64 Systems\n\n做csapp的lab时偶然发现了这个，存一下...\n\n[原文地址](http://csapp.cs.cmu.edu/3e/docs/gdbnotes-x86-64.txt)\n\n### Starting:\n|Command|\n|---|\n|gdb|\n|gdb \\<file\\>|\n\n### Running and stopping\n|Command|Effect|\n|---|---|\n|quit|Exit gdb|\n|run|Run program|\n|run 1 2 3|Run program with command-line arguments 1 2 3|\n|kill|Stop the program|\n|quit|Exit gdb|\n|Ctrl-d|Exit gdb|\n\nNote: Ctrl-C does not exit from gdb, but halts the current gdb command\n\n### Breakpoints\n|Command|Effect|\n|---|---|\n|break sum|Set breakpoint at the entry to function sum|\n|break *0x80483c3|Set breakpoint at address 0x80483c3|\n|delete 1|Delete breakpoint 1|\n|disable 1|Disable the breakpoint 1 (gdb numbers each breakpoint you create)|\n|enable 1|Enable breakpoint 1|\n|delete|Delete all breakpoints|\n|clear sum|Clear any breakpoints at the entry to function sum|\n\n### Execution\n|Command|Effect|\n|---|---|\n|stepi|Execute one instruction|\n|stepi 4|Execute four instructions|\n|nexti|Like stepi, but proceed through function calls without stopping|\n|step|Execute one C statement|\n|continue|Resume execution until the next breakpoint|\n|until 3|Continue executing until program hits breakpoint 3|\n|finish|Resume execution until current function returns|\n|call sum(1, 2)|Call sum(1,2) and print return value|\n\n### Examining code\n|Command|Effect|\n|---|---|\n|disas|Disassemble current function|\n|disas sum|Disassemble function sum|\n|disas 0x80483b7|Disassemble function around 0x80483b7|\n|disas 0x80483b7 0x80483c7|Disassemble code within specified address range|\n|||\n|print /x \\$rip|Print program counter in hex|\n|print /d \\$rip|Print program counter in decimal|\n|print /t \\$rip|Print program counter in binary|\n\n## Examining data\n|Command|Effect|\n|---|---|\n|print /d \\$rax|Print contents of %rax in decimal|\n|print /x \\$rax|Print contents of %rax in hex|\n|print /t \\$rax|Print contents of %rax in binary|\n|print /d (int)\\$rax|Print contents of %rax in decimal after sign-extending lower 32-bits.|\n\nYou need this to print 32-bit, negative numbers stored in the lower 32 bits of %rax. For example, if the lower 32-bits of %rax store 0xffffffff, you will see\n\n``` bash\n(gdb) print $rax\n$1 = 4294967295\n(gdb) print (int)$rax\n$2 = -1\n(gdb)\n```\n\n|Command|Effect|\n|---|---|\n|print 0x100|Print decimal representation of 0x100|\n|print /x 555|Print hex representation of 555|\n|print /x (\\$rsp+8)|Print (contents of %rsp) + 8 in hex|\n|print *(int *) 0xbffff890|Print integer at address 0xbffff890|\n|print *(int *) (\\$rsp+8)|Print integer at address %rsp + 8|\n|print (char *) 0xbfff890|Examine a string stored at 0xbffff890|\n|||\n|x/w   0xbffff890|Examine (4-byte) word starting at address 0xbffff890|\n|x/w   \\$rsp|Examine (4-byte) word starting at address in \\$rsp|\n|x/wd  \\$rsp|Examine (4-byte) word starting at address in \\$rsp. Print in decimal|\n|x/2w  \\$rsp|Examine two (4-byte) words starting at address in \\$rsp|\n|x/2wd \\$rsp|Examine two (4-byte) words starting at address in \\$rsp. Print in decimal|\n|x/g   \\$rsp|Examine (8-byte) word starting at address in \\$rsp.|\n|x/gd  \\$rsp|Examine (8-byte) word starting at address in \\$rsp. Print in decimal|\n|x/a   \\$rsp|Examine address in $rsp. Print as offset from previous global symbol.|\n|x/s   0xbffff890|Examine a string stored at 0xbffff890|\n|x/20b sum|Examine first 20 opcode bytes of function sum|\n|x/10i sum|Examine first 10 instructions of function sum|\n\nNote: the format string for the 'x' command has the general form x/[NUM][SIZE][FORMAT] where\n\n> NUM  = number of objects to display\n> SIZE = size of each object (b=byte, h=half-word, w=word, g=giant (quad-word))\n> FORMAT = how to display each object (d=decimal, x=hex, o=octal, etc.)\n\nIf you don't specify SIZE or FORMAT, either a default value, or the last value you specified in a previous 'print' or 'x' command is used.\n\n### Useful information\n|Command|Effect|\n|---|---|\n|backtrace|Print the current address and stack backtrace|\n|where|Print the current address and stack backtrace|\n|||\n|info program|Print current status of the program)|\n|info functions|Print functions in program|\n|info stack|Print backtrace of the stack)|\n|info frame|Print information about the current stack frame|\n|info registers|Print registers and their contents|\n|info breakpoints|Print status of user-settable breakpoints|\n|||\n|display /FMT EXPR|Print expression EXPR using format FMT every time GDB stops|\n|undisplay|Turn off display mode|\n|help|Get information about gdb|\n","source":"_posts/GDB-summary.md","raw":"---\ntitle: GDB commands Summary\ndate: 2020-10-6 0:48\ntags:\n- CSAPP\n- Labs\ncategories:\n- 编译\n- 调试工具\n---\n\n## Summary of GDB commands for x86-64 Systems\n\n做csapp的lab时偶然发现了这个，存一下...\n\n[原文地址](http://csapp.cs.cmu.edu/3e/docs/gdbnotes-x86-64.txt)\n\n### Starting:\n|Command|\n|---|\n|gdb|\n|gdb \\<file\\>|\n\n### Running and stopping\n|Command|Effect|\n|---|---|\n|quit|Exit gdb|\n|run|Run program|\n|run 1 2 3|Run program with command-line arguments 1 2 3|\n|kill|Stop the program|\n|quit|Exit gdb|\n|Ctrl-d|Exit gdb|\n\nNote: Ctrl-C does not exit from gdb, but halts the current gdb command\n\n### Breakpoints\n|Command|Effect|\n|---|---|\n|break sum|Set breakpoint at the entry to function sum|\n|break *0x80483c3|Set breakpoint at address 0x80483c3|\n|delete 1|Delete breakpoint 1|\n|disable 1|Disable the breakpoint 1 (gdb numbers each breakpoint you create)|\n|enable 1|Enable breakpoint 1|\n|delete|Delete all breakpoints|\n|clear sum|Clear any breakpoints at the entry to function sum|\n\n### Execution\n|Command|Effect|\n|---|---|\n|stepi|Execute one instruction|\n|stepi 4|Execute four instructions|\n|nexti|Like stepi, but proceed through function calls without stopping|\n|step|Execute one C statement|\n|continue|Resume execution until the next breakpoint|\n|until 3|Continue executing until program hits breakpoint 3|\n|finish|Resume execution until current function returns|\n|call sum(1, 2)|Call sum(1,2) and print return value|\n\n### Examining code\n|Command|Effect|\n|---|---|\n|disas|Disassemble current function|\n|disas sum|Disassemble function sum|\n|disas 0x80483b7|Disassemble function around 0x80483b7|\n|disas 0x80483b7 0x80483c7|Disassemble code within specified address range|\n|||\n|print /x \\$rip|Print program counter in hex|\n|print /d \\$rip|Print program counter in decimal|\n|print /t \\$rip|Print program counter in binary|\n\n## Examining data\n|Command|Effect|\n|---|---|\n|print /d \\$rax|Print contents of %rax in decimal|\n|print /x \\$rax|Print contents of %rax in hex|\n|print /t \\$rax|Print contents of %rax in binary|\n|print /d (int)\\$rax|Print contents of %rax in decimal after sign-extending lower 32-bits.|\n\nYou need this to print 32-bit, negative numbers stored in the lower 32 bits of %rax. For example, if the lower 32-bits of %rax store 0xffffffff, you will see\n\n``` bash\n(gdb) print $rax\n$1 = 4294967295\n(gdb) print (int)$rax\n$2 = -1\n(gdb)\n```\n\n|Command|Effect|\n|---|---|\n|print 0x100|Print decimal representation of 0x100|\n|print /x 555|Print hex representation of 555|\n|print /x (\\$rsp+8)|Print (contents of %rsp) + 8 in hex|\n|print *(int *) 0xbffff890|Print integer at address 0xbffff890|\n|print *(int *) (\\$rsp+8)|Print integer at address %rsp + 8|\n|print (char *) 0xbfff890|Examine a string stored at 0xbffff890|\n|||\n|x/w   0xbffff890|Examine (4-byte) word starting at address 0xbffff890|\n|x/w   \\$rsp|Examine (4-byte) word starting at address in \\$rsp|\n|x/wd  \\$rsp|Examine (4-byte) word starting at address in \\$rsp. Print in decimal|\n|x/2w  \\$rsp|Examine two (4-byte) words starting at address in \\$rsp|\n|x/2wd \\$rsp|Examine two (4-byte) words starting at address in \\$rsp. Print in decimal|\n|x/g   \\$rsp|Examine (8-byte) word starting at address in \\$rsp.|\n|x/gd  \\$rsp|Examine (8-byte) word starting at address in \\$rsp. Print in decimal|\n|x/a   \\$rsp|Examine address in $rsp. Print as offset from previous global symbol.|\n|x/s   0xbffff890|Examine a string stored at 0xbffff890|\n|x/20b sum|Examine first 20 opcode bytes of function sum|\n|x/10i sum|Examine first 10 instructions of function sum|\n\nNote: the format string for the 'x' command has the general form x/[NUM][SIZE][FORMAT] where\n\n> NUM  = number of objects to display\n> SIZE = size of each object (b=byte, h=half-word, w=word, g=giant (quad-word))\n> FORMAT = how to display each object (d=decimal, x=hex, o=octal, etc.)\n\nIf you don't specify SIZE or FORMAT, either a default value, or the last value you specified in a previous 'print' or 'x' command is used.\n\n### Useful information\n|Command|Effect|\n|---|---|\n|backtrace|Print the current address and stack backtrace|\n|where|Print the current address and stack backtrace|\n|||\n|info program|Print current status of the program)|\n|info functions|Print functions in program|\n|info stack|Print backtrace of the stack)|\n|info frame|Print information about the current stack frame|\n|info registers|Print registers and their contents|\n|info breakpoints|Print status of user-settable breakpoints|\n|||\n|display /FMT EXPR|Print expression EXPR using format FMT every time GDB stops|\n|undisplay|Turn off display mode|\n|help|Get information about gdb|\n","slug":"GDB-summary","published":1,"updated":"2020-10-08T02:38:25.910Z","_id":"ckfwrkg5x0000jwv75y2faxsj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"summary-of-gdb-commands-for-x86-64-systems\"><a class=\"markdownIt-Anchor\" href=\"#summary-of-gdb-commands-for-x86-64-systems\"></a> Summary of GDB commands for x86-64 Systems</h2>\n<p>做csapp的lab时偶然发现了这个，存一下…</p>\n<p><a href=\"http://csapp.cs.cmu.edu/3e/docs/gdbnotes-x86-64.txt\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<h3 id=\"starting\"><a class=\"markdownIt-Anchor\" href=\"#starting\"></a> Starting:</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gdb</td>\n</tr>\n<tr>\n<td>gdb &lt;file&gt;</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"running-and-stopping\"><a class=\"markdownIt-Anchor\" href=\"#running-and-stopping\"></a> Running and stopping</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>quit</td>\n<td>Exit gdb</td>\n</tr>\n<tr>\n<td>run</td>\n<td>Run program</td>\n</tr>\n<tr>\n<td>run 1 2 3</td>\n<td>Run program with command-line arguments 1 2 3</td>\n</tr>\n<tr>\n<td>kill</td>\n<td>Stop the program</td>\n</tr>\n<tr>\n<td>quit</td>\n<td>Exit gdb</td>\n</tr>\n<tr>\n<td>Ctrl-d</td>\n<td>Exit gdb</td>\n</tr>\n</tbody>\n</table>\n<p>Note: Ctrl-C does not exit from gdb, but halts the current gdb command</p>\n<h3 id=\"breakpoints\"><a class=\"markdownIt-Anchor\" href=\"#breakpoints\"></a> Breakpoints</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>break sum</td>\n<td>Set breakpoint at the entry to function sum</td>\n</tr>\n<tr>\n<td>break *0x80483c3</td>\n<td>Set breakpoint at address 0x80483c3</td>\n</tr>\n<tr>\n<td>delete 1</td>\n<td>Delete breakpoint 1</td>\n</tr>\n<tr>\n<td>disable 1</td>\n<td>Disable the breakpoint 1 (gdb numbers each breakpoint you create)</td>\n</tr>\n<tr>\n<td>enable 1</td>\n<td>Enable breakpoint 1</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>Delete all breakpoints</td>\n</tr>\n<tr>\n<td>clear sum</td>\n<td>Clear any breakpoints at the entry to function sum</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"execution\"><a class=\"markdownIt-Anchor\" href=\"#execution\"></a> Execution</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>stepi</td>\n<td>Execute one instruction</td>\n</tr>\n<tr>\n<td>stepi 4</td>\n<td>Execute four instructions</td>\n</tr>\n<tr>\n<td>nexti</td>\n<td>Like stepi, but proceed through function calls without stopping</td>\n</tr>\n<tr>\n<td>step</td>\n<td>Execute one C statement</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>Resume execution until the next breakpoint</td>\n</tr>\n<tr>\n<td>until 3</td>\n<td>Continue executing until program hits breakpoint 3</td>\n</tr>\n<tr>\n<td>finish</td>\n<td>Resume execution until current function returns</td>\n</tr>\n<tr>\n<td>call sum(1, 2)</td>\n<td>Call sum(1,2) and print return value</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"examining-code\"><a class=\"markdownIt-Anchor\" href=\"#examining-code\"></a> Examining code</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>disas</td>\n<td>Disassemble current function</td>\n</tr>\n<tr>\n<td>disas sum</td>\n<td>Disassemble function sum</td>\n</tr>\n<tr>\n<td>disas 0x80483b7</td>\n<td>Disassemble function around 0x80483b7</td>\n</tr>\n<tr>\n<td>disas 0x80483b7 0x80483c7</td>\n<td>Disassemble code within specified address range</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>print /x $rip</td>\n<td>Print program counter in hex</td>\n</tr>\n<tr>\n<td>print /d $rip</td>\n<td>Print program counter in decimal</td>\n</tr>\n<tr>\n<td>print /t $rip</td>\n<td>Print program counter in binary</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"examining-data\"><a class=\"markdownIt-Anchor\" href=\"#examining-data\"></a> Examining data</h2>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>print /d $rax</td>\n<td>Print contents of %rax in decimal</td>\n</tr>\n<tr>\n<td>print /x $rax</td>\n<td>Print contents of %rax in hex</td>\n</tr>\n<tr>\n<td>print /t $rax</td>\n<td>Print contents of %rax in binary</td>\n</tr>\n<tr>\n<td>print /d (int)$rax</td>\n<td>Print contents of %rax in decimal after sign-extending lower 32-bits.</td>\n</tr>\n</tbody>\n</table>\n<p>You need this to print 32-bit, negative numbers stored in the lower 32 bits of %rax. For example, if the lower 32-bits of %rax store 0xffffffff, you will see</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) <span class=\"built_in\">print</span> <span class=\"variable\">$rax</span></span><br><span class=\"line\"><span class=\"variable\">$1</span> = 4294967295</span><br><span class=\"line\">(gdb) <span class=\"built_in\">print</span> (int)<span class=\"variable\">$rax</span></span><br><span class=\"line\"><span class=\"variable\">$2</span> = -1</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>print 0x100</td>\n<td>Print decimal representation of 0x100</td>\n</tr>\n<tr>\n<td>print /x 555</td>\n<td>Print hex representation of 555</td>\n</tr>\n<tr>\n<td>print /x ($rsp+8)</td>\n<td>Print (contents of %rsp) + 8 in hex</td>\n</tr>\n<tr>\n<td>print *(int *) 0xbffff890</td>\n<td>Print integer at address 0xbffff890</td>\n</tr>\n<tr>\n<td>print *(int *) ($rsp+8)</td>\n<td>Print integer at address %rsp + 8</td>\n</tr>\n<tr>\n<td>print (char *) 0xbfff890</td>\n<td>Examine a string stored at 0xbffff890</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>x/w   0xbffff890</td>\n<td>Examine (4-byte) word starting at address 0xbffff890</td>\n</tr>\n<tr>\n<td>x/w   $rsp</td>\n<td>Examine (4-byte) word starting at address in $rsp</td>\n</tr>\n<tr>\n<td>x/wd  $rsp</td>\n<td>Examine (4-byte) word starting at address in $rsp. Print in decimal</td>\n</tr>\n<tr>\n<td>x/2w  $rsp</td>\n<td>Examine two (4-byte) words starting at address in $rsp</td>\n</tr>\n<tr>\n<td>x/2wd $rsp</td>\n<td>Examine two (4-byte) words starting at address in $rsp. Print in decimal</td>\n</tr>\n<tr>\n<td>x/g   $rsp</td>\n<td>Examine (8-byte) word starting at address in $rsp.</td>\n</tr>\n<tr>\n<td>x/gd  $rsp</td>\n<td>Examine (8-byte) word starting at address in $rsp. Print in decimal</td>\n</tr>\n<tr>\n<td>x/a   $rsp</td>\n<td>Examine address in $rsp. Print as offset from previous global symbol.</td>\n</tr>\n<tr>\n<td>x/s   0xbffff890</td>\n<td>Examine a string stored at 0xbffff890</td>\n</tr>\n<tr>\n<td>x/20b sum</td>\n<td>Examine first 20 opcode bytes of function sum</td>\n</tr>\n<tr>\n<td>x/10i sum</td>\n<td>Examine first 10 instructions of function sum</td>\n</tr>\n</tbody>\n</table>\n<p>Note: the format string for the ‘x’ command has the general form x/[NUM][SIZE][FORMAT] where</p>\n<blockquote>\n<p>NUM  = number of objects to display<br />\nSIZE = size of each object (b=byte, h=half-word, w=word, g=giant (quad-word))<br />\nFORMAT = how to display each object (d=decimal, x=hex, o=octal, etc.)</p>\n</blockquote>\n<p>If you don’t specify SIZE or FORMAT, either a default value, or the last value you specified in a previous ‘print’ or ‘x’ command is used.</p>\n<h3 id=\"useful-information\"><a class=\"markdownIt-Anchor\" href=\"#useful-information\"></a> Useful information</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>backtrace</td>\n<td>Print the current address and stack backtrace</td>\n</tr>\n<tr>\n<td>where</td>\n<td>Print the current address and stack backtrace</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>info program</td>\n<td>Print current status of the program)</td>\n</tr>\n<tr>\n<td>info functions</td>\n<td>Print functions in program</td>\n</tr>\n<tr>\n<td>info stack</td>\n<td>Print backtrace of the stack)</td>\n</tr>\n<tr>\n<td>info frame</td>\n<td>Print information about the current stack frame</td>\n</tr>\n<tr>\n<td>info registers</td>\n<td>Print registers and their contents</td>\n</tr>\n<tr>\n<td>info breakpoints</td>\n<td>Print status of user-settable breakpoints</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>display /FMT EXPR</td>\n<td>Print expression EXPR using format FMT every time GDB stops</td>\n</tr>\n<tr>\n<td>undisplay</td>\n<td>Turn off display mode</td>\n</tr>\n<tr>\n<td>help</td>\n<td>Get information about gdb</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"summary-of-gdb-commands-for-x86-64-systems\"><a class=\"markdownIt-Anchor\" href=\"#summary-of-gdb-commands-for-x86-64-systems\"></a> Summary of GDB commands for x86-64 Systems</h2>\n<p>做csapp的lab时偶然发现了这个，存一下…</p>\n<p><a href=\"http://csapp.cs.cmu.edu/3e/docs/gdbnotes-x86-64.txt\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<h3 id=\"starting\"><a class=\"markdownIt-Anchor\" href=\"#starting\"></a> Starting:</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>gdb</td>\n</tr>\n<tr>\n<td>gdb &lt;file&gt;</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"running-and-stopping\"><a class=\"markdownIt-Anchor\" href=\"#running-and-stopping\"></a> Running and stopping</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>quit</td>\n<td>Exit gdb</td>\n</tr>\n<tr>\n<td>run</td>\n<td>Run program</td>\n</tr>\n<tr>\n<td>run 1 2 3</td>\n<td>Run program with command-line arguments 1 2 3</td>\n</tr>\n<tr>\n<td>kill</td>\n<td>Stop the program</td>\n</tr>\n<tr>\n<td>quit</td>\n<td>Exit gdb</td>\n</tr>\n<tr>\n<td>Ctrl-d</td>\n<td>Exit gdb</td>\n</tr>\n</tbody>\n</table>\n<p>Note: Ctrl-C does not exit from gdb, but halts the current gdb command</p>\n<h3 id=\"breakpoints\"><a class=\"markdownIt-Anchor\" href=\"#breakpoints\"></a> Breakpoints</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>break sum</td>\n<td>Set breakpoint at the entry to function sum</td>\n</tr>\n<tr>\n<td>break *0x80483c3</td>\n<td>Set breakpoint at address 0x80483c3</td>\n</tr>\n<tr>\n<td>delete 1</td>\n<td>Delete breakpoint 1</td>\n</tr>\n<tr>\n<td>disable 1</td>\n<td>Disable the breakpoint 1 (gdb numbers each breakpoint you create)</td>\n</tr>\n<tr>\n<td>enable 1</td>\n<td>Enable breakpoint 1</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>Delete all breakpoints</td>\n</tr>\n<tr>\n<td>clear sum</td>\n<td>Clear any breakpoints at the entry to function sum</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"execution\"><a class=\"markdownIt-Anchor\" href=\"#execution\"></a> Execution</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>stepi</td>\n<td>Execute one instruction</td>\n</tr>\n<tr>\n<td>stepi 4</td>\n<td>Execute four instructions</td>\n</tr>\n<tr>\n<td>nexti</td>\n<td>Like stepi, but proceed through function calls without stopping</td>\n</tr>\n<tr>\n<td>step</td>\n<td>Execute one C statement</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>Resume execution until the next breakpoint</td>\n</tr>\n<tr>\n<td>until 3</td>\n<td>Continue executing until program hits breakpoint 3</td>\n</tr>\n<tr>\n<td>finish</td>\n<td>Resume execution until current function returns</td>\n</tr>\n<tr>\n<td>call sum(1, 2)</td>\n<td>Call sum(1,2) and print return value</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"examining-code\"><a class=\"markdownIt-Anchor\" href=\"#examining-code\"></a> Examining code</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>disas</td>\n<td>Disassemble current function</td>\n</tr>\n<tr>\n<td>disas sum</td>\n<td>Disassemble function sum</td>\n</tr>\n<tr>\n<td>disas 0x80483b7</td>\n<td>Disassemble function around 0x80483b7</td>\n</tr>\n<tr>\n<td>disas 0x80483b7 0x80483c7</td>\n<td>Disassemble code within specified address range</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>print /x $rip</td>\n<td>Print program counter in hex</td>\n</tr>\n<tr>\n<td>print /d $rip</td>\n<td>Print program counter in decimal</td>\n</tr>\n<tr>\n<td>print /t $rip</td>\n<td>Print program counter in binary</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"examining-data\"><a class=\"markdownIt-Anchor\" href=\"#examining-data\"></a> Examining data</h2>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>print /d $rax</td>\n<td>Print contents of %rax in decimal</td>\n</tr>\n<tr>\n<td>print /x $rax</td>\n<td>Print contents of %rax in hex</td>\n</tr>\n<tr>\n<td>print /t $rax</td>\n<td>Print contents of %rax in binary</td>\n</tr>\n<tr>\n<td>print /d (int)$rax</td>\n<td>Print contents of %rax in decimal after sign-extending lower 32-bits.</td>\n</tr>\n</tbody>\n</table>\n<p>You need this to print 32-bit, negative numbers stored in the lower 32 bits of %rax. For example, if the lower 32-bits of %rax store 0xffffffff, you will see</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) <span class=\"built_in\">print</span> <span class=\"variable\">$rax</span></span><br><span class=\"line\"><span class=\"variable\">$1</span> = 4294967295</span><br><span class=\"line\">(gdb) <span class=\"built_in\">print</span> (int)<span class=\"variable\">$rax</span></span><br><span class=\"line\"><span class=\"variable\">$2</span> = -1</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>print 0x100</td>\n<td>Print decimal representation of 0x100</td>\n</tr>\n<tr>\n<td>print /x 555</td>\n<td>Print hex representation of 555</td>\n</tr>\n<tr>\n<td>print /x ($rsp+8)</td>\n<td>Print (contents of %rsp) + 8 in hex</td>\n</tr>\n<tr>\n<td>print *(int *) 0xbffff890</td>\n<td>Print integer at address 0xbffff890</td>\n</tr>\n<tr>\n<td>print *(int *) ($rsp+8)</td>\n<td>Print integer at address %rsp + 8</td>\n</tr>\n<tr>\n<td>print (char *) 0xbfff890</td>\n<td>Examine a string stored at 0xbffff890</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>x/w   0xbffff890</td>\n<td>Examine (4-byte) word starting at address 0xbffff890</td>\n</tr>\n<tr>\n<td>x/w   $rsp</td>\n<td>Examine (4-byte) word starting at address in $rsp</td>\n</tr>\n<tr>\n<td>x/wd  $rsp</td>\n<td>Examine (4-byte) word starting at address in $rsp. Print in decimal</td>\n</tr>\n<tr>\n<td>x/2w  $rsp</td>\n<td>Examine two (4-byte) words starting at address in $rsp</td>\n</tr>\n<tr>\n<td>x/2wd $rsp</td>\n<td>Examine two (4-byte) words starting at address in $rsp. Print in decimal</td>\n</tr>\n<tr>\n<td>x/g   $rsp</td>\n<td>Examine (8-byte) word starting at address in $rsp.</td>\n</tr>\n<tr>\n<td>x/gd  $rsp</td>\n<td>Examine (8-byte) word starting at address in $rsp. Print in decimal</td>\n</tr>\n<tr>\n<td>x/a   $rsp</td>\n<td>Examine address in $rsp. Print as offset from previous global symbol.</td>\n</tr>\n<tr>\n<td>x/s   0xbffff890</td>\n<td>Examine a string stored at 0xbffff890</td>\n</tr>\n<tr>\n<td>x/20b sum</td>\n<td>Examine first 20 opcode bytes of function sum</td>\n</tr>\n<tr>\n<td>x/10i sum</td>\n<td>Examine first 10 instructions of function sum</td>\n</tr>\n</tbody>\n</table>\n<p>Note: the format string for the ‘x’ command has the general form x/[NUM][SIZE][FORMAT] where</p>\n<blockquote>\n<p>NUM  = number of objects to display<br />\nSIZE = size of each object (b=byte, h=half-word, w=word, g=giant (quad-word))<br />\nFORMAT = how to display each object (d=decimal, x=hex, o=octal, etc.)</p>\n</blockquote>\n<p>If you don’t specify SIZE or FORMAT, either a default value, or the last value you specified in a previous ‘print’ or ‘x’ command is used.</p>\n<h3 id=\"useful-information\"><a class=\"markdownIt-Anchor\" href=\"#useful-information\"></a> Useful information</h3>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Effect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>backtrace</td>\n<td>Print the current address and stack backtrace</td>\n</tr>\n<tr>\n<td>where</td>\n<td>Print the current address and stack backtrace</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>info program</td>\n<td>Print current status of the program)</td>\n</tr>\n<tr>\n<td>info functions</td>\n<td>Print functions in program</td>\n</tr>\n<tr>\n<td>info stack</td>\n<td>Print backtrace of the stack)</td>\n</tr>\n<tr>\n<td>info frame</td>\n<td>Print information about the current stack frame</td>\n</tr>\n<tr>\n<td>info registers</td>\n<td>Print registers and their contents</td>\n</tr>\n<tr>\n<td>info breakpoints</td>\n<td>Print status of user-settable breakpoints</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>display /FMT EXPR</td>\n<td>Print expression EXPR using format FMT every time GDB stops</td>\n</tr>\n<tr>\n<td>undisplay</td>\n<td>Turn off display mode</td>\n</tr>\n<tr>\n<td>help</td>\n<td>Get information about gdb</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"[CSAPP] Bomb Lab","date":"2020-10-05T16:41:00.000Z","_content":"\n## Bomb Lab\n\n传说中的bomb lab，我开始以为这名字意思是更改了程序汇编代码，让你修复...直到看了writeup...\n\n一些预备知识，主要为[CSAPP第三章](https://wfc.ink/2020/10/06/csapp-pre-bomblab/)\n\n> 题目大致意思就是不给源码（但给了源码框架），然你通过各种工具（gdb，objdump）调试，获取6次正确的输入。输入错误字符串会BOOMMMM !\n\n部分源码：\n\n```c\n/* Do all sorts of secret stuff that makes the bomb harder to defuse. */\ninitialize_bomb();\n\nprintf(\"Welcome to my fiendish little bomb. You have 6 phases with\\n\");\nprintf(\"which to blow yourself up. Have a nice day!\\n\");\n\n/* Hmm...  Six phases must be more secure than one phase! */\ninput = read_line();             /* Get input                   */\nphase_1(input);                  /* Run the phase               */\nphase_defused();                 /* Drat!  They figured it out!\n                                  * Let me know how they did it. */\nprintf(\"Phase 1 defused. How about the next one?\\n\");\n```\n\n### phase_1\n\n```bash\n$objdump -d bomb > log.txt\n```\n\nmain函数中调用phase_1的汇编代码：\n```assembly\n400e32:       e8 67 06 00 00          callq  40149e <read_line>;读入一串字符，地址存在%rax\n400e37:       48 89 c7                mov    %rax,%rdi;%mov到%rdi\n400e3a:       e8 a1 00 00 00          callq  400ee0 <phase_1>\n400e3f:       e8 80 07 00 00          callq  4015c4 <phase_defused>\n```\n\nphase_1的汇编代码：\n\n```assembly\n0000000000400ee0 <phase_1>:\n  400ee0:       48 83 ec 08             sub    $0x8,%rsp\n  400ee4:       be 00 24 40 00          mov    $0x402400,%esi;字符常量地址存入%esi\n  400ee9:       e8 4a 04 00 00          callq  401338 <strings_not_equal>\n  400eee:       85 c0                   test   %eax,%eax;判断返回值是否为0\n  400ef0:       74 05                   je     400ef7 <phase_1+0x17>\n  400ef2:       e8 43 05 00 00          callq  40143a <explode_bomb>\n  400ef7:       48 83 c4 08             add    $0x8,%rsp\n  400efb:       c3                      retq\n```\n\nstrings_not_equal的汇编代码：\n\n```assembly\n0000000000401338 <strings_not_equal>:\n  401338:       41 54                   push   %r12\n  40133a:       55                      push   %rbp\n  40133b:       53                      push   %rbx\n  40133c:       48 89 fb                mov    %rdi,%rbx;读入字符串地址\n  40133f:       48 89 f5                mov    %rsi,%rbp;字符常量地址\n  401342:       e8 d4 ff ff ff          callq  40131b <string_length>\n  401347:       41 89 c4                mov    %eax,%r12d;求长度结果\n  40134a:       48 89 ef                mov    %rbp,%rdi\n  40134d:       e8 c9 ff ff ff          callq  40131b <string_length>\n  401352:       ba 01 00 00 00          mov    $0x1,%edx;求长度结果\n  401357:       41 39 c4                cmp    %eax,%r12d;比较长度，如不等长直接返回\n  40135a:       75 3f                   jne    40139b <strings_not_equal+0x63>\n  40135c:       0f b6 03                movzbl (%rbx),%eax\n  40135f:       84 c0                   test   %al,%al\n  401361:       74 25                   je     401388 <strings_not_equal+0x50>\n  401363:       3a 45 00                cmp    0x0(%rbp),%al\n  401366:       74 0a                   je     401372 <strings_not_equal+0x3a>\n  401368:       eb 25                   jmp    40138f <strings_not_equal+0x57>\n  40136a:       3a 45 00                cmp    0x0(%rbp),%al\n  40136d:       0f 1f 00                nopl   (%rax)\n  401370:       75 24                   jne    401396 <strings_not_equal+0x5e>\n  401372:       48 83 c3 01             add    $0x1,%rbx;双字符串指针都+1判断是否相等\n  401376:       48 83 c5 01             add    $0x1,%rbp\n  40137a:       0f b6 03                movzbl (%rbx),%eax\n  40137d:       84 c0                   test   %al,%al\n  40137f:       75 e9                   jne    40136a <strings_not_equal+0x32>\n  401381:       ba 00 00 00 00          mov    $0x0,%edx\n  401386:       eb 13                   jmp    40139b <strings_not_equal+0x63>\n  401388:       ba 00 00 00 00          mov    $0x0,%edx\n  40138d:       eb 0c                   jmp    40139b <strings_not_equal+0x63>\n  40138f:       ba 01 00 00 00          mov    $0x1,%edx\n  401394:       eb 05                   jmp    40139b <strings_not_equal+0x63>\n  401396:       ba 01 00 00 00          mov    $0x1,%edx\n  40139b:       89 d0                   mov    %edx,%eax\n  40139d:       5b                      pop    %rbx\n  40139e:       5d                      pop    %rbp\n  40139f:       41 5c                   pop    %r12\n  4013a1:       c3                      retq\n```\n\nstring_length的汇编代码：\n\n```assembly\n000000000040131b <string_length>:\n  40131b:       80 3f 00                cmpb   $0x0,(%rdi);指针判空，空指针直接返回0\n  40131e:       74 12                   je     401332 <string_length+0x17>\n  401320:       48 89 fa                mov    %rdi,%rdx\n  401323:       48 83 c2 01             add    $0x1,%rdx;每次地址+1，循环检测'\\0'\n  401327:       89 d0                   mov    %edx,%eax\n  401329:       29 f8                   sub    %edi,%eax;返回的长度\n  40132b:       80 3a 00                cmpb   $0x0,(%rdx)\n  40132e:       75 f3                   jne    401323 <string_length+0x8>\n  401330:       f3 c3                   repz retq\n  401332:       b8 00 00 00 00          mov    $0x0,%eax\n  401337:       c3                      retq\n```\n\nphase_1挺简单，就判断输入的字符串和给定的字符串常量是否相等，不相同则boom。输入的字符串起始地址为%rdi，给定的字符串起始地址为%esi，调用strings_not_equal判断是否相同。strings_not_equal首先调用string_length求字符串长度，不相同则直接返回，string_length就使用每次指针+1，检测所指内存区域是否为'\\0'的方式求长度。如长度相等则再依次对比每个字符，不相等则直接返回。\n\n所以，需要输入的字符串就是给定的字符串常量，位于内存0x402400，使用gdb打印出内存信息\n\n```bash\n$ gdb ./bomb\n(gdb) b phase_1\nBreakpoint 1 at 0x400ee0\n(gdb) r\n[随意的错误输入]\nBreakpoint 1, 0x0000000000400ee0 in phase_1 ()\n(gdb) print (char*) 0x402400\n$1 = 0x402400 \"Border relations with Canada have never been better.\"\n```\n\n**答案**是 Border relations with Canada have never been better.\n\n### phase_2\n\nphase_2的汇编代码：\n\n```assembly\n0000000000400efc <phase_2>:\n  400efc:       55                      push   %rbp\n  400efd:       53                      push   %rbx\n  400efe:       48 83 ec 28             sub    $0x28,%rsp\n  400f02:       48 89 e6                mov    %rsp,%rsi\n  400f05:       e8 52 05 00 00          callq  40145c <read_six_numbers>\n  400f0a:       83 3c 24 01             cmpl   $0x1,(%rsp);和1比较\n  400f0e:       74 20                   je     400f30 <phase_2+0x34>\n  400f10:       e8 25 05 00 00          callq  40143a <explode_bomb>\n  400f15:       eb 19                   jmp    400f30 <phase_2+0x34>\n  400f17:       8b 43 fc                mov    -0x4(%rbx),%eax;前一个单元的值\n  400f1a:       01 c0                   add    %eax,%eax;前一个单元的值*2\n  400f1c:       39 03                   cmp    %eax,(%rbx);前一个单元的值*2和当前单元比较\n  400f1e:       74 05                   je     400f25 <phase_2+0x29>\n  400f20:       e8 15 05 00 00          callq  40143a <explode_bomb>\n  400f25:       48 83 c3 04             add    $0x4,%rbx\n  400f29:       48 39 eb                cmp    %rbp,%rbx\n  400f2c:       75 e9                   jne    400f17 <phase_2+0x1b>\n  400f2e:       eb 0c                   jmp    400f3c <phase_2+0x40>\n  400f30:       48 8d 5c 24 04          lea    0x4(%rsp),%rbx;将%rsp所指单元的上一个单元地址传%rbx\n  400f35:       48 8d 6c 24 18          lea    0x18(%rsp),%rbp;将%rsp+24所指单元的地址传%rbx，作为循环结束条件\n  400f3a:       eb db                   jmp    400f17 <phase_2+0x1b>\n  400f3c:       48 83 c4 28             add    $0x28,%rsp\n  400f40:       5b                      pop    %rbx\n  400f41:       5d                      pop    %rbp\n  400f42:       c3                      retq\n```\n\nread_six_numbers的汇编代码：\n\n```assembly\n000000000040145c <read_six_numbers>:\n  40145c:       48 83 ec 18             sub    $0x18,%rsp\n  401460:       48 89 f2                mov    %rsi,%rdx;存的就是phase_2栈帧底部的地址\n  401463:       48 8d 4e 04             lea    0x4(%rsi),%rcx;传地址参数到寄存器\n  401467:       48 8d 46 14             lea    0x14(%rsi),%rax\n  40146b:       48 89 44 24 08          mov    %rax,0x8(%rsp)\n  401470:       48 8d 46 10             lea    0x10(%rsi),%rax\n  401474:       48 89 04 24             mov    %rax,(%rsp)\n  401478:       4c 8d 4e 0c             lea    0xc(%rsi),%r9\n  40147c:       4c 8d 46 08             lea    0x8(%rsi),%r8\n  401480:       be c3 25 40 00          mov    $0x4025c3,%esi\n  401485:       b8 00 00 00 00          mov    $0x0,%eax\n  40148a:       e8 61 f7 ff ff          callq  400bf0 <__isoc99_sscanf@plt>\n  40148f:       83 f8 05                cmp    $0x5,%eax;返回值：读取到的数量\n  401492:       7f 05                   jg     401499 <read_six_numbers+0x3d>\n  401494:       e8 a1 ff ff ff          callq  40143a <explode_bomb>\n  401499:       48 83 c4 18             add    $0x18,%rsp\n  40149d:       c3                      retq\n```\n\nphase_2主要是个循环，read_six_number将phase_2栈帧地址较低处6个int型内存单元的地址传给__isoc99_sscanf@plt，sscanff读取6个数到phase_2栈帧底部的6个单元，并返回读取到的int数量，存到%eax，如果数量小于6，则boom。\n\n在phase_2的汇编代码中，首先将phase_2栈帧的最低地址单元与常数1相比，如果不等则boom，如果相等，则进行循环：用%rbx记录当前所指单元，将前一个单元的值的两倍和当前单元比较（第一个单元值为1），不相等则boom。当%rbx和%rbp相等时，循环结束。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201007112329.png\" width=\"250px\"> </div>\n\n**答案**是 1 2 4 8 16 32\n\n### phase_3\n\nphase_3的汇编代码：\n\n```assembly\n0000000000400f43 <phase_3>:\n  400f43:       48 83 ec 18             sub    $0x18,%rsp\n  400f47:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx\n  400f4c:       48 8d 54 24 08          lea    0x8(%rsp),%rdx\n  400f51:       be cf 25 40 00          mov    $0x4025cf,%esi;\"%d %d\"\n  400f56:       b8 00 00 00 00          mov    $0x0,%eax\n  400f5b:       e8 90 fc ff ff          callq  400bf0 <__isoc99_sscanf@plt>\n  400f60:       83 f8 01                cmp    $0x1,%eax\n  400f63:       7f 05                   jg     400f6a <phase_3+0x27>\n  400f65:       e8 d0 04 00 00          callq  40143a <explode_bomb>\n  400f6a:       83 7c 24 08 07          cmpl   $0x7,0x8(%rsp)\n  400f6f:       77 3c                   ja     400fad <phase_3+0x6a>\n  400f71:       8b 44 24 08             mov    0x8(%rsp),%eax\n  400f75:       ff 24 c5 70 24 40 00    jmpq   *0x402470(,%rax,8);跳转表\n  400f7c:       b8 cf 00 00 00          mov    $0xcf,%eax\n  400f81:       eb 3b                   jmp    400fbe <phase_3+0x7b>\n  400f83:       b8 c3 02 00 00          mov    $0x2c3,%eax\n  400f88:       eb 34                   jmp    400fbe <phase_3+0x7b>\n  400f8a:       b8 00 01 00 00          mov    $0x100,%eax\n  400f8f:       eb 2d                   jmp    400fbe <phase_3+0x7b>\n  400f91:       b8 85 01 00 00          mov    $0x185,%eax\n  400f96:       eb 26                   jmp    400fbe <phase_3+0x7b>\n  400f98:       b8 ce 00 00 00          mov    $0xce,%eax\n  400f9d:       eb 1f                   jmp    400fbe <phase_3+0x7b>\n  400f9f:       b8 aa 02 00 00          mov    $0x2aa,%eax\n  400fa4:       eb 18                   jmp    400fbe <phase_3+0x7b>\n  400fa6:       b8 47 01 00 00          mov    $0x147,%eax\n  400fab:       eb 11                   jmp    400fbe <phase_3+0x7b>\n  400fad:       e8 88 04 00 00          callq  40143a <explode_bomb>\n  400fb2:       b8 00 00 00 00          mov    $0x0,%eax\n  400fb7:       eb 05                   jmp    400fbe <phase_3+0x7b>\n  400fb9:       b8 37 01 00 00          mov    $0x137,%eax\n  400fbe:       3b 44 24 0c             cmp    0xc(%rsp),%eax\n  400fc2:       74 05                   je     400fc9 <phase_3+0x86>\n  400fc4:       e8 71 04 00 00          callq  40143a <explode_bomb>\n  400fc9:       48 83 c4 18             add    $0x18,%rsp\n  400fcd:       c3                      retq\n```\n\n```assembly\n(gdb) print (char*) 0x4025cf\n$2 = 0x4025cf \"%d %d\"\n```\n\nphase_3主要内容为switch和跳转表，sscanf读取至少两个数，否则就boom。第一个参数在%rsp+8处，第二个参数在%rsp+12处。第一个参数不能大于7，否则就boom\n\n0x402470处是跳转表的首地址，可以用gdb打印出跳转表：\n\n```assembly\n(gdb) print /x *0x402470 @16\n$1 = {0x400f7c, 0x0, 0x400fb9, 0x0, 0x400f83, 0x0, 0x400f8a, 0x0, 0x400f91, 0x0,\n  0x400f98, 0x0, 0x400f9f, 0x0, 0x400fa6, 0x0}\n```\n\n可以看出来，%rsp+8中不同的值，也就是%rax中不同的值对应着跳转表中不同的跳转地址，尝试使%rax等于1，则跳转到0x400fb9处指令，则第二个参数%rsp+12需要等于0x137才能使下一条cmp指令相等。\n\n其中一个**答案**为1 311\n\n### phase_4\n\nphase_4的汇编代码：\n\n```assembly\n000000000040100c <phase_4>:\n  40100c:       48 83 ec 18             sub    $0x18,%rsp\n  401010:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx\n  401015:       48 8d 54 24 08          lea    0x8(%rsp),%rdx\n  40101a:       be cf 25 40 00          mov    $0x4025cf,%esi\n  40101f:       b8 00 00 00 00          mov    $0x0,%eax\n  401024:       e8 c7 fb ff ff          callq  400bf0 <__isoc99_sscanf@plt>\n  401029:       83 f8 02                cmp    $0x2,%eax\n  40102c:       75 07                   jne    401035 <phase_4+0x29>\n  40102e:       83 7c 24 08 0e          cmpl   $0xe,0x8(%rsp)\n  401033:       76 05                   jbe    40103a <phase_4+0x2e>\n  401035:       e8 00 04 00 00          callq  40143a <explode_bomb>\n  40103a:       ba 0e 00 00 00          mov    $0xe,%edx\n  40103f:       be 00 00 00 00          mov    $0x0,%esi\n  401044:       8b 7c 24 08             mov    0x8(%rsp),%edi\n  401048:       e8 81 ff ff ff          callq  400fce <func4>\n  40104d:       85 c0                   test   %eax,%eax\n  40104f:       75 07                   jne    401058 <phase_4+0x4c>\n  401051:       83 7c 24 0c 00          cmpl   $0x0,0xc(%rsp)\n  401056:       74 05                   je     40105d <phase_4+0x51>\n  401058:       e8 dd 03 00 00          callq  40143a <explode_bomb>\n  40105d:       48 83 c4 18             add    $0x18,%rsp\n  401061:       c3                      retq\n```\n\nfunc4的汇编代码：\n\n```assembly\n0000000000400fce <func4>:\n  400fce:       48 83 ec 08             sub    $0x8,%rsp\n  400fd2:       89 d0                   mov    %edx,%eax\n  400fd4:       29 f0                   sub    %esi,%eax\n  400fd6:       89 c1                   mov    %eax,%ecx\n  400fd8:       c1 e9 1f                shr    $0x1f,%ecx\n  400fdb:       01 c8                   add    %ecx,%eax\n  400fdd:       d1 f8                   sar    %eax\n  400fdf:       8d 0c 30                lea    (%rax,%rsi,1),%ecx\n  400fe2:       39 f9                   cmp    %edi,%ecx\n  400fe4:       7e 0c                   jle    400ff2 <func4+0x24>\n  400fe6:       8d 51 ff                lea    -0x1(%rcx),%edx\n  i00fe9:       e8 e0 ff ff ff          callq  400fce <func4>\n  400fee:       01 c0                   add    %eax,%eax\n  400ff0:       eb 15                   jmp    401007 <func4+0x39>\n  400ff2:       b8 00 00 00 00          mov    $0x0,%eax\n  400ff7:       39 f9                   cmp    %edi,%ecx\n  400ff9:       7d 0c                   jge    401007 <func4+0x39>\n  400ffb:       8d 71 01                lea    0x1(%rcx),%esi\n  400ffe:       e8 cb ff ff ff          callq  400fce <func4>\n  401003:       8d 44 00 01             lea    0x1(%rax,%rax,1),%eax\n  401007:       48 83 c4 08             add    $0x8,%rsp\n  40100b:       c3                      retq\n```\n\n直接尝试写出c源码：\n\n```c\nint func4(int target, int step, int limit) {\n  /* edi = target; esi = step; edx = limit */\n  int temp = (limit - step) * 0.5;\n  int mid = temp + step;\n  if (mid > target) {\n    limit = mid - 1;\n    int ret1 = func4(target, step, limit);\n    return 2 * ret1;\n  } else {\n    if (mid >= target) {\n      return 0;\n    } else {\n      step = mid + 1;\n      int ret2 = func4(target, step, limit);\n      return (2 * ret2 + 1);\n    }\n  }\n}\n```\n\n**答案** 7 0\n\n### Phase_5\n\n```assembly\n0000000000401062 <phase_5>:\n  401062:       53                      push   %rbx\n  401063:       48 83 ec 20             sub    $0x20,%rsp\n  401067:       48 89 fb                mov    %rdi,%rbx\n  40106a:       64 48 8b 04 25 28 00    mov    %fs:0x28,%rax\n  401071:       00 00\n  401073:       48 89 44 24 18          mov    %rax,0x18(%rsp)\n  401078:       31 c0                   xor    %eax,%eax\n  40107a:       e8 9c 02 00 00          callq  40131b <string_length>\n  40107f:       83 f8 06                cmp    $0x6,%eax\n  401082:       74 4e                   je     4010d2 <phase_5+0x70>\n  401084:       e8 b1 03 00 00          callq  40143a <explode_bomb>\n  401089:       eb 47                   jmp    4010d2 <phase_5+0x70>\n  40108b:       0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx\n  40108f:       88 0c 24                mov    %cl,(%rsp)\n  401092:       48 8b 14 24             mov    (%rsp),%rdx\n  401096:       83 e2 0f                and    $0xf,%edx\n  401099:       0f b6 92 b0 24 40 00    movzbl 0x4024b0(%rdx),%edx\n  4010a0:       88 54 04 10             mov    %dl,0x10(%rsp,%rax,1)\n  4010a4:       48 83 c0 01             add    $0x1,%rax\n  4010a8:       48 83 f8 06             cmp    $0x6,%rax\n  4010ac:       75 dd                   jne    40108b <phase_5+0x29>\n  4010ae:       c6 44 24 16 00          movb   $0x0,0x16(%rsp)\n  4010b3:       be 5e 24 40 00          mov    $0x40245e,%esi\n  4010b8:       48 8d 7c 24 10          lea    0x10(%rsp),%rdi\n  4010bd:       e8 76 02 00 00          callq  401338 <strings_not_equal>\n  4010c2:       85 c0                   test   %eax,%eax\n  4010c4:       74 13                   je     4010d9 <phase_5+0x77>\n  4010c6:       e8 6f 03 00 00          callq  40143a <explode_bomb>\n  4010cb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n  4010d0:       eb 07                   jmp    4010d9 <phase_5+0x77>\n  4010d2:       b8 00 00 00 00          mov    $0x0,%eax\n  4010d7:       eb b2                   jmp    40108b <phase_5+0x29>\n  4010d9:       48 8b 44 24 18          mov    0x18(%rsp),%rax\n  4010de:       64 48 33 04 25 28 00    xor    %fs:0x28,%rax\n  4010e5:       00 00\n  4010e7:       74 05                   je     4010ee <phase_5+0x8c>\n  4010e9:       e8 42 fa ff ff          callq  400b30 <__stack_chk_fail@plt>\n  4010ee:       48 83 c4 20             add    $0x20,%rsp\n  4010f2:       5b                      pop    %rbx\n  4010f3:       c3                      retq\n```\n\n","source":"_posts/csapp-bomblab.md","raw":"---\ntitle: '[CSAPP] Bomb Lab'\ndate: 2020-10-6 0:41\ntags:\n- CSAPP\n- Labs\ncategories:\n- 编译\n- 汇编\n---\n\n## Bomb Lab\n\n传说中的bomb lab，我开始以为这名字意思是更改了程序汇编代码，让你修复...直到看了writeup...\n\n一些预备知识，主要为[CSAPP第三章](https://wfc.ink/2020/10/06/csapp-pre-bomblab/)\n\n> 题目大致意思就是不给源码（但给了源码框架），然你通过各种工具（gdb，objdump）调试，获取6次正确的输入。输入错误字符串会BOOMMMM !\n\n部分源码：\n\n```c\n/* Do all sorts of secret stuff that makes the bomb harder to defuse. */\ninitialize_bomb();\n\nprintf(\"Welcome to my fiendish little bomb. You have 6 phases with\\n\");\nprintf(\"which to blow yourself up. Have a nice day!\\n\");\n\n/* Hmm...  Six phases must be more secure than one phase! */\ninput = read_line();             /* Get input                   */\nphase_1(input);                  /* Run the phase               */\nphase_defused();                 /* Drat!  They figured it out!\n                                  * Let me know how they did it. */\nprintf(\"Phase 1 defused. How about the next one?\\n\");\n```\n\n### phase_1\n\n```bash\n$objdump -d bomb > log.txt\n```\n\nmain函数中调用phase_1的汇编代码：\n```assembly\n400e32:       e8 67 06 00 00          callq  40149e <read_line>;读入一串字符，地址存在%rax\n400e37:       48 89 c7                mov    %rax,%rdi;%mov到%rdi\n400e3a:       e8 a1 00 00 00          callq  400ee0 <phase_1>\n400e3f:       e8 80 07 00 00          callq  4015c4 <phase_defused>\n```\n\nphase_1的汇编代码：\n\n```assembly\n0000000000400ee0 <phase_1>:\n  400ee0:       48 83 ec 08             sub    $0x8,%rsp\n  400ee4:       be 00 24 40 00          mov    $0x402400,%esi;字符常量地址存入%esi\n  400ee9:       e8 4a 04 00 00          callq  401338 <strings_not_equal>\n  400eee:       85 c0                   test   %eax,%eax;判断返回值是否为0\n  400ef0:       74 05                   je     400ef7 <phase_1+0x17>\n  400ef2:       e8 43 05 00 00          callq  40143a <explode_bomb>\n  400ef7:       48 83 c4 08             add    $0x8,%rsp\n  400efb:       c3                      retq\n```\n\nstrings_not_equal的汇编代码：\n\n```assembly\n0000000000401338 <strings_not_equal>:\n  401338:       41 54                   push   %r12\n  40133a:       55                      push   %rbp\n  40133b:       53                      push   %rbx\n  40133c:       48 89 fb                mov    %rdi,%rbx;读入字符串地址\n  40133f:       48 89 f5                mov    %rsi,%rbp;字符常量地址\n  401342:       e8 d4 ff ff ff          callq  40131b <string_length>\n  401347:       41 89 c4                mov    %eax,%r12d;求长度结果\n  40134a:       48 89 ef                mov    %rbp,%rdi\n  40134d:       e8 c9 ff ff ff          callq  40131b <string_length>\n  401352:       ba 01 00 00 00          mov    $0x1,%edx;求长度结果\n  401357:       41 39 c4                cmp    %eax,%r12d;比较长度，如不等长直接返回\n  40135a:       75 3f                   jne    40139b <strings_not_equal+0x63>\n  40135c:       0f b6 03                movzbl (%rbx),%eax\n  40135f:       84 c0                   test   %al,%al\n  401361:       74 25                   je     401388 <strings_not_equal+0x50>\n  401363:       3a 45 00                cmp    0x0(%rbp),%al\n  401366:       74 0a                   je     401372 <strings_not_equal+0x3a>\n  401368:       eb 25                   jmp    40138f <strings_not_equal+0x57>\n  40136a:       3a 45 00                cmp    0x0(%rbp),%al\n  40136d:       0f 1f 00                nopl   (%rax)\n  401370:       75 24                   jne    401396 <strings_not_equal+0x5e>\n  401372:       48 83 c3 01             add    $0x1,%rbx;双字符串指针都+1判断是否相等\n  401376:       48 83 c5 01             add    $0x1,%rbp\n  40137a:       0f b6 03                movzbl (%rbx),%eax\n  40137d:       84 c0                   test   %al,%al\n  40137f:       75 e9                   jne    40136a <strings_not_equal+0x32>\n  401381:       ba 00 00 00 00          mov    $0x0,%edx\n  401386:       eb 13                   jmp    40139b <strings_not_equal+0x63>\n  401388:       ba 00 00 00 00          mov    $0x0,%edx\n  40138d:       eb 0c                   jmp    40139b <strings_not_equal+0x63>\n  40138f:       ba 01 00 00 00          mov    $0x1,%edx\n  401394:       eb 05                   jmp    40139b <strings_not_equal+0x63>\n  401396:       ba 01 00 00 00          mov    $0x1,%edx\n  40139b:       89 d0                   mov    %edx,%eax\n  40139d:       5b                      pop    %rbx\n  40139e:       5d                      pop    %rbp\n  40139f:       41 5c                   pop    %r12\n  4013a1:       c3                      retq\n```\n\nstring_length的汇编代码：\n\n```assembly\n000000000040131b <string_length>:\n  40131b:       80 3f 00                cmpb   $0x0,(%rdi);指针判空，空指针直接返回0\n  40131e:       74 12                   je     401332 <string_length+0x17>\n  401320:       48 89 fa                mov    %rdi,%rdx\n  401323:       48 83 c2 01             add    $0x1,%rdx;每次地址+1，循环检测'\\0'\n  401327:       89 d0                   mov    %edx,%eax\n  401329:       29 f8                   sub    %edi,%eax;返回的长度\n  40132b:       80 3a 00                cmpb   $0x0,(%rdx)\n  40132e:       75 f3                   jne    401323 <string_length+0x8>\n  401330:       f3 c3                   repz retq\n  401332:       b8 00 00 00 00          mov    $0x0,%eax\n  401337:       c3                      retq\n```\n\nphase_1挺简单，就判断输入的字符串和给定的字符串常量是否相等，不相同则boom。输入的字符串起始地址为%rdi，给定的字符串起始地址为%esi，调用strings_not_equal判断是否相同。strings_not_equal首先调用string_length求字符串长度，不相同则直接返回，string_length就使用每次指针+1，检测所指内存区域是否为'\\0'的方式求长度。如长度相等则再依次对比每个字符，不相等则直接返回。\n\n所以，需要输入的字符串就是给定的字符串常量，位于内存0x402400，使用gdb打印出内存信息\n\n```bash\n$ gdb ./bomb\n(gdb) b phase_1\nBreakpoint 1 at 0x400ee0\n(gdb) r\n[随意的错误输入]\nBreakpoint 1, 0x0000000000400ee0 in phase_1 ()\n(gdb) print (char*) 0x402400\n$1 = 0x402400 \"Border relations with Canada have never been better.\"\n```\n\n**答案**是 Border relations with Canada have never been better.\n\n### phase_2\n\nphase_2的汇编代码：\n\n```assembly\n0000000000400efc <phase_2>:\n  400efc:       55                      push   %rbp\n  400efd:       53                      push   %rbx\n  400efe:       48 83 ec 28             sub    $0x28,%rsp\n  400f02:       48 89 e6                mov    %rsp,%rsi\n  400f05:       e8 52 05 00 00          callq  40145c <read_six_numbers>\n  400f0a:       83 3c 24 01             cmpl   $0x1,(%rsp);和1比较\n  400f0e:       74 20                   je     400f30 <phase_2+0x34>\n  400f10:       e8 25 05 00 00          callq  40143a <explode_bomb>\n  400f15:       eb 19                   jmp    400f30 <phase_2+0x34>\n  400f17:       8b 43 fc                mov    -0x4(%rbx),%eax;前一个单元的值\n  400f1a:       01 c0                   add    %eax,%eax;前一个单元的值*2\n  400f1c:       39 03                   cmp    %eax,(%rbx);前一个单元的值*2和当前单元比较\n  400f1e:       74 05                   je     400f25 <phase_2+0x29>\n  400f20:       e8 15 05 00 00          callq  40143a <explode_bomb>\n  400f25:       48 83 c3 04             add    $0x4,%rbx\n  400f29:       48 39 eb                cmp    %rbp,%rbx\n  400f2c:       75 e9                   jne    400f17 <phase_2+0x1b>\n  400f2e:       eb 0c                   jmp    400f3c <phase_2+0x40>\n  400f30:       48 8d 5c 24 04          lea    0x4(%rsp),%rbx;将%rsp所指单元的上一个单元地址传%rbx\n  400f35:       48 8d 6c 24 18          lea    0x18(%rsp),%rbp;将%rsp+24所指单元的地址传%rbx，作为循环结束条件\n  400f3a:       eb db                   jmp    400f17 <phase_2+0x1b>\n  400f3c:       48 83 c4 28             add    $0x28,%rsp\n  400f40:       5b                      pop    %rbx\n  400f41:       5d                      pop    %rbp\n  400f42:       c3                      retq\n```\n\nread_six_numbers的汇编代码：\n\n```assembly\n000000000040145c <read_six_numbers>:\n  40145c:       48 83 ec 18             sub    $0x18,%rsp\n  401460:       48 89 f2                mov    %rsi,%rdx;存的就是phase_2栈帧底部的地址\n  401463:       48 8d 4e 04             lea    0x4(%rsi),%rcx;传地址参数到寄存器\n  401467:       48 8d 46 14             lea    0x14(%rsi),%rax\n  40146b:       48 89 44 24 08          mov    %rax,0x8(%rsp)\n  401470:       48 8d 46 10             lea    0x10(%rsi),%rax\n  401474:       48 89 04 24             mov    %rax,(%rsp)\n  401478:       4c 8d 4e 0c             lea    0xc(%rsi),%r9\n  40147c:       4c 8d 46 08             lea    0x8(%rsi),%r8\n  401480:       be c3 25 40 00          mov    $0x4025c3,%esi\n  401485:       b8 00 00 00 00          mov    $0x0,%eax\n  40148a:       e8 61 f7 ff ff          callq  400bf0 <__isoc99_sscanf@plt>\n  40148f:       83 f8 05                cmp    $0x5,%eax;返回值：读取到的数量\n  401492:       7f 05                   jg     401499 <read_six_numbers+0x3d>\n  401494:       e8 a1 ff ff ff          callq  40143a <explode_bomb>\n  401499:       48 83 c4 18             add    $0x18,%rsp\n  40149d:       c3                      retq\n```\n\nphase_2主要是个循环，read_six_number将phase_2栈帧地址较低处6个int型内存单元的地址传给__isoc99_sscanf@plt，sscanff读取6个数到phase_2栈帧底部的6个单元，并返回读取到的int数量，存到%eax，如果数量小于6，则boom。\n\n在phase_2的汇编代码中，首先将phase_2栈帧的最低地址单元与常数1相比，如果不等则boom，如果相等，则进行循环：用%rbx记录当前所指单元，将前一个单元的值的两倍和当前单元比较（第一个单元值为1），不相等则boom。当%rbx和%rbp相等时，循环结束。\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201007112329.png\" width=\"250px\"> </div>\n\n**答案**是 1 2 4 8 16 32\n\n### phase_3\n\nphase_3的汇编代码：\n\n```assembly\n0000000000400f43 <phase_3>:\n  400f43:       48 83 ec 18             sub    $0x18,%rsp\n  400f47:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx\n  400f4c:       48 8d 54 24 08          lea    0x8(%rsp),%rdx\n  400f51:       be cf 25 40 00          mov    $0x4025cf,%esi;\"%d %d\"\n  400f56:       b8 00 00 00 00          mov    $0x0,%eax\n  400f5b:       e8 90 fc ff ff          callq  400bf0 <__isoc99_sscanf@plt>\n  400f60:       83 f8 01                cmp    $0x1,%eax\n  400f63:       7f 05                   jg     400f6a <phase_3+0x27>\n  400f65:       e8 d0 04 00 00          callq  40143a <explode_bomb>\n  400f6a:       83 7c 24 08 07          cmpl   $0x7,0x8(%rsp)\n  400f6f:       77 3c                   ja     400fad <phase_3+0x6a>\n  400f71:       8b 44 24 08             mov    0x8(%rsp),%eax\n  400f75:       ff 24 c5 70 24 40 00    jmpq   *0x402470(,%rax,8);跳转表\n  400f7c:       b8 cf 00 00 00          mov    $0xcf,%eax\n  400f81:       eb 3b                   jmp    400fbe <phase_3+0x7b>\n  400f83:       b8 c3 02 00 00          mov    $0x2c3,%eax\n  400f88:       eb 34                   jmp    400fbe <phase_3+0x7b>\n  400f8a:       b8 00 01 00 00          mov    $0x100,%eax\n  400f8f:       eb 2d                   jmp    400fbe <phase_3+0x7b>\n  400f91:       b8 85 01 00 00          mov    $0x185,%eax\n  400f96:       eb 26                   jmp    400fbe <phase_3+0x7b>\n  400f98:       b8 ce 00 00 00          mov    $0xce,%eax\n  400f9d:       eb 1f                   jmp    400fbe <phase_3+0x7b>\n  400f9f:       b8 aa 02 00 00          mov    $0x2aa,%eax\n  400fa4:       eb 18                   jmp    400fbe <phase_3+0x7b>\n  400fa6:       b8 47 01 00 00          mov    $0x147,%eax\n  400fab:       eb 11                   jmp    400fbe <phase_3+0x7b>\n  400fad:       e8 88 04 00 00          callq  40143a <explode_bomb>\n  400fb2:       b8 00 00 00 00          mov    $0x0,%eax\n  400fb7:       eb 05                   jmp    400fbe <phase_3+0x7b>\n  400fb9:       b8 37 01 00 00          mov    $0x137,%eax\n  400fbe:       3b 44 24 0c             cmp    0xc(%rsp),%eax\n  400fc2:       74 05                   je     400fc9 <phase_3+0x86>\n  400fc4:       e8 71 04 00 00          callq  40143a <explode_bomb>\n  400fc9:       48 83 c4 18             add    $0x18,%rsp\n  400fcd:       c3                      retq\n```\n\n```assembly\n(gdb) print (char*) 0x4025cf\n$2 = 0x4025cf \"%d %d\"\n```\n\nphase_3主要内容为switch和跳转表，sscanf读取至少两个数，否则就boom。第一个参数在%rsp+8处，第二个参数在%rsp+12处。第一个参数不能大于7，否则就boom\n\n0x402470处是跳转表的首地址，可以用gdb打印出跳转表：\n\n```assembly\n(gdb) print /x *0x402470 @16\n$1 = {0x400f7c, 0x0, 0x400fb9, 0x0, 0x400f83, 0x0, 0x400f8a, 0x0, 0x400f91, 0x0,\n  0x400f98, 0x0, 0x400f9f, 0x0, 0x400fa6, 0x0}\n```\n\n可以看出来，%rsp+8中不同的值，也就是%rax中不同的值对应着跳转表中不同的跳转地址，尝试使%rax等于1，则跳转到0x400fb9处指令，则第二个参数%rsp+12需要等于0x137才能使下一条cmp指令相等。\n\n其中一个**答案**为1 311\n\n### phase_4\n\nphase_4的汇编代码：\n\n```assembly\n000000000040100c <phase_4>:\n  40100c:       48 83 ec 18             sub    $0x18,%rsp\n  401010:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx\n  401015:       48 8d 54 24 08          lea    0x8(%rsp),%rdx\n  40101a:       be cf 25 40 00          mov    $0x4025cf,%esi\n  40101f:       b8 00 00 00 00          mov    $0x0,%eax\n  401024:       e8 c7 fb ff ff          callq  400bf0 <__isoc99_sscanf@plt>\n  401029:       83 f8 02                cmp    $0x2,%eax\n  40102c:       75 07                   jne    401035 <phase_4+0x29>\n  40102e:       83 7c 24 08 0e          cmpl   $0xe,0x8(%rsp)\n  401033:       76 05                   jbe    40103a <phase_4+0x2e>\n  401035:       e8 00 04 00 00          callq  40143a <explode_bomb>\n  40103a:       ba 0e 00 00 00          mov    $0xe,%edx\n  40103f:       be 00 00 00 00          mov    $0x0,%esi\n  401044:       8b 7c 24 08             mov    0x8(%rsp),%edi\n  401048:       e8 81 ff ff ff          callq  400fce <func4>\n  40104d:       85 c0                   test   %eax,%eax\n  40104f:       75 07                   jne    401058 <phase_4+0x4c>\n  401051:       83 7c 24 0c 00          cmpl   $0x0,0xc(%rsp)\n  401056:       74 05                   je     40105d <phase_4+0x51>\n  401058:       e8 dd 03 00 00          callq  40143a <explode_bomb>\n  40105d:       48 83 c4 18             add    $0x18,%rsp\n  401061:       c3                      retq\n```\n\nfunc4的汇编代码：\n\n```assembly\n0000000000400fce <func4>:\n  400fce:       48 83 ec 08             sub    $0x8,%rsp\n  400fd2:       89 d0                   mov    %edx,%eax\n  400fd4:       29 f0                   sub    %esi,%eax\n  400fd6:       89 c1                   mov    %eax,%ecx\n  400fd8:       c1 e9 1f                shr    $0x1f,%ecx\n  400fdb:       01 c8                   add    %ecx,%eax\n  400fdd:       d1 f8                   sar    %eax\n  400fdf:       8d 0c 30                lea    (%rax,%rsi,1),%ecx\n  400fe2:       39 f9                   cmp    %edi,%ecx\n  400fe4:       7e 0c                   jle    400ff2 <func4+0x24>\n  400fe6:       8d 51 ff                lea    -0x1(%rcx),%edx\n  i00fe9:       e8 e0 ff ff ff          callq  400fce <func4>\n  400fee:       01 c0                   add    %eax,%eax\n  400ff0:       eb 15                   jmp    401007 <func4+0x39>\n  400ff2:       b8 00 00 00 00          mov    $0x0,%eax\n  400ff7:       39 f9                   cmp    %edi,%ecx\n  400ff9:       7d 0c                   jge    401007 <func4+0x39>\n  400ffb:       8d 71 01                lea    0x1(%rcx),%esi\n  400ffe:       e8 cb ff ff ff          callq  400fce <func4>\n  401003:       8d 44 00 01             lea    0x1(%rax,%rax,1),%eax\n  401007:       48 83 c4 08             add    $0x8,%rsp\n  40100b:       c3                      retq\n```\n\n直接尝试写出c源码：\n\n```c\nint func4(int target, int step, int limit) {\n  /* edi = target; esi = step; edx = limit */\n  int temp = (limit - step) * 0.5;\n  int mid = temp + step;\n  if (mid > target) {\n    limit = mid - 1;\n    int ret1 = func4(target, step, limit);\n    return 2 * ret1;\n  } else {\n    if (mid >= target) {\n      return 0;\n    } else {\n      step = mid + 1;\n      int ret2 = func4(target, step, limit);\n      return (2 * ret2 + 1);\n    }\n  }\n}\n```\n\n**答案** 7 0\n\n### Phase_5\n\n```assembly\n0000000000401062 <phase_5>:\n  401062:       53                      push   %rbx\n  401063:       48 83 ec 20             sub    $0x20,%rsp\n  401067:       48 89 fb                mov    %rdi,%rbx\n  40106a:       64 48 8b 04 25 28 00    mov    %fs:0x28,%rax\n  401071:       00 00\n  401073:       48 89 44 24 18          mov    %rax,0x18(%rsp)\n  401078:       31 c0                   xor    %eax,%eax\n  40107a:       e8 9c 02 00 00          callq  40131b <string_length>\n  40107f:       83 f8 06                cmp    $0x6,%eax\n  401082:       74 4e                   je     4010d2 <phase_5+0x70>\n  401084:       e8 b1 03 00 00          callq  40143a <explode_bomb>\n  401089:       eb 47                   jmp    4010d2 <phase_5+0x70>\n  40108b:       0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx\n  40108f:       88 0c 24                mov    %cl,(%rsp)\n  401092:       48 8b 14 24             mov    (%rsp),%rdx\n  401096:       83 e2 0f                and    $0xf,%edx\n  401099:       0f b6 92 b0 24 40 00    movzbl 0x4024b0(%rdx),%edx\n  4010a0:       88 54 04 10             mov    %dl,0x10(%rsp,%rax,1)\n  4010a4:       48 83 c0 01             add    $0x1,%rax\n  4010a8:       48 83 f8 06             cmp    $0x6,%rax\n  4010ac:       75 dd                   jne    40108b <phase_5+0x29>\n  4010ae:       c6 44 24 16 00          movb   $0x0,0x16(%rsp)\n  4010b3:       be 5e 24 40 00          mov    $0x40245e,%esi\n  4010b8:       48 8d 7c 24 10          lea    0x10(%rsp),%rdi\n  4010bd:       e8 76 02 00 00          callq  401338 <strings_not_equal>\n  4010c2:       85 c0                   test   %eax,%eax\n  4010c4:       74 13                   je     4010d9 <phase_5+0x77>\n  4010c6:       e8 6f 03 00 00          callq  40143a <explode_bomb>\n  4010cb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n  4010d0:       eb 07                   jmp    4010d9 <phase_5+0x77>\n  4010d2:       b8 00 00 00 00          mov    $0x0,%eax\n  4010d7:       eb b2                   jmp    40108b <phase_5+0x29>\n  4010d9:       48 8b 44 24 18          mov    0x18(%rsp),%rax\n  4010de:       64 48 33 04 25 28 00    xor    %fs:0x28,%rax\n  4010e5:       00 00\n  4010e7:       74 05                   je     4010ee <phase_5+0x8c>\n  4010e9:       e8 42 fa ff ff          callq  400b30 <__stack_chk_fail@plt>\n  4010ee:       48 83 c4 20             add    $0x20,%rsp\n  4010f2:       5b                      pop    %rbx\n  4010f3:       c3                      retq\n```\n\n","slug":"csapp-bomblab","published":1,"updated":"2020-10-08T02:52:53.295Z","_id":"ckfwrz4l20000qwv7byfqa0hl","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"bomb-lab\"><a class=\"markdownIt-Anchor\" href=\"#bomb-lab\"></a> Bomb Lab</h2>\n<p>传说中的bomb lab，我开始以为这名字意思是更改了程序汇编代码，让你修复…直到看了writeup…</p>\n<p>一些预备知识，主要为<a href=\"https://wfc.ink/2020/10/06/csapp-pre-bomblab/\">CSAPP第三章</a></p>\n<blockquote>\n<p>题目大致意思就是不给源码（但给了源码框架），然你通过各种工具（gdb，objdump）调试，获取6次正确的输入。输入错误字符串会BOOMMMM !</p>\n</blockquote>\n<p>部分源码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Do all sorts of secret stuff that makes the bomb harder to defuse. */</span></span><br><span class=\"line\">initialize_bomb();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Welcome to my fiendish little bomb. You have 6 phases with\\n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"which to blow yourself up. Have a nice day!\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Hmm...  Six phases must be more secure than one phase! */</span></span><br><span class=\"line\">input = read_line();             <span class=\"comment\">/* Get input                   */</span></span><br><span class=\"line\">phase_1(input);                  <span class=\"comment\">/* Run the phase               */</span></span><br><span class=\"line\">phase_defused();                 <span class=\"comment\">/* Drat!  They figured it out!</span></span><br><span class=\"line\"><span class=\"comment\">                                  * Let me know how they did it. */</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Phase 1 defused. How about the next one?\\n\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"phase_1\"><a class=\"markdownIt-Anchor\" href=\"#phase_1\"></a> phase_1</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$objdump</span> -d bomb &gt; log.txt</span><br></pre></td></tr></table></figure>\n<p>main函数中调用phase_1的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">400e32:       e8 67 06 00 00          callq  40149e &lt;read_line&gt;;读入一串字符，地址存在%rax</span><br><span class=\"line\">400e37:       48 89 c7                mov    %rax,%rdi;%mov到%rdi</span><br><span class=\"line\">400e3a:       e8 a1 00 00 00          callq  400ee0 &lt;phase_1&gt;</span><br><span class=\"line\">400e3f:       e8 80 07 00 00          callq  4015c4 &lt;phase_defused&gt;</span><br></pre></td></tr></table></figure>\n<p>phase_1的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400ee0 &lt;phase_1&gt;:</span><br><span class=\"line\">  400ee0:       48 83 ec 08             sub    $0x8,%rsp</span><br><span class=\"line\">  400ee4:       be 00 24 40 00          mov    $0x402400,%esi;字符常量地址存入%esi</span><br><span class=\"line\">  400ee9:       e8 4a 04 00 00          callq  401338 &lt;strings_not_equal&gt;</span><br><span class=\"line\">  400eee:       85 c0                   test   %eax,%eax;判断返回值是否为0</span><br><span class=\"line\">  400ef0:       74 05                   je     400ef7 &lt;phase_1+0x17&gt;</span><br><span class=\"line\">  400ef2:       e8 43 05 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400ef7:       48 83 c4 08             add    $0x8,%rsp</span><br><span class=\"line\">  400efb:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>strings_not_equal的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000401338 &lt;strings_not_equal&gt;:</span><br><span class=\"line\">  401338:       41 54                   push   %r12</span><br><span class=\"line\">  40133a:       55                      push   %rbp</span><br><span class=\"line\">  40133b:       53                      push   %rbx</span><br><span class=\"line\">  40133c:       48 89 fb                mov    %rdi,%rbx;读入字符串地址</span><br><span class=\"line\">  40133f:       48 89 f5                mov    %rsi,%rbp;字符常量地址</span><br><span class=\"line\">  401342:       e8 d4 ff ff ff          callq  40131b &lt;string_length&gt;</span><br><span class=\"line\">  401347:       41 89 c4                mov    %eax,%r12d;求长度结果</span><br><span class=\"line\">  40134a:       48 89 ef                mov    %rbp,%rdi</span><br><span class=\"line\">  40134d:       e8 c9 ff ff ff          callq  40131b &lt;string_length&gt;</span><br><span class=\"line\">  401352:       ba 01 00 00 00          mov    $0x1,%edx;求长度结果</span><br><span class=\"line\">  401357:       41 39 c4                cmp    %eax,%r12d;比较长度，如不等长直接返回</span><br><span class=\"line\">  40135a:       75 3f                   jne    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  40135c:       0f b6 03                movzbl (%rbx),%eax</span><br><span class=\"line\">  40135f:       84 c0                   test   %al,%al</span><br><span class=\"line\">  401361:       74 25                   je     401388 &lt;strings_not_equal+0x50&gt;</span><br><span class=\"line\">  401363:       3a 45 00                cmp    0x0(%rbp),%al</span><br><span class=\"line\">  401366:       74 0a                   je     401372 &lt;strings_not_equal+0x3a&gt;</span><br><span class=\"line\">  401368:       eb 25                   jmp    40138f &lt;strings_not_equal+0x57&gt;</span><br><span class=\"line\">  40136a:       3a 45 00                cmp    0x0(%rbp),%al</span><br><span class=\"line\">  40136d:       0f 1f 00                nopl   (%rax)</span><br><span class=\"line\">  401370:       75 24                   jne    401396 &lt;strings_not_equal+0x5e&gt;</span><br><span class=\"line\">  401372:       48 83 c3 01             add    $0x1,%rbx;双字符串指针都+1判断是否相等</span><br><span class=\"line\">  401376:       48 83 c5 01             add    $0x1,%rbp</span><br><span class=\"line\">  40137a:       0f b6 03                movzbl (%rbx),%eax</span><br><span class=\"line\">  40137d:       84 c0                   test   %al,%al</span><br><span class=\"line\">  40137f:       75 e9                   jne    40136a &lt;strings_not_equal+0x32&gt;</span><br><span class=\"line\">  401381:       ba 00 00 00 00          mov    $0x0,%edx</span><br><span class=\"line\">  401386:       eb 13                   jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  401388:       ba 00 00 00 00          mov    $0x0,%edx</span><br><span class=\"line\">  40138d:       eb 0c                   jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  40138f:       ba 01 00 00 00          mov    $0x1,%edx</span><br><span class=\"line\">  401394:       eb 05                   jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  401396:       ba 01 00 00 00          mov    $0x1,%edx</span><br><span class=\"line\">  40139b:       89 d0                   mov    %edx,%eax</span><br><span class=\"line\">  40139d:       5b                      pop    %rbx</span><br><span class=\"line\">  40139e:       5d                      pop    %rbp</span><br><span class=\"line\">  40139f:       41 5c                   pop    %r12</span><br><span class=\"line\">  4013a1:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>string_length的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">000000000040131b &lt;string_length&gt;:</span><br><span class=\"line\">  40131b:       80 3f 00                cmpb   $0x0,(%rdi);指针判空，空指针直接返回0</span><br><span class=\"line\">  40131e:       74 12                   je     401332 &lt;string_length+0x17&gt;</span><br><span class=\"line\">  401320:       48 89 fa                mov    %rdi,%rdx</span><br><span class=\"line\">  401323:       48 83 c2 01             add    $0x1,%rdx;每次地址+1，循环检测&#39;\\0&#39;</span><br><span class=\"line\">  401327:       89 d0                   mov    %edx,%eax</span><br><span class=\"line\">  401329:       29 f8                   sub    %edi,%eax;返回的长度</span><br><span class=\"line\">  40132b:       80 3a 00                cmpb   $0x0,(%rdx)</span><br><span class=\"line\">  40132e:       75 f3                   jne    401323 &lt;string_length+0x8&gt;</span><br><span class=\"line\">  401330:       f3 c3                   repz retq</span><br><span class=\"line\">  401332:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  401337:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>phase_1挺简单，就判断输入的字符串和给定的字符串常量是否相等，不相同则boom。输入的字符串起始地址为%rdi，给定的字符串起始地址为%esi，调用strings_not_equal判断是否相同。strings_not_equal首先调用string_length求字符串长度，不相同则直接返回，string_length就使用每次指针+1，检测所指内存区域是否为’\\0’的方式求长度。如长度相等则再依次对比每个字符，不相等则直接返回。</p>\n<p>所以，需要输入的字符串就是给定的字符串常量，位于内存0x402400，使用gdb打印出内存信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gdb ./bomb</span><br><span class=\"line\">(gdb) b phase_1</span><br><span class=\"line\">Breakpoint 1 at 0x400ee0</span><br><span class=\"line\">(gdb) r</span><br><span class=\"line\">[随意的错误输入]</span><br><span class=\"line\">Breakpoint 1, 0x0000000000400ee0 <span class=\"keyword\">in</span> phase_1 ()</span><br><span class=\"line\">(gdb) <span class=\"built_in\">print</span> (char*) 0x402400</span><br><span class=\"line\"><span class=\"variable\">$1</span> = 0x402400 <span class=\"string\">\"Border relations with Canada have never been better.\"</span></span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong>是 Border relations with Canada have never been better.</p>\n<h3 id=\"phase_2\"><a class=\"markdownIt-Anchor\" href=\"#phase_2\"></a> phase_2</h3>\n<p>phase_2的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400efc &lt;phase_2&gt;:</span><br><span class=\"line\">  400efc:       55                      push   %rbp</span><br><span class=\"line\">  400efd:       53                      push   %rbx</span><br><span class=\"line\">  400efe:       48 83 ec 28             sub    $0x28,%rsp</span><br><span class=\"line\">  400f02:       48 89 e6                mov    %rsp,%rsi</span><br><span class=\"line\">  400f05:       e8 52 05 00 00          callq  40145c &lt;read_six_numbers&gt;</span><br><span class=\"line\">  400f0a:       83 3c 24 01             cmpl   $0x1,(%rsp);和1比较</span><br><span class=\"line\">  400f0e:       74 20                   je     400f30 &lt;phase_2+0x34&gt;</span><br><span class=\"line\">  400f10:       e8 25 05 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400f15:       eb 19                   jmp    400f30 &lt;phase_2+0x34&gt;</span><br><span class=\"line\">  400f17:       8b 43 fc                mov    -0x4(%rbx),%eax;前一个单元的值</span><br><span class=\"line\">  400f1a:       01 c0                   add    %eax,%eax;前一个单元的值*2</span><br><span class=\"line\">  400f1c:       39 03                   cmp    %eax,(%rbx);前一个单元的值*2和当前单元比较</span><br><span class=\"line\">  400f1e:       74 05                   je     400f25 &lt;phase_2+0x29&gt;</span><br><span class=\"line\">  400f20:       e8 15 05 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400f25:       48 83 c3 04             add    $0x4,%rbx</span><br><span class=\"line\">  400f29:       48 39 eb                cmp    %rbp,%rbx</span><br><span class=\"line\">  400f2c:       75 e9                   jne    400f17 &lt;phase_2+0x1b&gt;</span><br><span class=\"line\">  400f2e:       eb 0c                   jmp    400f3c &lt;phase_2+0x40&gt;</span><br><span class=\"line\">  400f30:       48 8d 5c 24 04          lea    0x4(%rsp),%rbx;将%rsp所指单元的上一个单元地址传%rbx</span><br><span class=\"line\">  400f35:       48 8d 6c 24 18          lea    0x18(%rsp),%rbp;将%rsp+24所指单元的地址传%rbx，作为循环结束条件</span><br><span class=\"line\">  400f3a:       eb db                   jmp    400f17 &lt;phase_2+0x1b&gt;</span><br><span class=\"line\">  400f3c:       48 83 c4 28             add    $0x28,%rsp</span><br><span class=\"line\">  400f40:       5b                      pop    %rbx</span><br><span class=\"line\">  400f41:       5d                      pop    %rbp</span><br><span class=\"line\">  400f42:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>read_six_numbers的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">000000000040145c &lt;read_six_numbers&gt;:</span><br><span class=\"line\">  40145c:       48 83 ec 18             sub    $0x18,%rsp</span><br><span class=\"line\">  401460:       48 89 f2                mov    %rsi,%rdx;存的就是phase_2栈帧底部的地址</span><br><span class=\"line\">  401463:       48 8d 4e 04             lea    0x4(%rsi),%rcx;传地址参数到寄存器</span><br><span class=\"line\">  401467:       48 8d 46 14             lea    0x14(%rsi),%rax</span><br><span class=\"line\">  40146b:       48 89 44 24 08          mov    %rax,0x8(%rsp)</span><br><span class=\"line\">  401470:       48 8d 46 10             lea    0x10(%rsi),%rax</span><br><span class=\"line\">  401474:       48 89 04 24             mov    %rax,(%rsp)</span><br><span class=\"line\">  401478:       4c 8d 4e 0c             lea    0xc(%rsi),%r9</span><br><span class=\"line\">  40147c:       4c 8d 46 08             lea    0x8(%rsi),%r8</span><br><span class=\"line\">  401480:       be c3 25 40 00          mov    $0x4025c3,%esi</span><br><span class=\"line\">  401485:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  40148a:       e8 61 f7 ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class=\"line\">  40148f:       83 f8 05                cmp    $0x5,%eax;返回值：读取到的数量</span><br><span class=\"line\">  401492:       7f 05                   jg     401499 &lt;read_six_numbers+0x3d&gt;</span><br><span class=\"line\">  401494:       e8 a1 ff ff ff          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  401499:       48 83 c4 18             add    $0x18,%rsp</span><br><span class=\"line\">  40149d:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>phase_2主要是个循环，read_six_number将phase_2栈帧地址较低处6个int型内存单元的地址传给__isoc99_sscanf@plt，sscanff读取6个数到phase_2栈帧底部的6个单元，并返回读取到的int数量，存到%eax，如果数量小于6，则boom。</p>\n<p>在phase_2的汇编代码中，首先将phase_2栈帧的最低地址单元与常数1相比，如果不等则boom，如果相等，则进行循环：用%rbx记录当前所指单元，将前一个单元的值的两倍和当前单元比较（第一个单元值为1），不相等则boom。当%rbx和%rbp相等时，循环结束。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201007112329.png\" width=\"250px\"> </div>\n<p><strong>答案</strong>是 1 2 4 8 16 32</p>\n<h3 id=\"phase_3\"><a class=\"markdownIt-Anchor\" href=\"#phase_3\"></a> phase_3</h3>\n<p>phase_3的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400f43 &lt;phase_3&gt;:</span><br><span class=\"line\">  400f43:       48 83 ec 18             sub    $0x18,%rsp</span><br><span class=\"line\">  400f47:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx</span><br><span class=\"line\">  400f4c:       48 8d 54 24 08          lea    0x8(%rsp),%rdx</span><br><span class=\"line\">  400f51:       be cf 25 40 00          mov    $0x4025cf,%esi;&quot;%d %d&quot;</span><br><span class=\"line\">  400f56:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  400f5b:       e8 90 fc ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class=\"line\">  400f60:       83 f8 01                cmp    $0x1,%eax</span><br><span class=\"line\">  400f63:       7f 05                   jg     400f6a &lt;phase_3+0x27&gt;</span><br><span class=\"line\">  400f65:       e8 d0 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400f6a:       83 7c 24 08 07          cmpl   $0x7,0x8(%rsp)</span><br><span class=\"line\">  400f6f:       77 3c                   ja     400fad &lt;phase_3+0x6a&gt;</span><br><span class=\"line\">  400f71:       8b 44 24 08             mov    0x8(%rsp),%eax</span><br><span class=\"line\">  400f75:       ff 24 c5 70 24 40 00    jmpq   *0x402470(,%rax,8);跳转表</span><br><span class=\"line\">  400f7c:       b8 cf 00 00 00          mov    $0xcf,%eax</span><br><span class=\"line\">  400f81:       eb 3b                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f83:       b8 c3 02 00 00          mov    $0x2c3,%eax</span><br><span class=\"line\">  400f88:       eb 34                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f8a:       b8 00 01 00 00          mov    $0x100,%eax</span><br><span class=\"line\">  400f8f:       eb 2d                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f91:       b8 85 01 00 00          mov    $0x185,%eax</span><br><span class=\"line\">  400f96:       eb 26                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f98:       b8 ce 00 00 00          mov    $0xce,%eax</span><br><span class=\"line\">  400f9d:       eb 1f                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f9f:       b8 aa 02 00 00          mov    $0x2aa,%eax</span><br><span class=\"line\">  400fa4:       eb 18                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400fa6:       b8 47 01 00 00          mov    $0x147,%eax</span><br><span class=\"line\">  400fab:       eb 11                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400fad:       e8 88 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400fb2:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  400fb7:       eb 05                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400fb9:       b8 37 01 00 00          mov    $0x137,%eax</span><br><span class=\"line\">  400fbe:       3b 44 24 0c             cmp    0xc(%rsp),%eax</span><br><span class=\"line\">  400fc2:       74 05                   je     400fc9 &lt;phase_3+0x86&gt;</span><br><span class=\"line\">  400fc4:       e8 71 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400fc9:       48 83 c4 18             add    $0x18,%rsp</span><br><span class=\"line\">  400fcd:       c3                      retq</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) print (char*) 0x4025cf</span><br><span class=\"line\">$2 &#x3D; 0x4025cf &quot;%d %d&quot;</span><br></pre></td></tr></table></figure>\n<p>phase_3主要内容为switch和跳转表，sscanf读取至少两个数，否则就boom。第一个参数在%rsp+8处，第二个参数在%rsp+12处。第一个参数不能大于7，否则就boom</p>\n<p>0x402470处是跳转表的首地址，可以用gdb打印出跳转表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) print &#x2F;x *0x402470 @16</span><br><span class=\"line\">$1 &#x3D; &#123;0x400f7c, 0x0, 0x400fb9, 0x0, 0x400f83, 0x0, 0x400f8a, 0x0, 0x400f91, 0x0,</span><br><span class=\"line\">  0x400f98, 0x0, 0x400f9f, 0x0, 0x400fa6, 0x0&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出来，%rsp+8中不同的值，也就是%rax中不同的值对应着跳转表中不同的跳转地址，尝试使%rax等于1，则跳转到0x400fb9处指令，则第二个参数%rsp+12需要等于0x137才能使下一条cmp指令相等。</p>\n<p>其中一个<strong>答案</strong>为1 311</p>\n<h3 id=\"phase_4\"><a class=\"markdownIt-Anchor\" href=\"#phase_4\"></a> phase_4</h3>\n<p>phase_4的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">000000000040100c &lt;phase_4&gt;:</span><br><span class=\"line\">  40100c:       48 83 ec 18             sub    $0x18,%rsp</span><br><span class=\"line\">  401010:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx</span><br><span class=\"line\">  401015:       48 8d 54 24 08          lea    0x8(%rsp),%rdx</span><br><span class=\"line\">  40101a:       be cf 25 40 00          mov    $0x4025cf,%esi</span><br><span class=\"line\">  40101f:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  401024:       e8 c7 fb ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class=\"line\">  401029:       83 f8 02                cmp    $0x2,%eax</span><br><span class=\"line\">  40102c:       75 07                   jne    401035 &lt;phase_4+0x29&gt;</span><br><span class=\"line\">  40102e:       83 7c 24 08 0e          cmpl   $0xe,0x8(%rsp)</span><br><span class=\"line\">  401033:       76 05                   jbe    40103a &lt;phase_4+0x2e&gt;</span><br><span class=\"line\">  401035:       e8 00 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  40103a:       ba 0e 00 00 00          mov    $0xe,%edx</span><br><span class=\"line\">  40103f:       be 00 00 00 00          mov    $0x0,%esi</span><br><span class=\"line\">  401044:       8b 7c 24 08             mov    0x8(%rsp),%edi</span><br><span class=\"line\">  401048:       e8 81 ff ff ff          callq  400fce &lt;func4&gt;</span><br><span class=\"line\">  40104d:       85 c0                   test   %eax,%eax</span><br><span class=\"line\">  40104f:       75 07                   jne    401058 &lt;phase_4+0x4c&gt;</span><br><span class=\"line\">  401051:       83 7c 24 0c 00          cmpl   $0x0,0xc(%rsp)</span><br><span class=\"line\">  401056:       74 05                   je     40105d &lt;phase_4+0x51&gt;</span><br><span class=\"line\">  401058:       e8 dd 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  40105d:       48 83 c4 18             add    $0x18,%rsp</span><br><span class=\"line\">  401061:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>func4的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400fce &lt;func4&gt;:</span><br><span class=\"line\">  400fce:       48 83 ec 08             sub    $0x8,%rsp</span><br><span class=\"line\">  400fd2:       89 d0                   mov    %edx,%eax</span><br><span class=\"line\">  400fd4:       29 f0                   sub    %esi,%eax</span><br><span class=\"line\">  400fd6:       89 c1                   mov    %eax,%ecx</span><br><span class=\"line\">  400fd8:       c1 e9 1f                shr    $0x1f,%ecx</span><br><span class=\"line\">  400fdb:       01 c8                   add    %ecx,%eax</span><br><span class=\"line\">  400fdd:       d1 f8                   sar    %eax</span><br><span class=\"line\">  400fdf:       8d 0c 30                lea    (%rax,%rsi,1),%ecx</span><br><span class=\"line\">  400fe2:       39 f9                   cmp    %edi,%ecx</span><br><span class=\"line\">  400fe4:       7e 0c                   jle    400ff2 &lt;func4+0x24&gt;</span><br><span class=\"line\">  400fe6:       8d 51 ff                lea    -0x1(%rcx),%edx</span><br><span class=\"line\">  i00fe9:       e8 e0 ff ff ff          callq  400fce &lt;func4&gt;</span><br><span class=\"line\">  400fee:       01 c0                   add    %eax,%eax</span><br><span class=\"line\">  400ff0:       eb 15                   jmp    401007 &lt;func4+0x39&gt;</span><br><span class=\"line\">  400ff2:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  400ff7:       39 f9                   cmp    %edi,%ecx</span><br><span class=\"line\">  400ff9:       7d 0c                   jge    401007 &lt;func4+0x39&gt;</span><br><span class=\"line\">  400ffb:       8d 71 01                lea    0x1(%rcx),%esi</span><br><span class=\"line\">  400ffe:       e8 cb ff ff ff          callq  400fce &lt;func4&gt;</span><br><span class=\"line\">  401003:       8d 44 00 01             lea    0x1(%rax,%rax,1),%eax</span><br><span class=\"line\">  401007:       48 83 c4 08             add    $0x8,%rsp</span><br><span class=\"line\">  40100b:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>直接尝试写出c源码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func4</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> <span class=\"built_in\">step</span>, <span class=\"keyword\">int</span> limit)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* edi = target; esi = step; edx = limit */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> temp = (limit - <span class=\"built_in\">step</span>) * <span class=\"number\">0.5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mid = temp + <span class=\"built_in\">step</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mid &gt; target) &#123;</span><br><span class=\"line\">    limit = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret1 = func4(target, <span class=\"built_in\">step</span>, limit);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * ret1;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mid &gt;= target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">step</span> = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> ret2 = func4(target, <span class=\"built_in\">step</span>, limit);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"number\">2</span> * ret2 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong> 7 0</p>\n<h3 id=\"phase_5\"><a class=\"markdownIt-Anchor\" href=\"#phase_5\"></a> Phase_5</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000401062 &lt;phase_5&gt;:</span><br><span class=\"line\">  401062:       53                      push   %rbx</span><br><span class=\"line\">  401063:       48 83 ec 20             sub    $0x20,%rsp</span><br><span class=\"line\">  401067:       48 89 fb                mov    %rdi,%rbx</span><br><span class=\"line\">  40106a:       64 48 8b 04 25 28 00    mov    %fs:0x28,%rax</span><br><span class=\"line\">  401071:       00 00</span><br><span class=\"line\">  401073:       48 89 44 24 18          mov    %rax,0x18(%rsp)</span><br><span class=\"line\">  401078:       31 c0                   xor    %eax,%eax</span><br><span class=\"line\">  40107a:       e8 9c 02 00 00          callq  40131b &lt;string_length&gt;</span><br><span class=\"line\">  40107f:       83 f8 06                cmp    $0x6,%eax</span><br><span class=\"line\">  401082:       74 4e                   je     4010d2 &lt;phase_5+0x70&gt;</span><br><span class=\"line\">  401084:       e8 b1 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  401089:       eb 47                   jmp    4010d2 &lt;phase_5+0x70&gt;</span><br><span class=\"line\">  40108b:       0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx</span><br><span class=\"line\">  40108f:       88 0c 24                mov    %cl,(%rsp)</span><br><span class=\"line\">  401092:       48 8b 14 24             mov    (%rsp),%rdx</span><br><span class=\"line\">  401096:       83 e2 0f                and    $0xf,%edx</span><br><span class=\"line\">  401099:       0f b6 92 b0 24 40 00    movzbl 0x4024b0(%rdx),%edx</span><br><span class=\"line\">  4010a0:       88 54 04 10             mov    %dl,0x10(%rsp,%rax,1)</span><br><span class=\"line\">  4010a4:       48 83 c0 01             add    $0x1,%rax</span><br><span class=\"line\">  4010a8:       48 83 f8 06             cmp    $0x6,%rax</span><br><span class=\"line\">  4010ac:       75 dd                   jne    40108b &lt;phase_5+0x29&gt;</span><br><span class=\"line\">  4010ae:       c6 44 24 16 00          movb   $0x0,0x16(%rsp)</span><br><span class=\"line\">  4010b3:       be 5e 24 40 00          mov    $0x40245e,%esi</span><br><span class=\"line\">  4010b8:       48 8d 7c 24 10          lea    0x10(%rsp),%rdi</span><br><span class=\"line\">  4010bd:       e8 76 02 00 00          callq  401338 &lt;strings_not_equal&gt;</span><br><span class=\"line\">  4010c2:       85 c0                   test   %eax,%eax</span><br><span class=\"line\">  4010c4:       74 13                   je     4010d9 &lt;phase_5+0x77&gt;</span><br><span class=\"line\">  4010c6:       e8 6f 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  4010cb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class=\"line\">  4010d0:       eb 07                   jmp    4010d9 &lt;phase_5+0x77&gt;</span><br><span class=\"line\">  4010d2:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  4010d7:       eb b2                   jmp    40108b &lt;phase_5+0x29&gt;</span><br><span class=\"line\">  4010d9:       48 8b 44 24 18          mov    0x18(%rsp),%rax</span><br><span class=\"line\">  4010de:       64 48 33 04 25 28 00    xor    %fs:0x28,%rax</span><br><span class=\"line\">  4010e5:       00 00</span><br><span class=\"line\">  4010e7:       74 05                   je     4010ee &lt;phase_5+0x8c&gt;</span><br><span class=\"line\">  4010e9:       e8 42 fa ff ff          callq  400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class=\"line\">  4010ee:       48 83 c4 20             add    $0x20,%rsp</span><br><span class=\"line\">  4010f2:       5b                      pop    %rbx</span><br><span class=\"line\">  4010f3:       c3                      retq</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"bomb-lab\"><a class=\"markdownIt-Anchor\" href=\"#bomb-lab\"></a> Bomb Lab</h2>\n<p>传说中的bomb lab，我开始以为这名字意思是更改了程序汇编代码，让你修复…直到看了writeup…</p>\n<p>一些预备知识，主要为<a href=\"https://wfc.ink/2020/10/06/csapp-pre-bomblab/\">CSAPP第三章</a></p>\n<blockquote>\n<p>题目大致意思就是不给源码（但给了源码框架），然你通过各种工具（gdb，objdump）调试，获取6次正确的输入。输入错误字符串会BOOMMMM !</p>\n</blockquote>\n<p>部分源码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Do all sorts of secret stuff that makes the bomb harder to defuse. */</span></span><br><span class=\"line\">initialize_bomb();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Welcome to my fiendish little bomb. You have 6 phases with\\n\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"which to blow yourself up. Have a nice day!\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Hmm...  Six phases must be more secure than one phase! */</span></span><br><span class=\"line\">input = read_line();             <span class=\"comment\">/* Get input                   */</span></span><br><span class=\"line\">phase_1(input);                  <span class=\"comment\">/* Run the phase               */</span></span><br><span class=\"line\">phase_defused();                 <span class=\"comment\">/* Drat!  They figured it out!</span></span><br><span class=\"line\"><span class=\"comment\">                                  * Let me know how they did it. */</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Phase 1 defused. How about the next one?\\n\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"phase_1\"><a class=\"markdownIt-Anchor\" href=\"#phase_1\"></a> phase_1</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$objdump</span> -d bomb &gt; log.txt</span><br></pre></td></tr></table></figure>\n<p>main函数中调用phase_1的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">400e32:       e8 67 06 00 00          callq  40149e &lt;read_line&gt;;读入一串字符，地址存在%rax</span><br><span class=\"line\">400e37:       48 89 c7                mov    %rax,%rdi;%mov到%rdi</span><br><span class=\"line\">400e3a:       e8 a1 00 00 00          callq  400ee0 &lt;phase_1&gt;</span><br><span class=\"line\">400e3f:       e8 80 07 00 00          callq  4015c4 &lt;phase_defused&gt;</span><br></pre></td></tr></table></figure>\n<p>phase_1的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400ee0 &lt;phase_1&gt;:</span><br><span class=\"line\">  400ee0:       48 83 ec 08             sub    $0x8,%rsp</span><br><span class=\"line\">  400ee4:       be 00 24 40 00          mov    $0x402400,%esi;字符常量地址存入%esi</span><br><span class=\"line\">  400ee9:       e8 4a 04 00 00          callq  401338 &lt;strings_not_equal&gt;</span><br><span class=\"line\">  400eee:       85 c0                   test   %eax,%eax;判断返回值是否为0</span><br><span class=\"line\">  400ef0:       74 05                   je     400ef7 &lt;phase_1+0x17&gt;</span><br><span class=\"line\">  400ef2:       e8 43 05 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400ef7:       48 83 c4 08             add    $0x8,%rsp</span><br><span class=\"line\">  400efb:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>strings_not_equal的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000401338 &lt;strings_not_equal&gt;:</span><br><span class=\"line\">  401338:       41 54                   push   %r12</span><br><span class=\"line\">  40133a:       55                      push   %rbp</span><br><span class=\"line\">  40133b:       53                      push   %rbx</span><br><span class=\"line\">  40133c:       48 89 fb                mov    %rdi,%rbx;读入字符串地址</span><br><span class=\"line\">  40133f:       48 89 f5                mov    %rsi,%rbp;字符常量地址</span><br><span class=\"line\">  401342:       e8 d4 ff ff ff          callq  40131b &lt;string_length&gt;</span><br><span class=\"line\">  401347:       41 89 c4                mov    %eax,%r12d;求长度结果</span><br><span class=\"line\">  40134a:       48 89 ef                mov    %rbp,%rdi</span><br><span class=\"line\">  40134d:       e8 c9 ff ff ff          callq  40131b &lt;string_length&gt;</span><br><span class=\"line\">  401352:       ba 01 00 00 00          mov    $0x1,%edx;求长度结果</span><br><span class=\"line\">  401357:       41 39 c4                cmp    %eax,%r12d;比较长度，如不等长直接返回</span><br><span class=\"line\">  40135a:       75 3f                   jne    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  40135c:       0f b6 03                movzbl (%rbx),%eax</span><br><span class=\"line\">  40135f:       84 c0                   test   %al,%al</span><br><span class=\"line\">  401361:       74 25                   je     401388 &lt;strings_not_equal+0x50&gt;</span><br><span class=\"line\">  401363:       3a 45 00                cmp    0x0(%rbp),%al</span><br><span class=\"line\">  401366:       74 0a                   je     401372 &lt;strings_not_equal+0x3a&gt;</span><br><span class=\"line\">  401368:       eb 25                   jmp    40138f &lt;strings_not_equal+0x57&gt;</span><br><span class=\"line\">  40136a:       3a 45 00                cmp    0x0(%rbp),%al</span><br><span class=\"line\">  40136d:       0f 1f 00                nopl   (%rax)</span><br><span class=\"line\">  401370:       75 24                   jne    401396 &lt;strings_not_equal+0x5e&gt;</span><br><span class=\"line\">  401372:       48 83 c3 01             add    $0x1,%rbx;双字符串指针都+1判断是否相等</span><br><span class=\"line\">  401376:       48 83 c5 01             add    $0x1,%rbp</span><br><span class=\"line\">  40137a:       0f b6 03                movzbl (%rbx),%eax</span><br><span class=\"line\">  40137d:       84 c0                   test   %al,%al</span><br><span class=\"line\">  40137f:       75 e9                   jne    40136a &lt;strings_not_equal+0x32&gt;</span><br><span class=\"line\">  401381:       ba 00 00 00 00          mov    $0x0,%edx</span><br><span class=\"line\">  401386:       eb 13                   jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  401388:       ba 00 00 00 00          mov    $0x0,%edx</span><br><span class=\"line\">  40138d:       eb 0c                   jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  40138f:       ba 01 00 00 00          mov    $0x1,%edx</span><br><span class=\"line\">  401394:       eb 05                   jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class=\"line\">  401396:       ba 01 00 00 00          mov    $0x1,%edx</span><br><span class=\"line\">  40139b:       89 d0                   mov    %edx,%eax</span><br><span class=\"line\">  40139d:       5b                      pop    %rbx</span><br><span class=\"line\">  40139e:       5d                      pop    %rbp</span><br><span class=\"line\">  40139f:       41 5c                   pop    %r12</span><br><span class=\"line\">  4013a1:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>string_length的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">000000000040131b &lt;string_length&gt;:</span><br><span class=\"line\">  40131b:       80 3f 00                cmpb   $0x0,(%rdi);指针判空，空指针直接返回0</span><br><span class=\"line\">  40131e:       74 12                   je     401332 &lt;string_length+0x17&gt;</span><br><span class=\"line\">  401320:       48 89 fa                mov    %rdi,%rdx</span><br><span class=\"line\">  401323:       48 83 c2 01             add    $0x1,%rdx;每次地址+1，循环检测&#39;\\0&#39;</span><br><span class=\"line\">  401327:       89 d0                   mov    %edx,%eax</span><br><span class=\"line\">  401329:       29 f8                   sub    %edi,%eax;返回的长度</span><br><span class=\"line\">  40132b:       80 3a 00                cmpb   $0x0,(%rdx)</span><br><span class=\"line\">  40132e:       75 f3                   jne    401323 &lt;string_length+0x8&gt;</span><br><span class=\"line\">  401330:       f3 c3                   repz retq</span><br><span class=\"line\">  401332:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  401337:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>phase_1挺简单，就判断输入的字符串和给定的字符串常量是否相等，不相同则boom。输入的字符串起始地址为%rdi，给定的字符串起始地址为%esi，调用strings_not_equal判断是否相同。strings_not_equal首先调用string_length求字符串长度，不相同则直接返回，string_length就使用每次指针+1，检测所指内存区域是否为’\\0’的方式求长度。如长度相等则再依次对比每个字符，不相等则直接返回。</p>\n<p>所以，需要输入的字符串就是给定的字符串常量，位于内存0x402400，使用gdb打印出内存信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ gdb ./bomb</span><br><span class=\"line\">(gdb) b phase_1</span><br><span class=\"line\">Breakpoint 1 at 0x400ee0</span><br><span class=\"line\">(gdb) r</span><br><span class=\"line\">[随意的错误输入]</span><br><span class=\"line\">Breakpoint 1, 0x0000000000400ee0 <span class=\"keyword\">in</span> phase_1 ()</span><br><span class=\"line\">(gdb) <span class=\"built_in\">print</span> (char*) 0x402400</span><br><span class=\"line\"><span class=\"variable\">$1</span> = 0x402400 <span class=\"string\">\"Border relations with Canada have never been better.\"</span></span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong>是 Border relations with Canada have never been better.</p>\n<h3 id=\"phase_2\"><a class=\"markdownIt-Anchor\" href=\"#phase_2\"></a> phase_2</h3>\n<p>phase_2的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400efc &lt;phase_2&gt;:</span><br><span class=\"line\">  400efc:       55                      push   %rbp</span><br><span class=\"line\">  400efd:       53                      push   %rbx</span><br><span class=\"line\">  400efe:       48 83 ec 28             sub    $0x28,%rsp</span><br><span class=\"line\">  400f02:       48 89 e6                mov    %rsp,%rsi</span><br><span class=\"line\">  400f05:       e8 52 05 00 00          callq  40145c &lt;read_six_numbers&gt;</span><br><span class=\"line\">  400f0a:       83 3c 24 01             cmpl   $0x1,(%rsp);和1比较</span><br><span class=\"line\">  400f0e:       74 20                   je     400f30 &lt;phase_2+0x34&gt;</span><br><span class=\"line\">  400f10:       e8 25 05 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400f15:       eb 19                   jmp    400f30 &lt;phase_2+0x34&gt;</span><br><span class=\"line\">  400f17:       8b 43 fc                mov    -0x4(%rbx),%eax;前一个单元的值</span><br><span class=\"line\">  400f1a:       01 c0                   add    %eax,%eax;前一个单元的值*2</span><br><span class=\"line\">  400f1c:       39 03                   cmp    %eax,(%rbx);前一个单元的值*2和当前单元比较</span><br><span class=\"line\">  400f1e:       74 05                   je     400f25 &lt;phase_2+0x29&gt;</span><br><span class=\"line\">  400f20:       e8 15 05 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400f25:       48 83 c3 04             add    $0x4,%rbx</span><br><span class=\"line\">  400f29:       48 39 eb                cmp    %rbp,%rbx</span><br><span class=\"line\">  400f2c:       75 e9                   jne    400f17 &lt;phase_2+0x1b&gt;</span><br><span class=\"line\">  400f2e:       eb 0c                   jmp    400f3c &lt;phase_2+0x40&gt;</span><br><span class=\"line\">  400f30:       48 8d 5c 24 04          lea    0x4(%rsp),%rbx;将%rsp所指单元的上一个单元地址传%rbx</span><br><span class=\"line\">  400f35:       48 8d 6c 24 18          lea    0x18(%rsp),%rbp;将%rsp+24所指单元的地址传%rbx，作为循环结束条件</span><br><span class=\"line\">  400f3a:       eb db                   jmp    400f17 &lt;phase_2+0x1b&gt;</span><br><span class=\"line\">  400f3c:       48 83 c4 28             add    $0x28,%rsp</span><br><span class=\"line\">  400f40:       5b                      pop    %rbx</span><br><span class=\"line\">  400f41:       5d                      pop    %rbp</span><br><span class=\"line\">  400f42:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>read_six_numbers的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">000000000040145c &lt;read_six_numbers&gt;:</span><br><span class=\"line\">  40145c:       48 83 ec 18             sub    $0x18,%rsp</span><br><span class=\"line\">  401460:       48 89 f2                mov    %rsi,%rdx;存的就是phase_2栈帧底部的地址</span><br><span class=\"line\">  401463:       48 8d 4e 04             lea    0x4(%rsi),%rcx;传地址参数到寄存器</span><br><span class=\"line\">  401467:       48 8d 46 14             lea    0x14(%rsi),%rax</span><br><span class=\"line\">  40146b:       48 89 44 24 08          mov    %rax,0x8(%rsp)</span><br><span class=\"line\">  401470:       48 8d 46 10             lea    0x10(%rsi),%rax</span><br><span class=\"line\">  401474:       48 89 04 24             mov    %rax,(%rsp)</span><br><span class=\"line\">  401478:       4c 8d 4e 0c             lea    0xc(%rsi),%r9</span><br><span class=\"line\">  40147c:       4c 8d 46 08             lea    0x8(%rsi),%r8</span><br><span class=\"line\">  401480:       be c3 25 40 00          mov    $0x4025c3,%esi</span><br><span class=\"line\">  401485:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  40148a:       e8 61 f7 ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class=\"line\">  40148f:       83 f8 05                cmp    $0x5,%eax;返回值：读取到的数量</span><br><span class=\"line\">  401492:       7f 05                   jg     401499 &lt;read_six_numbers+0x3d&gt;</span><br><span class=\"line\">  401494:       e8 a1 ff ff ff          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  401499:       48 83 c4 18             add    $0x18,%rsp</span><br><span class=\"line\">  40149d:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>phase_2主要是个循环，read_six_number将phase_2栈帧地址较低处6个int型内存单元的地址传给__isoc99_sscanf@plt，sscanff读取6个数到phase_2栈帧底部的6个单元，并返回读取到的int数量，存到%eax，如果数量小于6，则boom。</p>\n<p>在phase_2的汇编代码中，首先将phase_2栈帧的最低地址单元与常数1相比，如果不等则boom，如果相等，则进行循环：用%rbx记录当前所指单元，将前一个单元的值的两倍和当前单元比较（第一个单元值为1），不相等则boom。当%rbx和%rbp相等时，循环结束。</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201007112329.png\" width=\"250px\"> </div>\n<p><strong>答案</strong>是 1 2 4 8 16 32</p>\n<h3 id=\"phase_3\"><a class=\"markdownIt-Anchor\" href=\"#phase_3\"></a> phase_3</h3>\n<p>phase_3的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400f43 &lt;phase_3&gt;:</span><br><span class=\"line\">  400f43:       48 83 ec 18             sub    $0x18,%rsp</span><br><span class=\"line\">  400f47:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx</span><br><span class=\"line\">  400f4c:       48 8d 54 24 08          lea    0x8(%rsp),%rdx</span><br><span class=\"line\">  400f51:       be cf 25 40 00          mov    $0x4025cf,%esi;&quot;%d %d&quot;</span><br><span class=\"line\">  400f56:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  400f5b:       e8 90 fc ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class=\"line\">  400f60:       83 f8 01                cmp    $0x1,%eax</span><br><span class=\"line\">  400f63:       7f 05                   jg     400f6a &lt;phase_3+0x27&gt;</span><br><span class=\"line\">  400f65:       e8 d0 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400f6a:       83 7c 24 08 07          cmpl   $0x7,0x8(%rsp)</span><br><span class=\"line\">  400f6f:       77 3c                   ja     400fad &lt;phase_3+0x6a&gt;</span><br><span class=\"line\">  400f71:       8b 44 24 08             mov    0x8(%rsp),%eax</span><br><span class=\"line\">  400f75:       ff 24 c5 70 24 40 00    jmpq   *0x402470(,%rax,8);跳转表</span><br><span class=\"line\">  400f7c:       b8 cf 00 00 00          mov    $0xcf,%eax</span><br><span class=\"line\">  400f81:       eb 3b                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f83:       b8 c3 02 00 00          mov    $0x2c3,%eax</span><br><span class=\"line\">  400f88:       eb 34                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f8a:       b8 00 01 00 00          mov    $0x100,%eax</span><br><span class=\"line\">  400f8f:       eb 2d                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f91:       b8 85 01 00 00          mov    $0x185,%eax</span><br><span class=\"line\">  400f96:       eb 26                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f98:       b8 ce 00 00 00          mov    $0xce,%eax</span><br><span class=\"line\">  400f9d:       eb 1f                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400f9f:       b8 aa 02 00 00          mov    $0x2aa,%eax</span><br><span class=\"line\">  400fa4:       eb 18                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400fa6:       b8 47 01 00 00          mov    $0x147,%eax</span><br><span class=\"line\">  400fab:       eb 11                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400fad:       e8 88 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400fb2:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  400fb7:       eb 05                   jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class=\"line\">  400fb9:       b8 37 01 00 00          mov    $0x137,%eax</span><br><span class=\"line\">  400fbe:       3b 44 24 0c             cmp    0xc(%rsp),%eax</span><br><span class=\"line\">  400fc2:       74 05                   je     400fc9 &lt;phase_3+0x86&gt;</span><br><span class=\"line\">  400fc4:       e8 71 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  400fc9:       48 83 c4 18             add    $0x18,%rsp</span><br><span class=\"line\">  400fcd:       c3                      retq</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) print (char*) 0x4025cf</span><br><span class=\"line\">$2 &#x3D; 0x4025cf &quot;%d %d&quot;</span><br></pre></td></tr></table></figure>\n<p>phase_3主要内容为switch和跳转表，sscanf读取至少两个数，否则就boom。第一个参数在%rsp+8处，第二个参数在%rsp+12处。第一个参数不能大于7，否则就boom</p>\n<p>0x402470处是跳转表的首地址，可以用gdb打印出跳转表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) print &#x2F;x *0x402470 @16</span><br><span class=\"line\">$1 &#x3D; &#123;0x400f7c, 0x0, 0x400fb9, 0x0, 0x400f83, 0x0, 0x400f8a, 0x0, 0x400f91, 0x0,</span><br><span class=\"line\">  0x400f98, 0x0, 0x400f9f, 0x0, 0x400fa6, 0x0&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出来，%rsp+8中不同的值，也就是%rax中不同的值对应着跳转表中不同的跳转地址，尝试使%rax等于1，则跳转到0x400fb9处指令，则第二个参数%rsp+12需要等于0x137才能使下一条cmp指令相等。</p>\n<p>其中一个<strong>答案</strong>为1 311</p>\n<h3 id=\"phase_4\"><a class=\"markdownIt-Anchor\" href=\"#phase_4\"></a> phase_4</h3>\n<p>phase_4的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">000000000040100c &lt;phase_4&gt;:</span><br><span class=\"line\">  40100c:       48 83 ec 18             sub    $0x18,%rsp</span><br><span class=\"line\">  401010:       48 8d 4c 24 0c          lea    0xc(%rsp),%rcx</span><br><span class=\"line\">  401015:       48 8d 54 24 08          lea    0x8(%rsp),%rdx</span><br><span class=\"line\">  40101a:       be cf 25 40 00          mov    $0x4025cf,%esi</span><br><span class=\"line\">  40101f:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  401024:       e8 c7 fb ff ff          callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class=\"line\">  401029:       83 f8 02                cmp    $0x2,%eax</span><br><span class=\"line\">  40102c:       75 07                   jne    401035 &lt;phase_4+0x29&gt;</span><br><span class=\"line\">  40102e:       83 7c 24 08 0e          cmpl   $0xe,0x8(%rsp)</span><br><span class=\"line\">  401033:       76 05                   jbe    40103a &lt;phase_4+0x2e&gt;</span><br><span class=\"line\">  401035:       e8 00 04 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  40103a:       ba 0e 00 00 00          mov    $0xe,%edx</span><br><span class=\"line\">  40103f:       be 00 00 00 00          mov    $0x0,%esi</span><br><span class=\"line\">  401044:       8b 7c 24 08             mov    0x8(%rsp),%edi</span><br><span class=\"line\">  401048:       e8 81 ff ff ff          callq  400fce &lt;func4&gt;</span><br><span class=\"line\">  40104d:       85 c0                   test   %eax,%eax</span><br><span class=\"line\">  40104f:       75 07                   jne    401058 &lt;phase_4+0x4c&gt;</span><br><span class=\"line\">  401051:       83 7c 24 0c 00          cmpl   $0x0,0xc(%rsp)</span><br><span class=\"line\">  401056:       74 05                   je     40105d &lt;phase_4+0x51&gt;</span><br><span class=\"line\">  401058:       e8 dd 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  40105d:       48 83 c4 18             add    $0x18,%rsp</span><br><span class=\"line\">  401061:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>func4的汇编代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000400fce &lt;func4&gt;:</span><br><span class=\"line\">  400fce:       48 83 ec 08             sub    $0x8,%rsp</span><br><span class=\"line\">  400fd2:       89 d0                   mov    %edx,%eax</span><br><span class=\"line\">  400fd4:       29 f0                   sub    %esi,%eax</span><br><span class=\"line\">  400fd6:       89 c1                   mov    %eax,%ecx</span><br><span class=\"line\">  400fd8:       c1 e9 1f                shr    $0x1f,%ecx</span><br><span class=\"line\">  400fdb:       01 c8                   add    %ecx,%eax</span><br><span class=\"line\">  400fdd:       d1 f8                   sar    %eax</span><br><span class=\"line\">  400fdf:       8d 0c 30                lea    (%rax,%rsi,1),%ecx</span><br><span class=\"line\">  400fe2:       39 f9                   cmp    %edi,%ecx</span><br><span class=\"line\">  400fe4:       7e 0c                   jle    400ff2 &lt;func4+0x24&gt;</span><br><span class=\"line\">  400fe6:       8d 51 ff                lea    -0x1(%rcx),%edx</span><br><span class=\"line\">  i00fe9:       e8 e0 ff ff ff          callq  400fce &lt;func4&gt;</span><br><span class=\"line\">  400fee:       01 c0                   add    %eax,%eax</span><br><span class=\"line\">  400ff0:       eb 15                   jmp    401007 &lt;func4+0x39&gt;</span><br><span class=\"line\">  400ff2:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  400ff7:       39 f9                   cmp    %edi,%ecx</span><br><span class=\"line\">  400ff9:       7d 0c                   jge    401007 &lt;func4+0x39&gt;</span><br><span class=\"line\">  400ffb:       8d 71 01                lea    0x1(%rcx),%esi</span><br><span class=\"line\">  400ffe:       e8 cb ff ff ff          callq  400fce &lt;func4&gt;</span><br><span class=\"line\">  401003:       8d 44 00 01             lea    0x1(%rax,%rax,1),%eax</span><br><span class=\"line\">  401007:       48 83 c4 08             add    $0x8,%rsp</span><br><span class=\"line\">  40100b:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>直接尝试写出c源码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func4</span><span class=\"params\">(<span class=\"keyword\">int</span> target, <span class=\"keyword\">int</span> <span class=\"built_in\">step</span>, <span class=\"keyword\">int</span> limit)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* edi = target; esi = step; edx = limit */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> temp = (limit - <span class=\"built_in\">step</span>) * <span class=\"number\">0.5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> mid = temp + <span class=\"built_in\">step</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mid &gt; target) &#123;</span><br><span class=\"line\">    limit = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret1 = func4(target, <span class=\"built_in\">step</span>, limit);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * ret1;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mid &gt;= target) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">step</span> = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> ret2 = func4(target, <span class=\"built_in\">step</span>, limit);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"number\">2</span> * ret2 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>答案</strong> 7 0</p>\n<h3 id=\"phase_5\"><a class=\"markdownIt-Anchor\" href=\"#phase_5\"></a> Phase_5</h3>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000000000401062 &lt;phase_5&gt;:</span><br><span class=\"line\">  401062:       53                      push   %rbx</span><br><span class=\"line\">  401063:       48 83 ec 20             sub    $0x20,%rsp</span><br><span class=\"line\">  401067:       48 89 fb                mov    %rdi,%rbx</span><br><span class=\"line\">  40106a:       64 48 8b 04 25 28 00    mov    %fs:0x28,%rax</span><br><span class=\"line\">  401071:       00 00</span><br><span class=\"line\">  401073:       48 89 44 24 18          mov    %rax,0x18(%rsp)</span><br><span class=\"line\">  401078:       31 c0                   xor    %eax,%eax</span><br><span class=\"line\">  40107a:       e8 9c 02 00 00          callq  40131b &lt;string_length&gt;</span><br><span class=\"line\">  40107f:       83 f8 06                cmp    $0x6,%eax</span><br><span class=\"line\">  401082:       74 4e                   je     4010d2 &lt;phase_5+0x70&gt;</span><br><span class=\"line\">  401084:       e8 b1 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  401089:       eb 47                   jmp    4010d2 &lt;phase_5+0x70&gt;</span><br><span class=\"line\">  40108b:       0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx</span><br><span class=\"line\">  40108f:       88 0c 24                mov    %cl,(%rsp)</span><br><span class=\"line\">  401092:       48 8b 14 24             mov    (%rsp),%rdx</span><br><span class=\"line\">  401096:       83 e2 0f                and    $0xf,%edx</span><br><span class=\"line\">  401099:       0f b6 92 b0 24 40 00    movzbl 0x4024b0(%rdx),%edx</span><br><span class=\"line\">  4010a0:       88 54 04 10             mov    %dl,0x10(%rsp,%rax,1)</span><br><span class=\"line\">  4010a4:       48 83 c0 01             add    $0x1,%rax</span><br><span class=\"line\">  4010a8:       48 83 f8 06             cmp    $0x6,%rax</span><br><span class=\"line\">  4010ac:       75 dd                   jne    40108b &lt;phase_5+0x29&gt;</span><br><span class=\"line\">  4010ae:       c6 44 24 16 00          movb   $0x0,0x16(%rsp)</span><br><span class=\"line\">  4010b3:       be 5e 24 40 00          mov    $0x40245e,%esi</span><br><span class=\"line\">  4010b8:       48 8d 7c 24 10          lea    0x10(%rsp),%rdi</span><br><span class=\"line\">  4010bd:       e8 76 02 00 00          callq  401338 &lt;strings_not_equal&gt;</span><br><span class=\"line\">  4010c2:       85 c0                   test   %eax,%eax</span><br><span class=\"line\">  4010c4:       74 13                   je     4010d9 &lt;phase_5+0x77&gt;</span><br><span class=\"line\">  4010c6:       e8 6f 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class=\"line\">  4010cb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class=\"line\">  4010d0:       eb 07                   jmp    4010d9 &lt;phase_5+0x77&gt;</span><br><span class=\"line\">  4010d2:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  4010d7:       eb b2                   jmp    40108b &lt;phase_5+0x29&gt;</span><br><span class=\"line\">  4010d9:       48 8b 44 24 18          mov    0x18(%rsp),%rax</span><br><span class=\"line\">  4010de:       64 48 33 04 25 28 00    xor    %fs:0x28,%rax</span><br><span class=\"line\">  4010e5:       00 00</span><br><span class=\"line\">  4010e7:       74 05                   je     4010ee &lt;phase_5+0x8c&gt;</span><br><span class=\"line\">  4010e9:       e8 42 fa ff ff          callq  400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class=\"line\">  4010ee:       48 83 c4 20             add    $0x20,%rsp</span><br><span class=\"line\">  4010f2:       5b                      pop    %rbx</span><br><span class=\"line\">  4010f3:       c3                      retq</span><br></pre></td></tr></table></figure>\n"},{"title":"[CSAPP] Data Lab","date":"2020-10-05T08:52:00.000Z","_content":"\n## Data Lab\n\n【踩的坑】在centos7下进行的实验，缺32位glibc, gcc库\n\n```bash\n[wangfangcao@wfcserver datalab-handout]$ make\ngcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c\nIn file included from /usr/include/features.h:399:0,\n                 from /usr/include/stdio.h:27,\n                 from btest.c:16:\n/usr/include/gnu/stubs.h:7:27: fatal error: gnu/stubs-32.h: No such file or directory\n # include <gnu/stubs-32.h>\n                           ^\ncompilation terminated.\n```\n\n解决办法\n\n```bash\nyum -y install glibc-devel.i686\n```\n\n```bash\n[wangfangcao@wfcserver datalab-handout]$ make\ngcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c\n/usr/bin/ld: skipping incompatible /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc_s.so when searching for -lgcc_s\n/usr/bin/ld: cannot find -lgcc_s\ncollect2: error: ld returned 1 exit status\nmake: *** [btest] Error 1\n```\n\n解决办法\n\n```bash\nyum install -y libgcc.i686\n```\n\n","source":"_posts/csapp-datalab.md","raw":"---\ntitle: '[CSAPP] Data Lab'\ndate: 2020-10-5 16:52\ntags: \n- CSAPP\n- Labs\ncategories: \n- 编译\n---\n\n## Data Lab\n\n【踩的坑】在centos7下进行的实验，缺32位glibc, gcc库\n\n```bash\n[wangfangcao@wfcserver datalab-handout]$ make\ngcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c\nIn file included from /usr/include/features.h:399:0,\n                 from /usr/include/stdio.h:27,\n                 from btest.c:16:\n/usr/include/gnu/stubs.h:7:27: fatal error: gnu/stubs-32.h: No such file or directory\n # include <gnu/stubs-32.h>\n                           ^\ncompilation terminated.\n```\n\n解决办法\n\n```bash\nyum -y install glibc-devel.i686\n```\n\n```bash\n[wangfangcao@wfcserver datalab-handout]$ make\ngcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c\n/usr/bin/ld: skipping incompatible /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc_s.so when searching for -lgcc_s\n/usr/bin/ld: cannot find -lgcc_s\ncollect2: error: ld returned 1 exit status\nmake: *** [btest] Error 1\n```\n\n解决办法\n\n```bash\nyum install -y libgcc.i686\n```\n\n","slug":"csapp-datalab","published":1,"updated":"2020-10-05T16:55:14.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfwrz4l80001qwv7ffoffdjs","content":"<h2 id=\"data-lab\"><a class=\"markdownIt-Anchor\" href=\"#data-lab\"></a> Data Lab</h2>\n<p>【踩的坑】在centos7下进行的实验，缺32位glibc, gcc库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[wangfangcao@wfcserver datalab-handout]$ make</span><br><span class=\"line\">gcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c</span><br><span class=\"line\">In file included from /usr/include/features.h:399:0,</span><br><span class=\"line\">                 from /usr/include/stdio.h:27,</span><br><span class=\"line\">                 from btest.c:16:</span><br><span class=\"line\">/usr/include/gnu/stubs.h:7:27: fatal error: gnu/stubs-32.h: No such file or directory</span><br><span class=\"line\"> <span class=\"comment\"># include &lt;gnu/stubs-32.h&gt;</span></span><br><span class=\"line\">                           ^</span><br><span class=\"line\">compilation terminated.</span><br></pre></td></tr></table></figure>\n<p>解决办法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install glibc-devel.i686</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[wangfangcao@wfcserver datalab-handout]$ make</span><br><span class=\"line\">gcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c</span><br><span class=\"line\">/usr/bin/ld: skipping incompatible /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc_s.so when searching <span class=\"keyword\">for</span> -lgcc_s</span><br><span class=\"line\">/usr/bin/ld: cannot find -lgcc_s</span><br><span class=\"line\">collect2: error: ld returned 1 <span class=\"built_in\">exit</span> status</span><br><span class=\"line\">make: *** [btest] Error 1</span><br></pre></td></tr></table></figure>\n<p>解决办法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y libgcc.i686</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"data-lab\"><a class=\"markdownIt-Anchor\" href=\"#data-lab\"></a> Data Lab</h2>\n<p>【踩的坑】在centos7下进行的实验，缺32位glibc, gcc库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[wangfangcao@wfcserver datalab-handout]$ make</span><br><span class=\"line\">gcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c</span><br><span class=\"line\">In file included from /usr/include/features.h:399:0,</span><br><span class=\"line\">                 from /usr/include/stdio.h:27,</span><br><span class=\"line\">                 from btest.c:16:</span><br><span class=\"line\">/usr/include/gnu/stubs.h:7:27: fatal error: gnu/stubs-32.h: No such file or directory</span><br><span class=\"line\"> <span class=\"comment\"># include &lt;gnu/stubs-32.h&gt;</span></span><br><span class=\"line\">                           ^</span><br><span class=\"line\">compilation terminated.</span><br></pre></td></tr></table></figure>\n<p>解决办法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install glibc-devel.i686</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[wangfangcao@wfcserver datalab-handout]$ make</span><br><span class=\"line\">gcc -O -Wall -m32 -lm -o btest bits.c btest.c decl.c tests.c</span><br><span class=\"line\">/usr/bin/ld: skipping incompatible /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcc_s.so when searching <span class=\"keyword\">for</span> -lgcc_s</span><br><span class=\"line\">/usr/bin/ld: cannot find -lgcc_s</span><br><span class=\"line\">collect2: error: ld returned 1 <span class=\"built_in\">exit</span> status</span><br><span class=\"line\">make: *** [btest] Error 1</span><br></pre></td></tr></table></figure>\n<p>解决办法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y libgcc.i686</span><br></pre></td></tr></table></figure>\n"},{"title":"redis数据结构-1","date":"2020-04-30T14:56:00.000Z","_content":"\n## 简单动态字符串sds\nsds 的源码主要在 sds.h 和 sds.c 中\n\n``` c\n/*\n * 保存字符串对象的结构\n */\nstruct sdshdr {\n    \n    // buf 中已占用空间的长度\n    int len;\n\n    // buf 中剩余可用空间的长度\n    int free;\n\n    // 数据空间\n    char buf[];\n};\n```\n其中 buf 数组是柔性数组，在分配的时候不占内存大小\n\nsds.h 中还有两个 inline 的静态函数，用于返回实际保存的字符串长度和可用空间的字符串长度\n``` c\n/*\n * 返回 sds 实际保存的字符串的长度\n */\nstatic inline size_t sdslen(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr))); //buf地址往回sizeof(struct sdshdr))\n    return sh->len;\n}\n```\n\n``` c\n/*\n * 返回 sds 可用空间的长度\n */\nstatic inline size_t sdsavail(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    return sh->free;\n}\n```\n这边用了一个骚操作，用 buf 的数组指针减去8字节，就得到了结构体的初始位置，也就是结构体的指针：\n<div align='center'>\n  <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/redis/20200502162607.png\" height=\"180px\">\n</div>\n这个技巧在 redis 中多处用到\n\nsds 主要接口函数声明：\n``` c\n// 根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的 sds T = O(N)\nsds sdsnewlen(const void *init, size_t initlen);\n\n// 根据给定字符串 init ，创建一个包含同样字符串的 sds T = O(N)\nsds sdsnew(const char *init);\n\n// 创建并返回一个只保存了空字符串 \"\" 的 sds T = O(1)\nsds sdsempty(void);\n\n// 返回 sds 实际保存的字符串的长度 T = O(1)\nsize_t sdslen(const sds s);\n\n// 复制给定 sds 的副本 T = O(N)\nsds sdsdup(const sds s);\n\n// 释放给定的 sds T = O(N)\nvoid sdsfree(sds s);\n\n// 返回 sds 可用空间的长度 T = O(1)\nsize_t sdsavail(const sds s);\n\n// 将 sds 扩充至指定长度，未使用的空间以 0 字节填充 T = O(N)\nsds sdsgrowzero(sds s, size_t len);\n\n// 将长度为 len 的字符串 t 追加到 sds 的字符串末尾 T = O(N)\nsds sdscatlen(sds s, const void *t, size_t len);\n\n// 将给定字符串 t 追加到 sds 的末尾 T = O(N)\nsds sdscat(sds s, const char *t);\n\n// 将另一个 sds 追加到一个 sds 的末尾 T = O(N)\nsds sdscatsds(sds s, const sds t);\n\n// 将字符串 t 的前 len 个字符复制到 sds s 当中，并在字符串的最后添加终结符 T = O(N)\nsds sdscpylen(sds s, const char *t, size_t len);\n\n// 将字符串复制到 sds 当中，覆盖原有的字符 T = O(N)\nsds sdscpy(sds s, const char *t);\n```\n\n其中几个：\n- **sdsnew**   \n  根据给定字符串 init ，创建一个包含同样字符串的 sds\n``` c\nsds sdsnew(const char *init) {\n    size_t initlen = (init == NULL) ? 0 : strlen(init);\n    return sdsnewlen(init, initlen);\n}\n```\n其中调用了：\n- **sdsnewlen**   \n  根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的\n``` c\nsds sdsnewlen(const void *init, size_t initlen) {\n\n    struct sdshdr *sh;\n\n    // 根据是否有初始化内容，选择适当的内存分配方式\n    if (init) {\n        // zmalloc 不初始化所分配的内存\n        sh = zmalloc(sizeof(struct sdshdr)+initlen+1); // 结构体+buf数组+'\\0'\n    } else {\n        // zcalloc 将分配的内存全部初始化为 0\n        sh = zcalloc(sizeof(struct sdshdr)+initlen+1);\n    }\n\n    // 内存分配失败，返回\n    if (sh == NULL) return NULL;\n\n    // 设置初始化长度\n    sh->len = initlen;\n    // 新 sds 不预留任何空间\n    sh->free = 0;\n    // 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中\n    // T = O(N)\n    if (initlen && init)\n        memcpy(sh->buf, init, initlen);\n    // 以 \\0 结尾\n    sh->buf[initlen] = '\\0';\n\n    // 返回 buf 部分，而不是整个 sdshdr\n    return (char*)sh->buf;\n}\n```\n其中 zmalloc 和 zcalloc 为 redis 使用的内存管理工具，在 zmalloc.c 和 zmalloc.h 中定义\n\n## 双端链表\n双端链表 的源码主要在 adlist.h 和 adlist.c 中\n\n双端链表节点：\n``` c\n/*\n * 双端链表节点\n */\ntypedef struct listNode {\n\n    // 前置节点\n    struct listNode *prev;\n\n    // 后置节点\n    struct listNode *next;\n\n    // 节点的值\n    void *value;\n\n} listNode;\n```\n\n双端链表结构:\n``` c\n/*\n * 双端链表结构\n */\ntypedef struct list {\n\n    // 表头节点\n    listNode *head;\n\n    // 表尾节点\n    listNode *tail;\n\n    // 节点值复制函数\n    void *(*dup)(void *ptr);\n\n    // 节点值释放函数\n    void (*free)(void *ptr);\n\n    // 节点值对比函数\n    int (*match)(void *ptr, void *key);\n\n    // 链表所包含的节点数量\n    unsigned long len;\n\n} list;\n```\n\n为了规范化的宏定义函数：\n``` c\n// 返回给定链表所包含的节点数量\n// T = O(1)\n#define listLength(l) ((l)->len)\n// 返回给定链表的表头节点\n// T = O(1)\n#define listFirst(l) ((l)->head)\n// 返回给定链表的表尾节点\n// T = O(1)\n#define listLast(l) ((l)->tail)\n// 返回给定节点的前置节点\n// T = O(1)\n#define listPrevNode(n) ((n)->prev)\n// 返回给定节点的后置节点\n// T = O(1)\n#define listNextNode(n) ((n)->next)\n// 返回给定节点的值\n// T = O(1)\n#define listNodeValue(n) ((n)->value)\n\n// 将链表 l 的值复制函数设置为 m\n// T = O(1)\n#define listSetDupMethod(l,m) ((l)->dup = (m))\n// 将链表 l 的值释放函数设置为 m\n// T = O(1)\n#define listSetFreeMethod(l,m) ((l)->free = (m))\n// 将链表的对比函数设置为 m\n// T = O(1)\n#define listSetMatchMethod(l,m) ((l)->match = (m))\n\n// 返回给定链表的值复制函数\n// T = O(1)\n#define listGetDupMethod(l) ((l)->dup)\n// 返回给定链表的值释放函数\n// T = O(1)\n#define listGetFree(l) ((l)->free)\n// 返回给定链表的值对比函数\n// T = O(1)\n#define listGetMatchMethod(l) ((l)->match)\n```\n\n几个主要接口函数：\n- **listCreate**  \n  创建一个新的链表 T = O(1)\n``` c\nlist *listCreate(void)\n{\n    struct list *list;\n\n    // 分配内存\n    if ((list = zmalloc(sizeof(*list))) == NULL)\n        return NULL;\n\n    // 初始化属性\n    list->head = list->tail = NULL;\n    list->len = 0;\n    list->dup = NULL;\n    list->free = NULL;\n    list->match = NULL;\n\n    return list;\n}\n```\n- **listRelease**  \n  释放整个链表，以及链表中所有节点\n``` c\nvoid listRelease(list *list)\n{\n    unsigned long len;\n    listNode *current, *next;\n\n    // 指向头指针\n    current = list->head;\n    // 遍历整个链表\n    len = list->len;\n    while(len--) {\n        next = current->next;\n\n        // 如果有设置值释放函数，那么调用它\n        if (list->free) list->free(current->value);\n\n        // 释放节点结构\n        zfree(current);\n\n        current = next;\n    }\n\n    // 释放链表结构\n    zfree(list);\n}\n```\n\n- **listAddNodeHead**  \n  将一个包含有给定值指针 value 的新节点添加到链表的表头\n``` c\nlist *listAddNodeHead(list *list, void *value)\n{\n    listNode *node;\n\n    // 为节点分配内存\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值指针\n    node->value = value;\n\n    // 添加节点到空链表\n    if (list->len == 0) {\n        list->head = list->tail = node;\n        node->prev = node->next = NULL;\n    // 添加节点到非空链表\n    } else {\n        node->prev = NULL;\n        node->next = list->head;\n        list->head->prev = node;\n        list->head = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n\n在 redis 双端队列中使用了迭代器这一技巧\n\n双端链表迭代器：\n``` c\n/*\n * 双端链表迭代器\n */\ntypedef struct listIter {\n\n    // 当前迭代到的节点\n    listNode *next;\n\n    // 迭代的方向\n    int direction;\n\n} listIter;\n```\n\n- **listGetIterator**  \n  为给定链表创建一个迭代器，之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点\n``` c\nlistIter *listGetIterator(list *list, int direction)\n{\n    // 为迭代器分配内存\n    listIter *iter;\n    if ((iter = zmalloc(sizeof(*iter))) == NULL) return NULL;\n\n    // 根据迭代方向，设置迭代器的起始节点\n    if (direction == AL_START_HEAD)\n        iter->next = list->head;\n    else\n        iter->next = list->tail;\n\n    // 记录迭代方向\n    iter->direction = direction;\n\n    return iter;\n}\n```\n\n- **listNext**  \n  返回迭代器当前所指向的节点  \n  这个函数其实有两个作用：返回当前迭代器指向的节点 + 使迭代器指向下一个节点（我刚开始还没明白只return了一个current，怎么把iter传出去，后来看了这个函数的使用才知道，因为函数传入的是指针，只要定义一个listIter类型的指针，一直使用该函数就能迭代了\n``` c\nlistNode *listNext(listIter *iter)\n{\n    listNode *current = iter->next;\n\n    if (current != NULL) {\n        // 根据方向选择下一个节点\n        if (iter->direction == AL_START_HEAD)\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->next;\n        else\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->prev;\n    }\n\n    return current;\n}\n```\n\n- **listDup**  \n  复制整个链表  \n  其中就使用了上述的listNext来进行迭代\n``` c\nlist *listDup(list *orig)\n{\n    list *copy;\n    listIter *iter;\n    listNode *node;\n\n    // 创建新链表\n    if ((copy = listCreate()) == NULL)\n        return NULL;\n\n    // 设置节点值处理函数\n    copy->dup = orig->dup;\n    copy->free = orig->free;\n    copy->match = orig->match;\n\n    // 迭代整个输入链表\n    iter = listGetIterator(orig, AL_START_HEAD);\n    while((node = listNext(iter)) != NULL) {\n        void *value;\n\n        // 复制节点值到新节点\n        if (copy->dup) {\n            value = copy->dup(node->value);\n            if (value == NULL) {\n                listRelease(copy);\n                listReleaseIterator(iter);\n                return NULL;\n            }\n        } else\n            value = node->value;\n\n        // 将节点添加到链表\n        if (listAddNodeTail(copy, value) == NULL) {\n            listRelease(copy);\n            listReleaseIterator(iter);\n            return NULL;\n        }\n    }\n\n    // 释放迭代器\n    listReleaseIterator(iter);\n\n    // 返回副本\n    return copy;\n}\n```\n  ","source":"_posts/redis-data-structure-1.md","raw":"---\ntitle: redis数据结构-1\ndate: 2020-4-30 22:56\ntags: redis\ncategories: redis源码\n---\n\n## 简单动态字符串sds\nsds 的源码主要在 sds.h 和 sds.c 中\n\n``` c\n/*\n * 保存字符串对象的结构\n */\nstruct sdshdr {\n    \n    // buf 中已占用空间的长度\n    int len;\n\n    // buf 中剩余可用空间的长度\n    int free;\n\n    // 数据空间\n    char buf[];\n};\n```\n其中 buf 数组是柔性数组，在分配的时候不占内存大小\n\nsds.h 中还有两个 inline 的静态函数，用于返回实际保存的字符串长度和可用空间的字符串长度\n``` c\n/*\n * 返回 sds 实际保存的字符串的长度\n */\nstatic inline size_t sdslen(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr))); //buf地址往回sizeof(struct sdshdr))\n    return sh->len;\n}\n```\n\n``` c\n/*\n * 返回 sds 可用空间的长度\n */\nstatic inline size_t sdsavail(const sds s) {\n    struct sdshdr *sh = (void*)(s-(sizeof(struct sdshdr)));\n    return sh->free;\n}\n```\n这边用了一个骚操作，用 buf 的数组指针减去8字节，就得到了结构体的初始位置，也就是结构体的指针：\n<div align='center'>\n  <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/redis/20200502162607.png\" height=\"180px\">\n</div>\n这个技巧在 redis 中多处用到\n\nsds 主要接口函数声明：\n``` c\n// 根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的 sds T = O(N)\nsds sdsnewlen(const void *init, size_t initlen);\n\n// 根据给定字符串 init ，创建一个包含同样字符串的 sds T = O(N)\nsds sdsnew(const char *init);\n\n// 创建并返回一个只保存了空字符串 \"\" 的 sds T = O(1)\nsds sdsempty(void);\n\n// 返回 sds 实际保存的字符串的长度 T = O(1)\nsize_t sdslen(const sds s);\n\n// 复制给定 sds 的副本 T = O(N)\nsds sdsdup(const sds s);\n\n// 释放给定的 sds T = O(N)\nvoid sdsfree(sds s);\n\n// 返回 sds 可用空间的长度 T = O(1)\nsize_t sdsavail(const sds s);\n\n// 将 sds 扩充至指定长度，未使用的空间以 0 字节填充 T = O(N)\nsds sdsgrowzero(sds s, size_t len);\n\n// 将长度为 len 的字符串 t 追加到 sds 的字符串末尾 T = O(N)\nsds sdscatlen(sds s, const void *t, size_t len);\n\n// 将给定字符串 t 追加到 sds 的末尾 T = O(N)\nsds sdscat(sds s, const char *t);\n\n// 将另一个 sds 追加到一个 sds 的末尾 T = O(N)\nsds sdscatsds(sds s, const sds t);\n\n// 将字符串 t 的前 len 个字符复制到 sds s 当中，并在字符串的最后添加终结符 T = O(N)\nsds sdscpylen(sds s, const char *t, size_t len);\n\n// 将字符串复制到 sds 当中，覆盖原有的字符 T = O(N)\nsds sdscpy(sds s, const char *t);\n```\n\n其中几个：\n- **sdsnew**   \n  根据给定字符串 init ，创建一个包含同样字符串的 sds\n``` c\nsds sdsnew(const char *init) {\n    size_t initlen = (init == NULL) ? 0 : strlen(init);\n    return sdsnewlen(init, initlen);\n}\n```\n其中调用了：\n- **sdsnewlen**   \n  根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的\n``` c\nsds sdsnewlen(const void *init, size_t initlen) {\n\n    struct sdshdr *sh;\n\n    // 根据是否有初始化内容，选择适当的内存分配方式\n    if (init) {\n        // zmalloc 不初始化所分配的内存\n        sh = zmalloc(sizeof(struct sdshdr)+initlen+1); // 结构体+buf数组+'\\0'\n    } else {\n        // zcalloc 将分配的内存全部初始化为 0\n        sh = zcalloc(sizeof(struct sdshdr)+initlen+1);\n    }\n\n    // 内存分配失败，返回\n    if (sh == NULL) return NULL;\n\n    // 设置初始化长度\n    sh->len = initlen;\n    // 新 sds 不预留任何空间\n    sh->free = 0;\n    // 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中\n    // T = O(N)\n    if (initlen && init)\n        memcpy(sh->buf, init, initlen);\n    // 以 \\0 结尾\n    sh->buf[initlen] = '\\0';\n\n    // 返回 buf 部分，而不是整个 sdshdr\n    return (char*)sh->buf;\n}\n```\n其中 zmalloc 和 zcalloc 为 redis 使用的内存管理工具，在 zmalloc.c 和 zmalloc.h 中定义\n\n## 双端链表\n双端链表 的源码主要在 adlist.h 和 adlist.c 中\n\n双端链表节点：\n``` c\n/*\n * 双端链表节点\n */\ntypedef struct listNode {\n\n    // 前置节点\n    struct listNode *prev;\n\n    // 后置节点\n    struct listNode *next;\n\n    // 节点的值\n    void *value;\n\n} listNode;\n```\n\n双端链表结构:\n``` c\n/*\n * 双端链表结构\n */\ntypedef struct list {\n\n    // 表头节点\n    listNode *head;\n\n    // 表尾节点\n    listNode *tail;\n\n    // 节点值复制函数\n    void *(*dup)(void *ptr);\n\n    // 节点值释放函数\n    void (*free)(void *ptr);\n\n    // 节点值对比函数\n    int (*match)(void *ptr, void *key);\n\n    // 链表所包含的节点数量\n    unsigned long len;\n\n} list;\n```\n\n为了规范化的宏定义函数：\n``` c\n// 返回给定链表所包含的节点数量\n// T = O(1)\n#define listLength(l) ((l)->len)\n// 返回给定链表的表头节点\n// T = O(1)\n#define listFirst(l) ((l)->head)\n// 返回给定链表的表尾节点\n// T = O(1)\n#define listLast(l) ((l)->tail)\n// 返回给定节点的前置节点\n// T = O(1)\n#define listPrevNode(n) ((n)->prev)\n// 返回给定节点的后置节点\n// T = O(1)\n#define listNextNode(n) ((n)->next)\n// 返回给定节点的值\n// T = O(1)\n#define listNodeValue(n) ((n)->value)\n\n// 将链表 l 的值复制函数设置为 m\n// T = O(1)\n#define listSetDupMethod(l,m) ((l)->dup = (m))\n// 将链表 l 的值释放函数设置为 m\n// T = O(1)\n#define listSetFreeMethod(l,m) ((l)->free = (m))\n// 将链表的对比函数设置为 m\n// T = O(1)\n#define listSetMatchMethod(l,m) ((l)->match = (m))\n\n// 返回给定链表的值复制函数\n// T = O(1)\n#define listGetDupMethod(l) ((l)->dup)\n// 返回给定链表的值释放函数\n// T = O(1)\n#define listGetFree(l) ((l)->free)\n// 返回给定链表的值对比函数\n// T = O(1)\n#define listGetMatchMethod(l) ((l)->match)\n```\n\n几个主要接口函数：\n- **listCreate**  \n  创建一个新的链表 T = O(1)\n``` c\nlist *listCreate(void)\n{\n    struct list *list;\n\n    // 分配内存\n    if ((list = zmalloc(sizeof(*list))) == NULL)\n        return NULL;\n\n    // 初始化属性\n    list->head = list->tail = NULL;\n    list->len = 0;\n    list->dup = NULL;\n    list->free = NULL;\n    list->match = NULL;\n\n    return list;\n}\n```\n- **listRelease**  \n  释放整个链表，以及链表中所有节点\n``` c\nvoid listRelease(list *list)\n{\n    unsigned long len;\n    listNode *current, *next;\n\n    // 指向头指针\n    current = list->head;\n    // 遍历整个链表\n    len = list->len;\n    while(len--) {\n        next = current->next;\n\n        // 如果有设置值释放函数，那么调用它\n        if (list->free) list->free(current->value);\n\n        // 释放节点结构\n        zfree(current);\n\n        current = next;\n    }\n\n    // 释放链表结构\n    zfree(list);\n}\n```\n\n- **listAddNodeHead**  \n  将一个包含有给定值指针 value 的新节点添加到链表的表头\n``` c\nlist *listAddNodeHead(list *list, void *value)\n{\n    listNode *node;\n\n    // 为节点分配内存\n    if ((node = zmalloc(sizeof(*node))) == NULL)\n        return NULL;\n\n    // 保存值指针\n    node->value = value;\n\n    // 添加节点到空链表\n    if (list->len == 0) {\n        list->head = list->tail = node;\n        node->prev = node->next = NULL;\n    // 添加节点到非空链表\n    } else {\n        node->prev = NULL;\n        node->next = list->head;\n        list->head->prev = node;\n        list->head = node;\n    }\n\n    // 更新链表节点数\n    list->len++;\n\n    return list;\n}\n```\n\n在 redis 双端队列中使用了迭代器这一技巧\n\n双端链表迭代器：\n``` c\n/*\n * 双端链表迭代器\n */\ntypedef struct listIter {\n\n    // 当前迭代到的节点\n    listNode *next;\n\n    // 迭代的方向\n    int direction;\n\n} listIter;\n```\n\n- **listGetIterator**  \n  为给定链表创建一个迭代器，之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点\n``` c\nlistIter *listGetIterator(list *list, int direction)\n{\n    // 为迭代器分配内存\n    listIter *iter;\n    if ((iter = zmalloc(sizeof(*iter))) == NULL) return NULL;\n\n    // 根据迭代方向，设置迭代器的起始节点\n    if (direction == AL_START_HEAD)\n        iter->next = list->head;\n    else\n        iter->next = list->tail;\n\n    // 记录迭代方向\n    iter->direction = direction;\n\n    return iter;\n}\n```\n\n- **listNext**  \n  返回迭代器当前所指向的节点  \n  这个函数其实有两个作用：返回当前迭代器指向的节点 + 使迭代器指向下一个节点（我刚开始还没明白只return了一个current，怎么把iter传出去，后来看了这个函数的使用才知道，因为函数传入的是指针，只要定义一个listIter类型的指针，一直使用该函数就能迭代了\n``` c\nlistNode *listNext(listIter *iter)\n{\n    listNode *current = iter->next;\n\n    if (current != NULL) {\n        // 根据方向选择下一个节点\n        if (iter->direction == AL_START_HEAD)\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->next;\n        else\n            // 保存下一个节点，防止当前节点被删除而造成指针丢失\n            iter->next = current->prev;\n    }\n\n    return current;\n}\n```\n\n- **listDup**  \n  复制整个链表  \n  其中就使用了上述的listNext来进行迭代\n``` c\nlist *listDup(list *orig)\n{\n    list *copy;\n    listIter *iter;\n    listNode *node;\n\n    // 创建新链表\n    if ((copy = listCreate()) == NULL)\n        return NULL;\n\n    // 设置节点值处理函数\n    copy->dup = orig->dup;\n    copy->free = orig->free;\n    copy->match = orig->match;\n\n    // 迭代整个输入链表\n    iter = listGetIterator(orig, AL_START_HEAD);\n    while((node = listNext(iter)) != NULL) {\n        void *value;\n\n        // 复制节点值到新节点\n        if (copy->dup) {\n            value = copy->dup(node->value);\n            if (value == NULL) {\n                listRelease(copy);\n                listReleaseIterator(iter);\n                return NULL;\n            }\n        } else\n            value = node->value;\n\n        // 将节点添加到链表\n        if (listAddNodeTail(copy, value) == NULL) {\n            listRelease(copy);\n            listReleaseIterator(iter);\n            return NULL;\n        }\n    }\n\n    // 释放迭代器\n    listReleaseIterator(iter);\n\n    // 返回副本\n    return copy;\n}\n```\n  ","slug":"redis-data-structure-1","published":1,"updated":"2020-09-25T12:36:22.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfyskt2k0001pcv76zzyafbu","content":"<h2 id=\"简单动态字符串sds\"><a class=\"markdownIt-Anchor\" href=\"#简单动态字符串sds\"></a> 简单动态字符串sds</h2>\n<p>sds 的源码主要在 sds.h 和 sds.c 中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存字符串对象的结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// buf 中已占用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf 中剩余可用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据空间</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中 buf 数组是柔性数组，在分配的时候不占内存大小</p>\n<p>sds.h 中还有两个 inline 的静态函数，用于返回实际保存的字符串长度和可用空间的字符串长度</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 实际保存的字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">size_t</span> <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span> <span class=\"comment\">//buf地址往回sizeof(struct sdshdr))</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 可用空间的长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">size_t</span> <span class=\"title\">sdsavail</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这边用了一个骚操作，用 buf 的数组指针减去8字节，就得到了结构体的初始位置，也就是结构体的指针：</p>\n<div align='center'>\n  <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/redis/20200502162607.png\" height=\"180px\">\n</div>\n这个技巧在 redis 中多处用到\n<p>sds 主要接口函数声明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的 sds T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据给定字符串 init ，创建一个包含同样字符串的 sds T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnew</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *init)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建并返回一个只保存了空字符串 \"\" 的 sds T = O(1)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsempty</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回 sds 实际保存的字符串的长度 T = O(1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制给定 sds 的副本 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsdup</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放给定的 sds T = O(N)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sdsfree</span><span class=\"params\">(sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回 sds 可用空间的长度 T = O(1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">sdsavail</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 sds 扩充至指定长度，未使用的空间以 0 字节填充 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsgrowzero</span><span class=\"params\">(sds s, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将长度为 len 的字符串 t 追加到 sds 的字符串末尾 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatlen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *t, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将给定字符串 t 追加到 sds 的末尾 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscat</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将另一个 sds 追加到一个 sds 的末尾 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatsds</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> sds t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字符串 t 的前 len 个字符复制到 sds s 当中，并在字符串的最后添加终结符 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpylen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字符串复制到 sds 当中，覆盖原有的字符 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpy</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>其中几个：</p>\n<ul>\n<li><strong>sdsnew</strong><br />\n根据给定字符串 init ，创建一个包含同样字符串的 sds</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnew</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *init)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> initlen = (init == <span class=\"literal\">NULL</span>) ? <span class=\"number\">0</span> : <span class=\"built_in\">strlen</span>(init);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(init, initlen);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中调用了：</p>\n<ul>\n<li><strong>sdsnewlen</strong><br />\n根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据是否有初始化内容，选择适当的内存分配方式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (init) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zmalloc 不初始化所分配的内存</span></span><br><span class=\"line\">        sh = zmalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>); <span class=\"comment\">// 结构体+buf数组+'\\0'</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zcalloc 将分配的内存全部初始化为 0</span></span><br><span class=\"line\">        sh = zcalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存分配失败，返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置初始化长度</span></span><br><span class=\"line\">    sh-&gt;len = initlen;</span><br><span class=\"line\">    <span class=\"comment\">// 新 sds 不预留任何空间</span></span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initlen &amp;&amp; init)</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(sh-&gt;buf, init, initlen);</span><br><span class=\"line\">    <span class=\"comment\">// 以 \\0 结尾</span></span><br><span class=\"line\">    sh-&gt;buf[initlen] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回 buf 部分，而不是整个 sdshdr</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>*)sh-&gt;buf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 zmalloc 和 zcalloc 为 redis 使用的内存管理工具，在 zmalloc.c 和 zmalloc.h 中定义</p>\n<h2 id=\"双端链表\"><a class=\"markdownIt-Anchor\" href=\"#双端链表\"></a> 双端链表</h2>\n<p>双端链表 的源码主要在 adlist.h 和 adlist.c 中</p>\n<p>双端链表节点：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listNode;</span><br></pre></td></tr></table></figure>\n<p>双端链表结构:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表头节点</span></span><br><span class=\"line\">    listNode *head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表尾节点</span></span><br><span class=\"line\">    listNode *tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值复制函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *(*dup)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值释放函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*<span class=\"built_in\">free</span>)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值对比函数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">void</span> *ptr, <span class=\"keyword\">void</span> *key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表所包含的节点数量</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br></pre></td></tr></table></figure>\n<p>为了规范化的宏定义函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回给定链表所包含的节点数量</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listLength(l) ((l)-&gt;len)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的表头节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listFirst(l) ((l)-&gt;head)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的表尾节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listLast(l) ((l)-&gt;tail)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定节点的前置节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listPrevNode(n) ((n)-&gt;prev)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定节点的后置节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listNextNode(n) ((n)-&gt;next)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定节点的值</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listNodeValue(n) ((n)-&gt;value)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将链表 l 的值复制函数设置为 m</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listSetDupMethod(l,m) ((l)-&gt;dup = (m))</span></span><br><span class=\"line\"><span class=\"comment\">// 将链表 l 的值释放函数设置为 m</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listSetFreeMethod(l,m) ((l)-&gt;free = (m))</span></span><br><span class=\"line\"><span class=\"comment\">// 将链表的对比函数设置为 m</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listSetMatchMethod(l,m) ((l)-&gt;match = (m))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的值复制函数</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listGetDupMethod(l) ((l)-&gt;dup)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的值释放函数</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listGetFree(l) ((l)-&gt;free)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的值对比函数</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listGetMatchMethod(l) ((l)-&gt;match)</span></span><br></pre></td></tr></table></figure>\n<p>几个主要接口函数：</p>\n<ul>\n<li><strong>listCreate</strong><br />\n创建一个新的链表 T = O(1)</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listCreate</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">list</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"built_in\">list</span> = zmalloc(<span class=\"keyword\">sizeof</span>(*<span class=\"built_in\">list</span>))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化属性</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;dup = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span> = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;match = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listRelease</strong><br />\n释放整个链表，以及链表中所有节点</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRelease</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\">    listNode *current, *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指向头指针</span></span><br><span class=\"line\">    current = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历整个链表</span></span><br><span class=\"line\">    len = <span class=\"built_in\">list</span>-&gt;len;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(len--) &#123;</span><br><span class=\"line\">        next = current-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果有设置值释放函数，那么调用它</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>) <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>(current-&gt;value);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 释放节点结构</span></span><br><span class=\"line\">        zfree(current);</span><br><span class=\"line\"></span><br><span class=\"line\">        current = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放链表结构</span></span><br><span class=\"line\">    zfree(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listAddNodeHead</strong><br />\n将一个包含有给定值指针 value 的新节点添加到链表的表头</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listAddNodeHead</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为节点分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值指针</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到空链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        node-&gt;prev = node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到非空链表</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        node-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head-&gt;prev = node;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 redis 双端队列中使用了迭代器这一技巧</p>\n<p>双端链表迭代器：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listIter</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前迭代到的节点</span></span><br><span class=\"line\">    listNode *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代的方向</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> direction;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listIter;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listGetIterator</strong><br />\n为给定链表创建一个迭代器，之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">listIter *<span class=\"title\">listGetIterator</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> direction)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 为迭代器分配内存</span></span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((iter = zmalloc(<span class=\"keyword\">sizeof</span>(*iter))) == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据迭代方向，设置迭代器的起始节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (direction == AL_START_HEAD)</span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录迭代方向</span></span><br><span class=\"line\">    iter-&gt;direction = direction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> iter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listNext</strong><br />\n返回迭代器当前所指向的节点<br />\n这个函数其实有两个作用：返回当前迭代器指向的节点 + 使迭代器指向下一个节点（我刚开始还没明白只return了一个current，怎么把iter传出去，后来看了这个函数的使用才知道，因为函数传入的是指针，只要定义一个listIter类型的指针，一直使用该函数就能迭代了</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listNext</span><span class=\"params\">(listIter *iter)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *current = iter-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据方向选择下一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iter-&gt;direction == AL_START_HEAD)</span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listDup</strong><br />\n复制整个链表<br />\n其中就使用了上述的listNext来进行迭代</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listDup</span><span class=\"params\">(<span class=\"built_in\">list</span> *orig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">list</span> *copy;</span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建新链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((copy = listCreate()) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置节点值处理函数</span></span><br><span class=\"line\">    copy-&gt;dup = orig-&gt;dup;</span><br><span class=\"line\">    copy-&gt;<span class=\"built_in\">free</span> = orig-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">    copy-&gt;match = orig-&gt;match;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代整个输入链表</span></span><br><span class=\"line\">    iter = listGetIterator(orig, AL_START_HEAD);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((node = listNext(iter)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 复制节点值到新节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (copy-&gt;dup) &#123;</span><br><span class=\"line\">            value = copy-&gt;dup(node-&gt;value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">                listRelease(copy);</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            value = node-&gt;value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将节点添加到链表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listAddNodeTail(copy, value) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            listRelease(copy);</span><br><span class=\"line\">            listReleaseIterator(iter);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放迭代器</span></span><br><span class=\"line\">    listReleaseIterator(iter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回副本</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"简单动态字符串sds\"><a class=\"markdownIt-Anchor\" href=\"#简单动态字符串sds\"></a> 简单动态字符串sds</h2>\n<p>sds 的源码主要在 sds.h 和 sds.c 中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 保存字符串对象的结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// buf 中已占用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf 中剩余可用空间的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数据空间</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中 buf 数组是柔性数组，在分配的时候不占内存大小</p>\n<p>sds.h 中还有两个 inline 的静态函数，用于返回实际保存的字符串长度和可用空间的字符串长度</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 实际保存的字符串的长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">size_t</span> <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span> <span class=\"comment\">//buf地址往回sizeof(struct sdshdr))</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;len;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回 sds 可用空间的长度</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">size_t</span> <span class=\"title\">sdsavail</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span> = (<span class=\"title\">void</span>*)(<span class=\"title\">s</span>-(<span class=\"title\">sizeof</span>(<span class=\"title\">struct</span> <span class=\"title\">sdshdr</span>)));</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sh-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这边用了一个骚操作，用 buf 的数组指针减去8字节，就得到了结构体的初始位置，也就是结构体的指针：</p>\n<div align='center'>\n  <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/redis/20200502162607.png\" height=\"180px\">\n</div>\n这个技巧在 redis 中多处用到\n<p>sds 主要接口函数声明：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的 sds T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据给定字符串 init ，创建一个包含同样字符串的 sds T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnew</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *init)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建并返回一个只保存了空字符串 \"\" 的 sds T = O(1)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsempty</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回 sds 实际保存的字符串的长度 T = O(1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">sdslen</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复制给定 sds 的副本 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsdup</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放给定的 sds T = O(N)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sdsfree</span><span class=\"params\">(sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回 sds 可用空间的长度 T = O(1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">sdsavail</span><span class=\"params\">(<span class=\"keyword\">const</span> sds s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 sds 扩充至指定长度，未使用的空间以 0 字节填充 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsgrowzero</span><span class=\"params\">(sds s, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将长度为 len 的字符串 t 追加到 sds 的字符串末尾 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatlen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *t, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将给定字符串 t 追加到 sds 的末尾 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscat</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将另一个 sds 追加到一个 sds 的末尾 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscatsds</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> sds t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字符串 t 的前 len 个字符复制到 sds s 当中，并在字符串的最后添加终结符 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpylen</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t, <span class=\"keyword\">size_t</span> len)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将字符串复制到 sds 当中，覆盖原有的字符 T = O(N)</span></span><br><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdscpy</span><span class=\"params\">(sds s, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *t)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>其中几个：</p>\n<ul>\n<li><strong>sdsnew</strong><br />\n根据给定字符串 init ，创建一个包含同样字符串的 sds</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnew</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *init)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> initlen = (init == <span class=\"literal\">NULL</span>) ? <span class=\"number\">0</span> : <span class=\"built_in\">strlen</span>(init);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdsnewlen(init, initlen);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中调用了：</p>\n<ul>\n<li><strong>sdsnewlen</strong><br />\n根据给定的初始化字符串 init 和字符串长度 initlen 创建一个新的</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">sds <span class=\"title\">sdsnewlen</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *init, <span class=\"keyword\">size_t</span> initlen)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> *<span class=\"title\">sh</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据是否有初始化内容，选择适当的内存分配方式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (init) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zmalloc 不初始化所分配的内存</span></span><br><span class=\"line\">        sh = zmalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>); <span class=\"comment\">// 结构体+buf数组+'\\0'</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// zcalloc 将分配的内存全部初始化为 0</span></span><br><span class=\"line\">        sh = zcalloc(<span class=\"keyword\">sizeof</span>(struct sdshdr)+initlen+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 内存分配失败，返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sh == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置初始化长度</span></span><br><span class=\"line\">    sh-&gt;len = initlen;</span><br><span class=\"line\">    <span class=\"comment\">// 新 sds 不预留任何空间</span></span><br><span class=\"line\">    sh-&gt;<span class=\"built_in\">free</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有指定初始化内容，将它们复制到 sdshdr 的 buf 中</span></span><br><span class=\"line\">    <span class=\"comment\">// T = O(N)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initlen &amp;&amp; init)</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(sh-&gt;buf, init, initlen);</span><br><span class=\"line\">    <span class=\"comment\">// 以 \\0 结尾</span></span><br><span class=\"line\">    sh-&gt;buf[initlen] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回 buf 部分，而不是整个 sdshdr</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>*)sh-&gt;buf;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 zmalloc 和 zcalloc 为 redis 使用的内存管理工具，在 zmalloc.c 和 zmalloc.h 中定义</p>\n<h2 id=\"双端链表\"><a class=\"markdownIt-Anchor\" href=\"#双端链表\"></a> 双端链表</h2>\n<p>双端链表 的源码主要在 adlist.h 和 adlist.c 中</p>\n<p>双端链表节点：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后置节点</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listNode;</span><br></pre></td></tr></table></figure>\n<p>双端链表结构:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表结构</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表头节点</span></span><br><span class=\"line\">    listNode *head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表尾节点</span></span><br><span class=\"line\">    listNode *tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值复制函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *(*dup)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值释放函数</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*<span class=\"built_in\">free</span>)(<span class=\"keyword\">void</span> *ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 节点值对比函数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">void</span> *ptr, <span class=\"keyword\">void</span> *key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 链表所包含的节点数量</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br></pre></td></tr></table></figure>\n<p>为了规范化的宏定义函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回给定链表所包含的节点数量</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listLength(l) ((l)-&gt;len)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的表头节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listFirst(l) ((l)-&gt;head)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的表尾节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listLast(l) ((l)-&gt;tail)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定节点的前置节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listPrevNode(n) ((n)-&gt;prev)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定节点的后置节点</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listNextNode(n) ((n)-&gt;next)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定节点的值</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listNodeValue(n) ((n)-&gt;value)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将链表 l 的值复制函数设置为 m</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listSetDupMethod(l,m) ((l)-&gt;dup = (m))</span></span><br><span class=\"line\"><span class=\"comment\">// 将链表 l 的值释放函数设置为 m</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listSetFreeMethod(l,m) ((l)-&gt;free = (m))</span></span><br><span class=\"line\"><span class=\"comment\">// 将链表的对比函数设置为 m</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listSetMatchMethod(l,m) ((l)-&gt;match = (m))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的值复制函数</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listGetDupMethod(l) ((l)-&gt;dup)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的值释放函数</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listGetFree(l) ((l)-&gt;free)</span></span><br><span class=\"line\"><span class=\"comment\">// 返回给定链表的值对比函数</span></span><br><span class=\"line\"><span class=\"comment\">// T = O(1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> listGetMatchMethod(l) ((l)-&gt;match)</span></span><br></pre></td></tr></table></figure>\n<p>几个主要接口函数：</p>\n<ul>\n<li><strong>listCreate</strong><br />\n创建一个新的链表 T = O(1)</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listCreate</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">list</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"built_in\">list</span> = zmalloc(<span class=\"keyword\">sizeof</span>(*<span class=\"built_in\">list</span>))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化属性</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;dup = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span> = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;match = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listRelease</strong><br />\n释放整个链表，以及链表中所有节点</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">listRelease</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len;</span><br><span class=\"line\">    listNode *current, *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指向头指针</span></span><br><span class=\"line\">    current = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历整个链表</span></span><br><span class=\"line\">    len = <span class=\"built_in\">list</span>-&gt;len;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(len--) &#123;</span><br><span class=\"line\">        next = current-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果有设置值释放函数，那么调用它</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>) <span class=\"built_in\">list</span>-&gt;<span class=\"built_in\">free</span>(current-&gt;value);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 释放节点结构</span></span><br><span class=\"line\">        zfree(current);</span><br><span class=\"line\"></span><br><span class=\"line\">        current = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放链表结构</span></span><br><span class=\"line\">    zfree(<span class=\"built_in\">list</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listAddNodeHead</strong><br />\n将一个包含有给定值指针 value 的新节点添加到链表的表头</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listAddNodeHead</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">void</span> *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为节点分配内存</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((node = zmalloc(<span class=\"keyword\">sizeof</span>(*node))) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存值指针</span></span><br><span class=\"line\">    node-&gt;value = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到空链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = <span class=\"built_in\">list</span>-&gt;tail = node;</span><br><span class=\"line\">        node-&gt;prev = node-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 添加节点到非空链表</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        node-&gt;prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        node-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head-&gt;prev = node;</span><br><span class=\"line\">        <span class=\"built_in\">list</span>-&gt;head = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新链表节点数</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;len++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 redis 双端队列中使用了迭代器这一技巧</p>\n<p>双端链表迭代器：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 双端链表迭代器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listIter</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 当前迭代到的节点</span></span><br><span class=\"line\">    listNode *next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代的方向</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> direction;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; listIter;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listGetIterator</strong><br />\n为给定链表创建一个迭代器，之后每次对这个迭代器调用 listNext 都返回被迭代到的链表节点</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">listIter *<span class=\"title\">listGetIterator</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>, <span class=\"keyword\">int</span> direction)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 为迭代器分配内存</span></span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((iter = zmalloc(<span class=\"keyword\">sizeof</span>(*iter))) == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据迭代方向，设置迭代器的起始节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (direction == AL_START_HEAD)</span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;head;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        iter-&gt;next = <span class=\"built_in\">list</span>-&gt;tail;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录迭代方向</span></span><br><span class=\"line\">    iter-&gt;direction = direction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> iter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listNext</strong><br />\n返回迭代器当前所指向的节点<br />\n这个函数其实有两个作用：返回当前迭代器指向的节点 + 使迭代器指向下一个节点（我刚开始还没明白只return了一个current，怎么把iter传出去，后来看了这个函数的使用才知道，因为函数传入的是指针，只要定义一个listIter类型的指针，一直使用该函数就能迭代了</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">listNode *<span class=\"title\">listNext</span><span class=\"params\">(listIter *iter)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    listNode *current = iter-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据方向选择下一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iter-&gt;direction == AL_START_HEAD)</span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"comment\">// 保存下一个节点，防止当前节点被删除而造成指针丢失</span></span><br><span class=\"line\">            iter-&gt;next = current-&gt;prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>listDup</strong><br />\n复制整个链表<br />\n其中就使用了上述的listNext来进行迭代</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">list</span> *<span class=\"title\">listDup</span><span class=\"params\">(<span class=\"built_in\">list</span> *orig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">list</span> *copy;</span><br><span class=\"line\">    listIter *iter;</span><br><span class=\"line\">    listNode *node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建新链表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((copy = listCreate()) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置节点值处理函数</span></span><br><span class=\"line\">    copy-&gt;dup = orig-&gt;dup;</span><br><span class=\"line\">    copy-&gt;<span class=\"built_in\">free</span> = orig-&gt;<span class=\"built_in\">free</span>;</span><br><span class=\"line\">    copy-&gt;match = orig-&gt;match;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 迭代整个输入链表</span></span><br><span class=\"line\">    iter = listGetIterator(orig, AL_START_HEAD);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((node = listNext(iter)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 复制节点值到新节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (copy-&gt;dup) &#123;</span><br><span class=\"line\">            value = copy-&gt;dup(node-&gt;value);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">                listRelease(copy);</span><br><span class=\"line\">                listReleaseIterator(iter);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            value = node-&gt;value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将节点添加到链表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (listAddNodeTail(copy, value) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            listRelease(copy);</span><br><span class=\"line\">            listReleaseIterator(iter);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放迭代器</span></span><br><span class=\"line\">    listReleaseIterator(iter);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回副本</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"[CSAPP] 机器表示","date":"2020-10-06T08:09:00.000Z","_content":"\n> 记录一些容易忘的...x86-64下...\n\n- 寄存器：程序计数器PC(%rsp) + 整数寄存器(16*64bit) + 条件码寄存器 + 一组向量寄存器\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006162747.png\" width=\"500px\"> </div>\n\n生成1字节和2字节的指令会保持剩下的字节不变；生成4字节数字的指令会把高位4个字节置为0\n\n- 寻址方式\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164718.png\" width=\"500px\"> </div>\n\n- 压栈和出栈指令\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164337.png\" width=\"500px\"> </div>\n\n```assembly\npushq %rbp\n```\n\n等同于\n\n```assembly\nsubq $8,%rsp;栈指针减\nmovq %rbp,(%rsp);store\n```\n\n- lea 加载有效地址\n\n  目的：将有效地址写入到目的操作数，**根本就没有引用内存**\n\n  leaq 7(%rdx,%rdx,4),%rax  如%rdx为x，则将%rax设置为5x+7\n\n- 过程\n  - 传递控制：进入Q时，PC被设置为Q代码的起始地址，返回时，PC设置为P中调用Q后的指令\n  - 传递数据：P必须向Q提供一个或多个参数，Q必须能够向P返回一个值\n  - 分配和释放内存：开始时Q会分配局部空间，返回前必须释放这些空间\n\n- 运行时栈\n  \n  - 通过寄存器传参最多只能6个，超过6个需要P在自己的栈帧里存储好这些参数\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006170142.png\" width=\"500px\"> </div>\n\n- 转移控制\n\n  - call Q\n\n    把返回地址压入栈，并把PC设为Q的起始地址\n\n  - ret\n\n    会从栈中弹出地址A，并把PC设置为返回地址（call指令的下一条）\n\n- 数据传送\n\nx86-64中，可以通过寄存器最多传递6个整型参（例如整数和指针）参数。寄存器的使用是有特殊顺序的，名字取决于数据类型大小\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006171042.png\" width=\"500px\"> </div>\n\n如果参数大于6，则把参数7~n放到栈上，**参数7位于栈顶**。通过栈传递参数时，所有的数据大小都向8对齐\n\n- 栈上的局部存储\n\n  有时候，局部数据必须存放在内存里：\n\n  - 寄存器不足够存放所有的本地数据\n  - 对一个局部变量使用地址运算符'&'，因此必须能够为它产生一个地址\n  - 某些局部变量是数组或结构，因此必须能够通过数组或结构引用被访问到\n\n- 寄存器中的局部存储空间\n  - 被调用者保存寄存器：%rbx,%rbp和%r12~%r15 过程Q保存一个寄存器的值不变，要么就是根本不去改变它，要么就是把原始值压入栈中，改了值，然后在返回之前从栈中弹出旧值\n  - 调用者保存寄存器：其他除了%rsp 过程Q可以随意修改这个寄存器，因为在调用之前保存是P的责任\n\n- 数据对齐\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006214508.png\" width=\"500px\"> </div>","source":"_posts/csapp-pre-bomblab.md","raw":"---\ntitle: '[CSAPP] 机器表示'\ndate: 2020-10-6 16:09\ntags: \n- CSAPP\ncategories: \n- 编译\n- 汇编\n---\n\n> 记录一些容易忘的...x86-64下...\n\n- 寄存器：程序计数器PC(%rsp) + 整数寄存器(16*64bit) + 条件码寄存器 + 一组向量寄存器\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006162747.png\" width=\"500px\"> </div>\n\n生成1字节和2字节的指令会保持剩下的字节不变；生成4字节数字的指令会把高位4个字节置为0\n\n- 寻址方式\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164718.png\" width=\"500px\"> </div>\n\n- 压栈和出栈指令\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164337.png\" width=\"500px\"> </div>\n\n```assembly\npushq %rbp\n```\n\n等同于\n\n```assembly\nsubq $8,%rsp;栈指针减\nmovq %rbp,(%rsp);store\n```\n\n- lea 加载有效地址\n\n  目的：将有效地址写入到目的操作数，**根本就没有引用内存**\n\n  leaq 7(%rdx,%rdx,4),%rax  如%rdx为x，则将%rax设置为5x+7\n\n- 过程\n  - 传递控制：进入Q时，PC被设置为Q代码的起始地址，返回时，PC设置为P中调用Q后的指令\n  - 传递数据：P必须向Q提供一个或多个参数，Q必须能够向P返回一个值\n  - 分配和释放内存：开始时Q会分配局部空间，返回前必须释放这些空间\n\n- 运行时栈\n  \n  - 通过寄存器传参最多只能6个，超过6个需要P在自己的栈帧里存储好这些参数\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006170142.png\" width=\"500px\"> </div>\n\n- 转移控制\n\n  - call Q\n\n    把返回地址压入栈，并把PC设为Q的起始地址\n\n  - ret\n\n    会从栈中弹出地址A，并把PC设置为返回地址（call指令的下一条）\n\n- 数据传送\n\nx86-64中，可以通过寄存器最多传递6个整型参（例如整数和指针）参数。寄存器的使用是有特殊顺序的，名字取决于数据类型大小\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006171042.png\" width=\"500px\"> </div>\n\n如果参数大于6，则把参数7~n放到栈上，**参数7位于栈顶**。通过栈传递参数时，所有的数据大小都向8对齐\n\n- 栈上的局部存储\n\n  有时候，局部数据必须存放在内存里：\n\n  - 寄存器不足够存放所有的本地数据\n  - 对一个局部变量使用地址运算符'&'，因此必须能够为它产生一个地址\n  - 某些局部变量是数组或结构，因此必须能够通过数组或结构引用被访问到\n\n- 寄存器中的局部存储空间\n  - 被调用者保存寄存器：%rbx,%rbp和%r12~%r15 过程Q保存一个寄存器的值不变，要么就是根本不去改变它，要么就是把原始值压入栈中，改了值，然后在返回之前从栈中弹出旧值\n  - 调用者保存寄存器：其他除了%rsp 过程Q可以随意修改这个寄存器，因为在调用之前保存是P的责任\n\n- 数据对齐\n\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006214508.png\" width=\"500px\"> </div>","slug":"csapp-pre-bomblab","published":1,"updated":"2020-10-07T02:45:27.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfyulk2h0000tgv7fu82ewlw","content":"<blockquote>\n<p>记录一些容易忘的…x86-64下…</p>\n</blockquote>\n<ul>\n<li>寄存器：程序计数器PC(%rsp) + 整数寄存器(16*64bit) + 条件码寄存器 + 一组向量寄存器</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006162747.png\" width=\"500px\"> </div>\n<p>生成1字节和2字节的指令会保持剩下的字节不变；生成4字节数字的指令会把高位4个字节置为0</p>\n<ul>\n<li>寻址方式</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164718.png\" width=\"500px\"> </div>\n<ul>\n<li>压栈和出栈指令</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164337.png\" width=\"500px\"> </div>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pushq %rbp</span><br></pre></td></tr></table></figure>\n<p>等同于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">subq $8,%rsp;栈指针减</span><br><span class=\"line\">movq %rbp,(%rsp);store</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>lea 加载有效地址</p>\n<p>目的：将有效地址写入到目的操作数，<strong>根本就没有引用内存</strong></p>\n<p>leaq 7(%rdx,%rdx,4),%rax  如%rdx为x，则将%rax设置为5x+7</p>\n</li>\n<li>\n<p>过程</p>\n<ul>\n<li>传递控制：进入Q时，PC被设置为Q代码的起始地址，返回时，PC设置为P中调用Q后的指令</li>\n<li>传递数据：P必须向Q提供一个或多个参数，Q必须能够向P返回一个值</li>\n<li>分配和释放内存：开始时Q会分配局部空间，返回前必须释放这些空间</li>\n</ul>\n</li>\n<li>\n<p>运行时栈</p>\n<ul>\n<li>通过寄存器传参最多只能6个，超过6个需要P在自己的栈帧里存储好这些参数</li>\n</ul>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006170142.png\" width=\"500px\"> </div>\n<ul>\n<li>\n<p>转移控制</p>\n<ul>\n<li>\n<p>call Q</p>\n<p>把返回地址压入栈，并把PC设为Q的起始地址</p>\n</li>\n<li>\n<p>ret</p>\n<p>会从栈中弹出地址A，并把PC设置为返回地址（call指令的下一条）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>数据传送</p>\n</li>\n</ul>\n<p>x86-64中，可以通过寄存器最多传递6个整型参（例如整数和指针）参数。寄存器的使用是有特殊顺序的，名字取决于数据类型大小</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006171042.png\" width=\"500px\"> </div>\n<p>如果参数大于6，则把参数7~n放到栈上，<strong>参数7位于栈顶</strong>。通过栈传递参数时，所有的数据大小都向8对齐</p>\n<ul>\n<li>\n<p>栈上的局部存储</p>\n<p>有时候，局部数据必须存放在内存里：</p>\n<ul>\n<li>寄存器不足够存放所有的本地数据</li>\n<li>对一个局部变量使用地址运算符’&amp;’，因此必须能够为它产生一个地址</li>\n<li>某些局部变量是数组或结构，因此必须能够通过数组或结构引用被访问到</li>\n</ul>\n</li>\n<li>\n<p>寄存器中的局部存储空间</p>\n<ul>\n<li>被调用者保存寄存器：%rbx,%rbp和%r12~%r15 过程Q保存一个寄存器的值不变，要么就是根本不去改变它，要么就是把原始值压入栈中，改了值，然后在返回之前从栈中弹出旧值</li>\n<li>调用者保存寄存器：其他除了%rsp 过程Q可以随意修改这个寄存器，因为在调用之前保存是P的责任</li>\n</ul>\n</li>\n<li>\n<p>数据对齐</p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006214508.png\" width=\"500px\"> </div>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#49B1F5","paginator":"#00C4B6","button_hover":"#FF7242","text_selection":"#00C4B6","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Tags":"/tags","Categories":"/categories"},"favicon":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/favicon.png","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"default","code_word_wrap":true,"social":{"github fa":"https://github.com/LittleMeepo"},"algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":true},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":true,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":false,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/other/avatar.jpg","top_img":"https://cdn.jsdelivr.net/gh/littlemeepo/cdn@2.0/images/banner/0.jpg","top_img_height":80,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":true,"length":150},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"league","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2019,"ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":false,"url":"","text":""},"sidebar_display":"post","google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"404Text":null,"rootConfig":{"title":"Edith","subtitle":"Even dead, I'm the Hero.","description":"Wang's blog","author":"Wang","language":"zh-Hans","timezone":"","url":"https://wfc.ink","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":false,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":[{"type":"git","repo":"git@106.54.209.155:/home/git/blog.git","branch":"master"}],"ignore":null,"meta_generator":true,"keywords":["C++","Linux"],"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"search":{"path":"search.xml","field":"post","content":true},"markdown_it_plus":{"plugins":[{"plugin":null,"name":"@neilsustc/markdown-it-katex","enable":true,"options":{"strict":false}}]},"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<blockquote>\n<p>记录一些容易忘的…x86-64下…</p>\n</blockquote>\n<ul>\n<li>寄存器：程序计数器PC(%rsp) + 整数寄存器(16*64bit) + 条件码寄存器 + 一组向量寄存器</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006162747.png\" width=\"500px\"> </div>\n<p>生成1字节和2字节的指令会保持剩下的字节不变；生成4字节数字的指令会把高位4个字节置为0</p>\n<ul>\n<li>寻址方式</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164718.png\" width=\"500px\"> </div>\n<ul>\n<li>压栈和出栈指令</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006164337.png\" width=\"500px\"> </div>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pushq %rbp</span><br></pre></td></tr></table></figure>\n<p>等同于</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">subq $8,%rsp;栈指针减</span><br><span class=\"line\">movq %rbp,(%rsp);store</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>lea 加载有效地址</p>\n<p>目的：将有效地址写入到目的操作数，<strong>根本就没有引用内存</strong></p>\n<p>leaq 7(%rdx,%rdx,4),%rax  如%rdx为x，则将%rax设置为5x+7</p>\n</li>\n<li>\n<p>过程</p>\n<ul>\n<li>传递控制：进入Q时，PC被设置为Q代码的起始地址，返回时，PC设置为P中调用Q后的指令</li>\n<li>传递数据：P必须向Q提供一个或多个参数，Q必须能够向P返回一个值</li>\n<li>分配和释放内存：开始时Q会分配局部空间，返回前必须释放这些空间</li>\n</ul>\n</li>\n<li>\n<p>运行时栈</p>\n<ul>\n<li>通过寄存器传参最多只能6个，超过6个需要P在自己的栈帧里存储好这些参数</li>\n</ul>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006170142.png\" width=\"500px\"> </div>\n<ul>\n<li>\n<p>转移控制</p>\n<ul>\n<li>\n<p>call Q</p>\n<p>把返回地址压入栈，并把PC设为Q的起始地址</p>\n</li>\n<li>\n<p>ret</p>\n<p>会从栈中弹出地址A，并把PC设置为返回地址（call指令的下一条）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>数据传送</p>\n</li>\n</ul>\n<p>x86-64中，可以通过寄存器最多传递6个整型参（例如整数和指针）参数。寄存器的使用是有特殊顺序的，名字取决于数据类型大小</p>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006171042.png\" width=\"500px\"> </div>\n<p>如果参数大于6，则把参数7~n放到栈上，<strong>参数7位于栈顶</strong>。通过栈传递参数时，所有的数据大小都向8对齐</p>\n<ul>\n<li>\n<p>栈上的局部存储</p>\n<p>有时候，局部数据必须存放在内存里：</p>\n<ul>\n<li>寄存器不足够存放所有的本地数据</li>\n<li>对一个局部变量使用地址运算符’&amp;’，因此必须能够为它产生一个地址</li>\n<li>某些局部变量是数组或结构，因此必须能够通过数组或结构引用被访问到</li>\n</ul>\n</li>\n<li>\n<p>寄存器中的局部存储空间</p>\n<ul>\n<li>被调用者保存寄存器：%rbx,%rbp和%r12~%r15 过程Q保存一个寄存器的值不变，要么就是根本不去改变它，要么就是把原始值压入栈中，改了值，然后在返回之前从栈中弹出旧值</li>\n<li>调用者保存寄存器：其他除了%rsp 过程Q可以随意修改这个寄存器，因为在调用之前保存是P的责任</li>\n</ul>\n</li>\n<li>\n<p>数据对齐</p>\n</li>\n</ul>\n<div align='center'> <img src=\"https://cdn.jsdelivr.net/gh/LittleMeepo/blog_images/images/csapp/20201006214508.png\" width=\"500px\"> </div>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckfwrkg5x0000jwv75y2faxsj","category_id":"ckfwrkg640001jwv7fl4j6nki","_id":"ckfwrkg6a0005jwv7h3rh5svo"},{"post_id":"ckfwrkg5x0000jwv75y2faxsj","category_id":"ckfwrkg680004jwv72vfybgcm","_id":"ckfwrkg6a0006jwv715wpbbrf"},{"post_id":"ckfth5oz40000fcv7g89w1y3v","category_id":"ckfwrkg640001jwv7fl4j6nki","_id":"ckfwrv6rq0004i8v7eruw17if"},{"post_id":"ckfth5oz40000fcv7g89w1y3v","category_id":"ckfwrv6rl0000i8v7c1l0gw7p","_id":"ckfwrv6rq0005i8v7c8nqgj7f"},{"post_id":"ckft0fvp40000dsv73idcbnq3","category_id":"ckfwrkg640001jwv7fl4j6nki","_id":"ckfwrv6rq0006i8v74uqp1ne4"},{"post_id":"ckft0fvp40000dsv73idcbnq3","category_id":"ckfwrv6rl0000i8v7c1l0gw7p","_id":"ckfwrv6rr0007i8v72wum2drg"},{"post_id":"ckfmadws4000064v78537caxf","category_id":"ckfwrkg640001jwv7fl4j6nki","_id":"ckfwrv6wg0008i8v79n6kbs23"},{"post_id":"ckfmadws4000064v78537caxf","category_id":"ckfwrv6rl0000i8v7c1l0gw7p","_id":"ckfwrv6wg0009i8v7bc0zht1i"},{"post_id":"ckfwrz4l80001qwv7ffoffdjs","category_id":"ckfwrkg640001jwv7fl4j6nki","_id":"ckfwrz4lf0006qwv76346gr0r"},{"post_id":"ckfwrz4l20000qwv7byfqa0hl","category_id":"ckfwrkg640001jwv7fl4j6nki","_id":"ckfwrz4lf0008qwv7fdlv0f8x"},{"post_id":"ckfwrz4l20000qwv7byfqa0hl","category_id":"ckfwrz4la0003qwv77lnx21qn","_id":"ckfwrz4lg0009qwv7cszk8ah4"},{"post_id":"ckfyskt2k0001pcv76zzyafbu","category_id":"ckfi8ds1z0003bkv70jfb51ue","_id":"ckfyskt2n0006pcv77v21brop"},{"post_id":"ckfyulk2h0000tgv7fu82ewlw","category_id":"ckfwrkg640001jwv7fl4j6nki","_id":"ckfyulk2o0002tgv74hta1hw6"},{"post_id":"ckfyulk2h0000tgv7fu82ewlw","category_id":"ckfwrz4la0003qwv77lnx21qn","_id":"ckfyulk2o0003tgv7bgxkgt22"}],"PostTag":[{"post_id":"ckfmadws4000064v78537caxf","tag_id":"ckfmadwsc000264v700uaf4e2","_id":"ckfmadwse000664v74wlie8qf"},{"post_id":"ckfmadws4000064v78537caxf","tag_id":"ckfmadwsd000364v76nj66p3x","_id":"ckfmadwse000764v79j68hdzv"},{"post_id":"ckfmadws4000064v78537caxf","tag_id":"ckfmadwsd000564v738n84jsd","_id":"ckfmadwse000864v7akj456py"},{"post_id":"ckft0fvp40000dsv73idcbnq3","tag_id":"ckfmadwsc000264v700uaf4e2","_id":"ckft0fvpb0001dsv744aa69px"},{"post_id":"ckft0fvp40000dsv73idcbnq3","tag_id":"ckfmadwsd000364v76nj66p3x","_id":"ckft0fvpc0002dsv7a9cz8ri7"},{"post_id":"ckft0fvp40000dsv73idcbnq3","tag_id":"ckfmadwsd000564v738n84jsd","_id":"ckft0fvpc0004dsv7dhrhf2g9"},{"post_id":"ckfth5oz40000fcv7g89w1y3v","tag_id":"ckfmadwsc000264v700uaf4e2","_id":"ckfth5oza0001fcv78sqs5gmq"},{"post_id":"ckfth5oz40000fcv7g89w1y3v","tag_id":"ckfmadwsd000364v76nj66p3x","_id":"ckfth5ozb0002fcv7apgr15it"},{"post_id":"ckfth5oz40000fcv7g89w1y3v","tag_id":"ckfmadwsd000564v738n84jsd","_id":"ckfth5ozb0004fcv72vrt3cml"},{"post_id":"ckfwrkg5x0000jwv75y2faxsj","tag_id":"ckfwrkg670002jwv77igxd6ss","_id":"ckfwrkg680003jwv789l76mdx"},{"post_id":"ckfwrkg5x0000jwv75y2faxsj","tag_id":"ckfwrv6rn0001i8v70c0g5mmg","_id":"ckfwrv6rq0003i8v7hc829vpi"},{"post_id":"ckfwrz4l20000qwv7byfqa0hl","tag_id":"ckfwrv6rn0001i8v70c0g5mmg","_id":"ckfwrz4la0002qwv7a0q02eyn"},{"post_id":"ckfwrz4l20000qwv7byfqa0hl","tag_id":"ckfwrkg670002jwv77igxd6ss","_id":"ckfwrz4le0004qwv7cvs37z84"},{"post_id":"ckfwrz4l80001qwv7ffoffdjs","tag_id":"ckfwrv6rn0001i8v70c0g5mmg","_id":"ckfwrz4lf0005qwv7hvbq84wl"},{"post_id":"ckfwrz4l80001qwv7ffoffdjs","tag_id":"ckfwrkg670002jwv77igxd6ss","_id":"ckfwrz4lf0007qwv7af4s5vg2"},{"post_id":"ckfyskt2k0001pcv76zzyafbu","tag_id":"ckfi8ds200004bkv7hgnmg7s3","_id":"ckfyskt2m0003pcv761os7qch"},{"post_id":"ckfyulk2h0000tgv7fu82ewlw","tag_id":"ckfwrv6rn0001i8v70c0g5mmg","_id":"ckfyulk2n0001tgv72w8aeoa3"}],"Tag":[{"name":"redis","_id":"ckfi8ds200004bkv7hgnmg7s3"},{"name":"CS143","_id":"ckfmadwsc000264v700uaf4e2"},{"name":"词法分析","_id":"ckfmadwsd000364v76nj66p3x"},{"name":"Lex","_id":"ckfmadwsd000564v738n84jsd"},{"name":"Labs","_id":"ckfwrkg670002jwv77igxd6ss"},{"name":"CSAPP","_id":"ckfwrv6rn0001i8v70c0g5mmg"}]}}